<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Irfan Maulana</title>
    <atom:link href="https://mazipan.github.io/blogs/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>https://mazipan.github.io/blogs</link>
    <description>Irfan Maulana's Personal Blog</description>
    <pubDate>Wed, 10 Oct 2018 18:57:20 +0000</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Yang sering terlewat oleh developer ketika mengembangkan PWA</title>
      <link>https://mazipan.github.io/blogs/articles/yang-sering-terlewat-oleh-developer-ketika-mengembangkan-pwa.md/</link>
      <pubDate>Wed, 10 Oct 2018 18:57:20 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/yang-sering-terlewat-oleh-developer-ketika-mengembangkan-pwa.md/</guid>
      <author></author>
      <description>&lt;p&gt;PWA (Progressive Web Apps) memang sepertinya menjadi satu hal yang sering terjadi simpang siur antar satu developer dengan developer lain pun antar satu perusahaan dengan perusahaan lain baik dalam hal implementasi maupun dalam hal pemahamannya sendiri.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”640”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*8Qe_2KV7gLQ6_ZU0cJulAw.jpeg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;425&quot; /&gt; Yang sering terlewat oleh developer ketika mengembangkan PWA[/caption]&lt;/p&gt;
&lt;p&gt;Untuk mem-break down lebih dalam, mari kita sama-sama mundur ke belakang dengan memahami kenapa PWA itu ada atau dibutuhkan.&lt;/p&gt;
&lt;p&gt;Pada mulanya kita mesti tau bahwa pengguna internet semakin kesini memang semakin mobile, ini ditunjukkan dengan data bahwa pengguna yang menggunakan mobile device semakin mendominasi diantara keseluruhan pengguna. Sayangnya pertumbuhan pengguna ini tidak dibarengi dengan baiknya kualitas yang harus pengguna dapatkan ketika mengakses internet lewat mobile, hal ini tentu berbanding lurus dengan device yang digunakan dimana menjadi salah satu penentu baik tidaknya juga pengalaman yang akan mereka rasakan ketika mengakses internet. Keberagaman dan keterbatasan mobile device diperparah dengan kondisi jaringan yang memang belum merata di beberapa negara termasuk di Indonesia. Sebagian pengguna mobile device terutama di negara berkembang seperti Indonesia masih berkutat di jaringan slow 3G yang tentunya masih terbatas soal kecepatan akses data.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”1422”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*LSQwXf9OufLwIStbNKC3Aw.png&quot; alt=&quot;&quot; width=&quot;1422&quot; height=&quot;1306&quot; /&gt; Statistik dari &lt;a href=&quot;https://www.statista.com/statistics/241462/global-mobile-phone-website-traffic-share/%5B/caption%5D&quot;&gt;https://www.statista.com/statistics/241462/global-mobile-phone-website-traffic-share/[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Teknologi web dibandingkan apps dalam hal menangani pengguna mobile ini tentu berbeda jauh, bila pengguna tidak membutuhkan internet hanya untuk membuka apps maka untuk membuka web pengguna diharuskan mendownload setiap kepingan byte dari file yang dibutuhkan oleh web tersebut. Apps jelas lebih engage terhadap pengguna mobile dibandingkan web apalagi dengan kemampuannya mengakses sistem dan hardware dari device pengguna itu sendiri. Sayangnya untuk meng-install suatu apps didalam device masih dibutuhkan effort yang lumayan karena mereka harus menyiapkan storage yang mana jumlahnya juga seringkali terbatas.&lt;/p&gt;
&lt;p&gt;Maka PWA hadir mencoba menjembatani dan mengurangi gap antara teknologi web dengan teknologi apps. Tujuannya jelas memberikan pengalaman yang lebih baik terhadap pengguna mobile device ketika mengakses web.&lt;/p&gt;
&lt;p&gt;Setelah memahami kenapa harus ada PWA, maka berikutnya akan saya rangkumkan beberapa hal yang seringkali terjadi salah persepsi dan adopsi mengenai PWA:&lt;/p&gt;
&lt;h3&gt;Tidak melihat kebutuhan dan kondisi pengguna&lt;/h3&gt;
&lt;p&gt;
Ya, PWA dibuat dengan fokus utama untuk menyajikan pengalaman yang progressive kepada pengguna ketika mengakses sebuah website. Masalahnya ada banyak developer (termasuk saya) yang seringkali mencoba mengimplementasikan sesuatu tanpa melihat pada kebutuhan pengguna serta data yang kita miliki mengenai pengguna kita. Sebetulnya sebelum memutuskan untuk menggunakan PWA, terlebih dahulu sebaiknya kita memahami berbagai hal mengenai pengguna kita seperti menjawab beberapa pertanyaan seperti siapa mereka? device apa yang mereka gunakan? bagaimana persebaran wilayah mereka? jaringan apa yang mereka gunakan? seberapa penting menghemat penggunaan bandwidth data buat mereka? berapa besar persentase bounce rate dari keseluruhan pengguna? konten apa yang benar-benar dibutuhkan oleh pengguna kita? serta banyak lagi pertanyaan yang akan membuat kita lebih paham dengan kondisi pengguna kita.

&lt;p&gt;Setelah memahami kebutuhan dan kondisi pengguna, barulah kita bisa memutuskan PWA yang seperti apa yang ingin dan harus kita buat untuk membantu menyelesaikan masalah yang dihadapi pengguna. Cerita mengenai memahami kebutuhan pengguna sebelum membuat PWA bisa dibaca di artikel “&lt;a href=&quot;https://medium.com/wwwid/bagaimana-kulina-bisa-mendapatkan-41-000-lebih-pelanggan-melalui-web-d00af6165880&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Bagaimana Kulina Bisa Mendapatkan 41.000 Lebih Pelanggan Melalui Web&lt;/a&gt;” oleh Yohan Totting.&lt;/p&gt;
&lt;/p&gt;


&lt;h3&gt;Terlalu fokus pada fitur&lt;/h3&gt;
&lt;p&gt;
PWA punya segudang fitur dan kemampuan, sayangnya banyak kita (developer) yang sering terkecoh dengan fitur-fitur ini. Seolah ingin agar semua fitur yang dimiliki PWA diadopsi kedalam website kita padahal sebenarnya sama sekali tidak dibutuhkan oleh pengguna. Masing-masing fitur memiliki fungsi dan konteks yang berbeda-beda. Lebih baik bagi kita jika mengadopsi sedikit fitur namun sesuai dengan kebutuhan daripada berusaha menumpuk semua fitur namun tidak tepat guna, tidak tepat konteks dan tidak pernah digunakan oleh pengguna.

&lt;p&gt;Contoh dari beberapa kesalahan ini bisa ditemui dari tulisan Satya Kresna Adi Pratama di “&lt;a href=&quot;https://medium.com/wwwid/berbagi-pengalaman-menggunakan-web-yang-progresif-3d8682001343&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Berbagi Pengalaman menggunakan Web yang Progresif&lt;/a&gt;”, dimana banyak website yang mencoba mengimplementasi push notification dengan cara yang liar tanpa melihat konteks kapan waktu yang tepat bagi pengguna mendapatkan tawaran untuk berlangganan push notification, kapan waktu yang pas untuk mengirimkan pesan notifikasi tersebut kepada pengguna, serta konten seperti apa yang cocok untuk pengguna dapatkan di push notification itu.&lt;/p&gt;
&lt;/p&gt;



&lt;h3&gt;Berpikir bahwa PWA hanya soal Service Worker&lt;/h3&gt;
&lt;p&gt;
Salah satu core PWA memang service worker, tapi bila ingin memberikan pengalaman yang progressive untuk pengguna kita maka saya jamin service worker saja tidak akan cukup untuk memberikan perbedaan yang signifikan dari sebelumnya. PWA akan lebih optimal bila didukung dengan berbagai hal seperti diantaranya UX/UI yang mudah dan bersahabat, performa website yang baik (baca: “&lt;a href=&quot;https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Berbagai best practice dalam memuat halaman website&lt;/a&gt;”), mendukung accessibility yang baik, kemampuan diakses offline, caching yang tepat, beradaptasi sesuai kondisi jaringan (baca: “&lt;a href=&quot;https://medium.com/wwwid/web-pintar-yang-beradaptasi-sesuai-perangkat-dan-jaringan-78f4496915a4&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Web Pintar Yang Beradaptasi Sesuai Perangkat dan Jaringan&lt;/a&gt;”) dan banyak hal lainnya yang mendukung.
&lt;/p&gt;


&lt;h3&gt;Berpikir bahwa PWA merupakan one hit and run task&lt;/h3&gt;
&lt;p&gt;
PWA seringkali dikerjakan oleh para developer (termasuk saya) dengan one-hit and run task, yang artinya dikerjakan dalam satu waktu kemudian di ship ke production dan pekerjaan selesai, tanpa pernah dilihat lagi dan dikaji ulang setelahnya.

&lt;p&gt;PWA sebenarnya membutuhkan perhatian lebih, setelah mengirimkan PWA ke production sebaiknya kita juga memantau data yang bisa kita dapatkan seperti seberapa banyak pengguna yang terbantu dengan fitur PWA kita, berapa pengguna yang melakukan A2HS di device mereka, seberapa besar cache yang dilakukan service worker memakan memori pengguna, seberapa membantu cache yang dilakukan service worker dan hal lainnya.&lt;/p&gt;
&lt;p&gt;Setelah memantau berbagai data kita bisa memperbaiki PWA kita agar lebih sesuai dengan kondisi pengguna kita. Intinya membangun PWA adalah proses yang harus dilakukan secara berulang dari analyze, build, ship, measure, fix, ship again, and repeat again.&lt;/p&gt;
&lt;/p&gt;



&lt;blockquote&gt;Kita sebagai developer seringkali terjebak dengan banyak hal teknis dan lupa bahwa ada banyak hal yang mesti diperhatikan ketika membuat sebuah fitur untuk pengguna. Mari sama-sama belajar memahami pengguna kita dan let’s be a better developer!!!&lt;/blockquote&gt;

&lt;p&gt;Tulisan ini sebelumnya saya publikasikan di Medium: &lt;a href=&quot;https://medium.com/wwwid/yang-sering-developer-lupakan-soal-pwa-d26d3ee6a7ba&quot;&gt;https://medium.com/wwwid/yang-sering-developer-lupakan-soal-pwa-d26d3ee6a7ba&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Lelucon dari sebuah JavaScript Frontend Framework</title>
      <link>https://mazipan.github.io/blogs/articles/lelucon-dari-sebuah-javascript-frontend-framework.md/</link>
      <pubDate>Fri, 05 Oct 2018 18:50:57 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/lelucon-dari-sebuah-javascript-frontend-framework.md/</guid>
      <author></author>
      <description>&lt;p&gt;Membicarakan JavaScript framework yang bagi saya tidak lebih dari sekedar lelucon.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”1100”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*Q2t-jgIzVx_w1Cyy1YlbNw.png&quot; alt=&quot;Lelucon dari sebuah JavaScript Frontend Framework&quot; width=&quot;1100&quot; height=&quot;650&quot; /&gt; Gambar dari: ericheikes.com[/caption]&lt;/p&gt;
&lt;p&gt;
Front-End developer jaman sekarang sepertinya terpecah ke beberapa kubu begantung pada framework yang mereka gunakan pada projek mereka. Perbedaan kubu ini diperparah dengan saling menghujat (paling tidak menjelekkan) antara satu sama lain. Tidak jarang kita mendengar para pengguna React (oke, saya tau kalian gak mau menyebut ini framework) misalnya, mengatakan Vue inilah Vue itulah, pun sebaliknya dari berbagai pihak lain yang sepertinya tidak ada bosannya membahas topik yang sama diberbagai kesempatan.

&lt;p&gt;Saya pribadi sebenarnya selalu berusaha menghindari perdebatan seperti ini. Tulisan kali inipun saya buat bukan untuk menjatuhkan satu atau banyak pihak lain namun untuk berusaha menyampaikan pandangan dan pendapat saya mengenai hal seperti ini.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Kenapa saya tidak ingin terlibat?&lt;/h3&gt;
&lt;p&gt;
Bagi sebagian orang di luar sana, framework tidak ubahnya seperti “agama” yang keyakinan seseorang pemeluk terhadapnya akan susah dibelokkan. Itu kenapa kita (dalam hal ini, saya) tidak perlu dan tidak ingin terlibat dalam perdebatan panjang tidak berujung. Bagi saya menggunakan suatu framework “sampah” pun tidak ada masalah selama menghasilkan pundi-pundi uang untuk menghidupi keluarga saya.

&lt;p&gt;Saya bukan orang yang percaya dan gelap mata pada satu framework. Framework dan teknologi menurut saya selalu ada masanya, ada masanya terlihat keren, ada masanya terlihat cupu, ada masanya menjadi tidak relevan lagi. Pindah dari satu framework ke framework lain bukanlah hal besar yang harus kalian takutkan.&lt;/p&gt;
&lt;/p&gt;

&lt;h3&gt;Framework-mu bisa jadi cuma lelucon&lt;/h3&gt;
&lt;p&gt;
Ada teman saya kemarin (pengguna framework React) yang bilang kalau Vue tidak melakukan abstraksi secara baik dengan meletakkan logika (logic) di template sementara React melakukan dengan lebih baik dengan meletakan di JSX.
&lt;/p&gt;

&lt;blockquote&gt;Sebelumnya kalian tentunya sudah tau kalau saya pengguna (berat) Vue. Bagian berikutnya adalah opini pribadi saya yang tidak dimaksudkan untuk menjatuhkan pihak manapun.&lt;/blockquote&gt;

&lt;p&gt;
Bagaimana pendapat saya soal ini sebagai pengguna Vue?

&lt;p&gt;Saya setuju, bagian tersulit dari menempatkan logika pada sebuah template adalah cara kita memastikan logika tersebut sudah tepat sesuai ekspektasi kita (baca: melakukan test). Berbeda dengan JSX yang mana cuma sebuah JavaScript biasa dan jelas sangat testable sampai ke level logika untuk membuat view. Saya tentu tidak ingin juga menjatuhkan Vue, karena Vue punya alasan yang kuat kenapa memilih cara seperti ini bukan cara React (note: Vue bisa juga loh pake JSX &amp;#x1f64a;).&lt;/p&gt;
&lt;p&gt;Mengatakan bahwa suatu framework bisa melakukan suatu hal lebih baik dibandingkan yang lain bukanlah hal yang salah, membandingkan satu persatu fitur dan kemampuan yang disediakan juga bukan hal yang salah. Tapi menurut saya jelas salah jika menilai framework yang kalian pakai sekarang bisa melakukan hal yang lebih baik ketika kalian yang menggunakannya.&lt;/p&gt;
&lt;p&gt;React sebagai salah satu yang paling populer saat ini melakukan banyak hal dengan luar biasa, tapi pernahkah kalian pengguna React merasa bahkan ketika sudah menggunakan React di projek kalian, tetap ada saja sesuatu yang kacau (chaos) bahkan dari hal-hal sederhana katakanlah strukturasi folder, penempatan file, reusability logika , penamaan variabel, data flow dan hal lainnya.&lt;/p&gt;
&lt;p&gt;Pun demikian dengan Vue dan framework lainnya, akan sangat sering kalian temui di projek yang sesungguhnya bahwa sebuah framework tidak bisa menyelesaikan semua masalah yang kalian hadapi sehari-hari.&lt;/p&gt;
&lt;/p&gt;



&lt;blockquote&gt;Framework kalian mungkin hebat, tapi bisa jadi bagi saya cuma sebuah lelucon ketika kalian hanya bisa menggunakannya untuk menulis kode “sampah”.&lt;/blockquote&gt;


&lt;h3&gt;Tidak ada silver bullet framework&lt;/h3&gt;
&lt;p&gt;
Jangan berharap banyak dari sebuah framework, framework hanya membantu sedikit dari banyak hal di dalam proses engineering pembuatan sebuah perangkat lunak. Bila kalian terlalu percaya pada framework kalian maka siap-siaplah untuk kecewa suatu saat nanti karena ternyata framework kalian tidak sebaik yang kalian pikir &amp;#x1f602; (ini drama banget sih).
&lt;/p&gt;


&lt;blockquote&gt;Bahkan Rangga pun pernah berbuat jahat pada Cinta.&lt;/blockquote&gt;

&lt;p&gt;
Bersikap open minded akan lebih baik bagi kesehatan fikiran kalian (seriously), karena tidak perlu lagi dipusingkan dengan perdebatan tidak berfaedah di luar sana. Kalian bisa fokus mengerjakan projek kalian, menghasilkan karya, bermanfaat bagi kantor kalian bekerja, menambah pundi-pundi uang, tentunya tidak lupa untuk memberikan social impact dari kode yang kalian tulis.
&lt;/p&gt;

&lt;h3&gt;Skill kalian bisa menjadi pembeda&lt;/h3&gt;
&lt;p&gt;
Saya punya banyak teman pengguna React yang melakukan hal hebat dengan framework tersebut. Tentu saja hal ini membuat React yang sudah hebat menjadi tampak lebih sempurna lagi. Pun demikian dengan Vue, Angular dan framework lainnya ketika berada ditangan orang-orang yang mengerti bagaimana memperlakukan mereka dengan baik.

&lt;p&gt;Sebaliknya saya juga sudah pernah ngoding dengan beberapa pengguna Vue di Indonesia dan meskipun saya pengagum framework ini seringkali para developernya yang justru membuat framework ini tampak seperti anak yang lupa dimandikan orang tuanya. Vue seperti tidak punya power apapun ditangan orang-orang seperti ini.&lt;/p&gt;
&lt;p&gt;Jadi marilah kita bersama-sama berfokus meningkatkan kemampuan kita dalam menggunakan framework apapun itu, belajarlah menggunakan framework tersebut dengan baik, belajarlah membuat kode yang baik, mudah dipahami teman kalian, mudah di test dan tentunya tetap memiliki performa yang bagus pada akhirnya.&lt;/p&gt;
&lt;p&gt;Memilih framework tidak menjadikan kalian keren secara tiba-tiba, tapi belajar menggunakan framework tersebut secara keren pastinya akan berbanding lurus dengan kekerenan kalian &amp;#x1f617;.&lt;/p&gt;
&lt;p&gt;Terakhir, mari sama-sama berhenti membuat kode “sampah” dari framework keren yang kalian gunakan.&lt;/p&gt;
&lt;/p&gt;


&lt;h3&gt;Silahkan berdebat… &amp;#x1f3c3;&amp;#x200d;&amp;#x1f4a8;&lt;/h3&gt;

&lt;p&gt;Tulisan ini pernah saya publikasikan di Medium: &lt;a href=&quot;https://medium.com/mazipan-mind/fe-js-framework-sebuah-lelucon-d9d23eb88f59&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://medium.com/mazipan-mind/fe-js-framework-sebuah-lelucon-d9d23eb88f59&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Pengetahuan dasar untuk mempercepat loading sebuah website</title>
      <link>https://mazipan.github.io/blogs/articles/pengetahuan-dasar-untuk-mempercepat-loading-sebuah-website.md/</link>
      <pubDate>Mon, 01 Oct 2018 18:48:13 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/pengetahuan-dasar-untuk-mempercepat-loading-sebuah-website.md/</guid>
      <author></author>
      <description>&lt;p&gt;Berbagai pengetahuan dasar yang bisa kita pelajari dan optimalkan dalam memuat halaman website.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”1600”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*FDEUVDcdwVIPLl0tQZD9Cg.png&quot; alt=&quot;Pengetahuan dasar untuk mempercepat loading sebuah website&quot; width=&quot;1600&quot; height=&quot;1111&quot; /&gt; Image source: &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/reference%5B/caption%5D&quot;&gt;https://developers.google.com/web/tools/chrome-devtools/network-performance/reference[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Pernahkah kita merasa frustasi dengan bagaimana browser memuat website yang sudah kita buat dengan susah payah? Pernahkah kita merasa sudah melakukan berbagai optimasi di website kita namun hasilnya tetap saja tidak memuaskan? Nah, untuk mengetahui apakah hal yang sudah kita lakukan berada pada jalan yang benar maka pada tulisan ini kita akan sama-sama belajar memahami bagaimana browser memuat sebuah halaman website serta berbagai hal yang bisa kita optimasi dari website kita untuk memperbaiki performa rendering website kita di browser.
&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
Ada banyak hal tentunya dan juga ada banyak pendapat mengenai apa saja hal yang sebaiknya dan harus kita lakukan untuk memperbaiki performa website kita saat dimuat oleh browser. Kita akan coba pecahkan kedalam beberapa bagian agar lebih mudah bagi kita bersama memahami poin per poinnya.
&lt;/p&gt;

&lt;h3&gt;Browser&lt;/h3&gt;

&lt;p&gt;
Sebelum melakukan berbagai hal optimasi, kita perlu terlebih dahulu memahami bagaimana dasar-dasar browser bekerja agar nantinya lebih mudah bagi kita untuk mengaitkan pekerjaan yang akan dan telah kita lakukan.
&lt;/p&gt;

&lt;p&gt;
Browser sendiri adalah alat yang digunakan pengguna untuk melihat website kita. Bila browser adalah milik pengguna, artinya kita sebagai penyedia website akan mengirimkan berbagai file dan assets kepada pengguna melalui network mereka. Dari sini kita mengetahui bahwa pengguna satu dan pengguna lain kemungkinan akan memiliki pengalaman yang berbeda dalam memuat website kita. Kesemuanya tergantung dari kondisi pengguna itu sendiri, mulai dari kondisi network pengguna, device yang digunakan oleh pengguna, sampai browser vendor dan versi yang digunakan oleh pengguna. Berbagai hal tersebut akan secara langsung mempengaruhi pengalaman pengguna dalam memuat website kita.
&lt;/p&gt;

&lt;p&gt;
Selebihnya peran kita adalah memastikan bahwa semua file yang dibutuhkan oleh pengguna yang ingin melihat website kita dalam kondisi tersedia. Jadi kita harus bisa memastikan bahwa baik dalam keadaan low traffic ataupun high traffic pengguna kita tetap bisa mendapatkan file yang dibutuhkan. Karena bila kita sudah tidak bisa menyediakan, maka sebaik apapun kondisi pengguna tersebut tetap saja tidak akan bisa memuat halaman kita.
&lt;/p&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;p&gt;
HTML merupakan bagian utama dari sebuah website. Saya sering menyebut kalau HTML ini ibarat kerangka di tubuh manusia, sesuatu yang membangun tubuh itu sendiri. HTML merupakan representasi struktur dari website yang kita buat. Semakin rumit dan kompleks website yang kita buat akan berimbas langsung pada struktur HTML dan berakibat pada ukuran file yang harus kita kirimkan ke pengguna.
&lt;br/&gt;
Beberapa hal yang bisa kita optimalkan terhadap HTML antara lain:
&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;
&lt;h5&gt;Compress dan optimize&lt;/h5&gt;
&lt;p&gt;
Ketika membuat HTML tentu kita akan membuat kode kita agar mudah dibaca oleh developer lain dan kita akan menambahkan banyak white space agar kode kita lebih rapi. White space ini tidak dibutuhkan ketika kita mengirimkan HTML ke browser, membuang hal yang tidak perlu artinya kita dalam proses memperkecil file yang dihasilkan.

&lt;p&gt;Meskipun tidak semua penghilangan bagian yang tidak dibutuhkan itu selalu terlihat efeknya secara masif terhadap ukuran file, namun prakteknya merupakan hal yang baik untuk dilakukan. Seperti halnya saya yang selalu membenci bila ada developer yang meng-comment code dibandingkan menghapusnya ketika sudah tidak digunakan.&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;
    &lt;li&gt;
&lt;h5&gt;Memangkas waktu pembuatan&lt;/h5&gt;
&lt;p&gt;
Bila kita masih menggunakan SSR dimana kode HTML kita harus dibuat di server dengan data yang dinamis pada saat itu juga, maka kita harus memastikan waktu untuk membuat HTML tersebut bisa dipangkas sebisa mungkin. Gunakan cache baik pada data dinamis yang dibutuhkan ataupun pada HTML yang dihasilkan bila memang diperlukan.
&lt;/p&gt;
&lt;/li&gt;
    &lt;li&gt;
&lt;h5&gt;Utamakan konten above the fold&lt;/h5&gt;
&lt;p&gt;
Pengguna tidak akan melihat keseluruhan halaman website kita pada saat pertama kali halaman tersebut dimuat, melainkan hanya bagian teratas sebatas tinggi layar. Karena itu kita wajib memprioritaskan konten-konten yang berada pada wilayah tangkapan ini, sedangkan konten yang berada dibawahnya bisa dimuat belakangan. Hal ini termasuk juga dengan konten yang membutuhkan aksi dari pengguna untuk ditampilkan seperti komponen popup modal.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*cQO2xW4_EBCTAwVOC2hkdQ.png&quot; alt=&quot;&quot; /&gt;
&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;



&lt;h3&gt;CSS&lt;/h3&gt;

&lt;p&gt;
CSS merupakan bagian yang tidak terpisahkan dari sebuah website. CSS sendiri bisa dimuat paling tidak dengan 3 cara yakni inline style, internal style, dan external style. Masing-masing cara yang kita gunakan memiliki kelebihan dan kekurangannya sendiri, penggunaannya tergantung pada kebutuhan kita.

&lt;p&gt;Inline style tidak akan menambah jumlah roundtrip network kita namun susah untuk digunakan ulang dan akan menambah ukuran HTML kita. Internal style bisa digunakan ulang selama berada di halaman tersebut dan tidak akan menambah jumlah request namun juga akan menambah ukuran HTML kita. External style bisa digunakan ulang dengan mudah dan tidak akan menambah ukuran HTML yang kita kirim namun akan menambah jumlah request di network kita.&lt;/p&gt;
&lt;p&gt;Paling tidak berikut adalah beberapa cara yang bisa kita lakukan terhadap CSS kita:&lt;/p&gt;
&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;
&lt;h5&gt;Minify dan merge&lt;/h5&gt;
&lt;p&gt;
Seperti HTML, CSS pun akan membawa banyak white space yang tidak diperlukan di lingkungan production yang bisa kita hilangkan. Pengoptimalan CSS juga bisa dilakukan dengan menyatukan berbagai class atau selector lain di CSS yang memiliki rule yang sama. Penggunaan berbagai shorthand juga diperlukan untuk memberikan hasil file yang lebih ramping.

&lt;p&gt;Artikel berikut akan membantu kalian agar lebih bijak dalam menulis CSS dan bisa menghasilkan file yang lebih bersahabat dengan browser:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2008/08/7-principles-of-clean-and-optimized-css-code/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://www.smashingmagazine.com/2008/08/7-principles-of-clean-and-optimized-css-code/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h5&gt;Kurangi jumlah file&lt;/h5&gt;
&lt;p&gt;
Satu prinsip yang harus diketahui adalah bahwa semakin banyak kita memuat file maka semakin banyak waktu yang dibutuhkan untuk memuat website kita. Jadi bila kita bisa menyatukan file yang akan kita muat (selama memiliki ukuran yang masuk akal) maka menyatukannya adalah hal yang sebaiknya dilakukan.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h5&gt;Kurangi unused style&lt;/h5&gt;
&lt;p&gt;
Faktanya sebagian besar website memuat file CSS dengan isi yang sebenarnya hanya digunakan sebagian kecil dari keseluruhan isi yang ada. Menghilangkan style di CSS yang tidak digunakan oleh suatu halaman website akan sangat membantu kita dalam mengurangi ukuran file CSS yang akan kita kirimkan ke browser pengguna.

&lt;p&gt;Sedikit trik tambahan, kita bisa melihat coverage dari unused CSS dari suatu halaman website melalui menu coverage yang terdapat pada console drawer di ChromeDevTools.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*puZwisn4BDLxgv4pl8UFSQ.png&quot; alt=&quot;&quot; /&gt;
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h5&gt;Utamakan critical CSS&lt;/h5&gt;
&lt;p&gt;
Critical CSS adalah sekumpulan style CSS yang keberadaannya dirasa sangat penting bagi pengguna pada masa-masa awal halaman tersebut dimuat sehingga sangat tidak disarankan untuk menunda dalam pemuatan style semacam ini. Perlu diketahui bahwa critical CSS harus sekecil mungkin dan menghasilkan tampilan yang minimal tidak menggangu bagi pengguna dan memenuhi berbagai tampilan minimal yang harus pengguna lihat pertama kali.

&lt;p&gt;Beberapa pengembang web memutuskan untuk meletakan critical CSS ini ke dalam internal style di dalam HTML dan di dalam tag head meraka. 
Artikel berikut ini membantu kita memahami apa itu critical CSS dan bagaimana cara mengindentifikasi style mana yang critical:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2015/08/understanding-critical-css/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://www.smashingmagazine.com/2015/08/understanding-critical-css/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;



&lt;h3&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;
JavaScript merupakan penggerak dari berbagai website jaman sekarang, perannya kini kian vital seiring berkembangnya kemampuan dari bahasanya sendiri. Sayangnya JavaScript masih menjadi momok sendiri bagi browser, selain karena biasanya memiliki ukuran file yang mendominasi bagian dari website kita, juga karena dibutuhkan proses parsing maupun compile agar bisa dipahami oleh browser itu sendiri. Proses parsing ini sendiri bisa berbeda-beda setiap device dan browsernya, seperti terlihat pada gambar berikut:
&lt;/p&gt;

&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*G2FeUByS7GC2ncNilHi1pQ.png&quot; alt=&quot;&quot; /&gt;

&lt;p&gt;
Untuk memahami lebih lanjut mengenai proses bagaimana JavaScript dimuat dalam suatu browser, silahkan baca artikel dari Addy Osmani pada tautan berikut:

&lt;p&gt;&lt;a href=&quot;https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Beberapa hal yang bisa lakukan dengan JavaScript diantaranya:&lt;/p&gt;
&lt;ol&gt;

&lt;li&gt;
&lt;h5&gt;Kurangi ukuran file&lt;/h5&gt;
&lt;p&gt;
&lt;blockquote&gt;Semakin sedikit kode maka semakin sedikit yang harus di compile/parse, semakin sedikit yang harus di transfer lewat network, dan semakin sedikit juga yang harus di decompress. (diterjemahkan dari @junwatu dari https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e)&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;
Dengan kemampuan JavaScript yang sekarang bisa modular dan bisa menambahkan berbagai dependencies ke dalam projek kita dengan lebih mudah seringkali justru di-abuse oleh banyak pengembang web. Mereka tidak merasa ikut bertanggung jawab ketika hasil akhir dari file JavaScript yang harus dimuat menjadi terlalu besar. Setiap keputusan dalam menambahkan kode atau bahkan pustaka luar buatan orang lain akan secara langsung berakibat pada ukuran file kita, menjadi lebih bijak sebagai pengembang web adalah cara terbaik untuk mengurangi hal seperti ini terulang kembali. Selain kita juga bisa memasang berbagai gate termasuk ukuran file pada saat melakukan build pada projek kita.
&lt;/p&gt;
&lt;/li&gt;


&lt;li&gt;
&lt;h5&gt;Code Splitting&lt;/h5&gt;
&lt;p&gt;
Untuk beberapa website yang memilih menggunakan Single Page Application, memisahkan script berdasarkan halaman yang dikunjungi adalah hal yang mutlak harus dilakukan karena ini bisa mengurangi jumlah kode yang tidak digunakan pada halaman tersebut.
&lt;/p&gt;
&lt;/li&gt;


&lt;li&gt;
&lt;h5&gt;Uglify dan optimize&lt;/h5&gt;
&lt;p&gt;
Pastikan kita melakukan uglify dan juga optimize pada kode kita dan membuang berbagai dead code yang mungkin ada pada kode kita. Untuk melakukan ini biasanya menggunakan tools yang sudah tersedia seperti UglifyJS.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h5&gt;Async dan Defer&lt;/h5&gt;
&lt;p&gt;
Directive async pada script eksternal bisa membuat request suatu script dilakukan secara bersamaan dengan script yang lain. Hal ini bisa mengurangi waktu muat karena beberapa script dieksekusi atau diminta dalam waktu yang hampir sama. Sayangnya ketika menggunakan directive ini kita jadi tidak bisa mengetahui urutan kapan selesai satu script dieksekusi atau diminta.

&lt;p&gt;Seringkali kita harus menambahkan berbagai third party script kedalam website kita seperti analytics, berbagai tracker, maupun remarkerting/retargeting script. Hal ini tentu saja akan memperlambat waktu muat website kita, dan salah satu trik yang bisa kita lakukan adalah men-defer script kita yang artinya menunda script ini di-request ataupun dieksekusi sampai halaman terkait selesai di parsing.&lt;/p&gt;
&lt;p&gt;Berbeda dengan async yang tidak memperdulikan urutan, defer akan tetap dieksekusi berdasarkan urutan dari script yang kita tulis di kode.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bitsofco.de/async-vs-defer/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://bitsofco.de/async-vs-defer/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;


&lt;/ol&gt;



&lt;h3&gt;IMAGE&lt;/h3&gt;

&lt;ol&gt;

&lt;li&gt;
&lt;h5&gt;Kompresi kualitas&lt;/h5&gt;
&lt;p&gt;
Pastikan melakukan kompresi terhadap gambar-gambar yang akan dimuat di website kita, tidak perlu menggunakan kualitas yang sangat tajam karena akan menghasilkan ukuran gambar yang besar pula. Sudah banyak online tools gratis yang bisa kita gunakan untuk melakukan kompresi gambar seperti melalui website https://tinypng.com/ dan https://tinyjpg.com/. Kita juga bisa meletakan proses kompresi ini kedalam build proses kita seperti salah satunya menggunakan https://github.com/tcoopman/image-webpack-loader.
&lt;/p&gt;
&lt;/li&gt;


&lt;li&gt;
&lt;h5&gt;Kurangi jumlah request&lt;/h5&gt;
&lt;p&gt;
Mengurangi jumlah file gambar yang harus dimuat adalah hal utama selain melakukan optimasi pada file gambar itu sendiri. Untuk melakukan hal ini kita bisa melakukan beberapa trik seperti berikut:
&lt;/p&gt;

&lt;ul&gt;

  &lt;li&gt;
   &lt;h6&gt;Lazy load&lt;h6&gt;
   &lt;p&gt;
Gambar yang tidak sedang dilihat oleh pengguna tidaklah boleh kita muat pada saat pertama kali memuat website kita, gambar tersebut hanya boleh dimuat ketika pengguna memang sedang atau akan melihat gambar tersebut.

&lt;p&gt;Cara paling mainstream untuk menerapkan lazy load gambar adalah dengan mendeteksi scroll yang dilakukan oleh pengguna di website kita. Kabar baiknya lagi, belakangan kita malah dimudahkan untuk memuat gambar secara lazy dengan adanya IntersectionObserver.&lt;/p&gt;
&lt;/p&gt;
  &lt;/li&gt;


  &lt;li&gt;
   &lt;h6&gt;Inline SVG kecil&lt;h6&gt;
   &lt;p&gt;
SVG merupakan gambar yang dibangun dari berbagai path yang saling dihubungkan. SVG memiliki keunggulan yang bisa diperbesar tanpa mengalami pecah pada pixelnya. SVG seringkali digunakan untuk berbagai icon dalam website. Untuk memuat file ini sendiri paling mudah adalah dengan membuat tag &lt;code&gt;&lt;img src=&quot;path/file.svg&quot;/&gt;&lt;/code&gt; namun cara ini tentu akan menambah jumlah request pada network kita karena akan dimuat layaknya gambar pada umumnya. Cara lain adalah dengan meyalin tag markup yang ada di dalam file SVG tersebut dan menempatkannya langsung didalam HTML kita atau biasa dikenal dengan inline SVG. Cara ini bisa mengurangi jumlah request yang harus dilakukan namun akan menambah ukuran dari HTML kita.

&lt;p&gt;Selain itu kita bisa juga melakukan optimasi pada file SVG menggunakan SVGO yang telah dibuatkan juga versi websitenya di &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot;&gt;https://jakearchibald.github.io/svgomg/&lt;/a&gt;.&lt;/p&gt;
&lt;/p&gt;
  &lt;/li&gt;


  &lt;li&gt;
   &lt;h6&gt;Gunakan Sprite&lt;h6&gt;
   &lt;p&gt;
Sprite digunakan untuk memuat banyak gambar dalam sekali request network sehingga tidak diperlukan banyak request berulang pada prosesnya.

&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/css-sprites/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://css-tricks.com/css-sprites/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
  &lt;/li&gt;

&lt;/ul&gt;


&lt;/li&gt;


&lt;li&gt;
&lt;h5&gt;Utamakan ekstensi progressive&lt;/h5&gt;
&lt;p&gt;
Utamakan untuk menggunakan tipe gambar yang lebih baik seperti webp karena memiliki ukuran yang lebih kecil tanpa menurunkan kualitas masif.

&lt;p&gt;Artikel berikut bisa jadi panduan kita dalam menyajikan dan mengoptimalkan gambar bagi website kita:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images.guide/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://images.guide/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;


&lt;h3&gt;Lainnya&lt;/h3&gt;

&lt;ol&gt;

&lt;li&gt;
&lt;h5&gt; Kompresi &lt;/h5&gt;
&lt;p&gt;Pastikan semua file yang akan kita kirimkan ke browser dalam keadaan terkompresi dengan baik. Kompresi yang paling sering digunakan oleh pengembang adalah GZip yang bisa dengan mudah di set melalui webserver semacam Apache atau Nginx.

&lt;p&gt;Artikel berikut akan membantu kita dalam mengaktifkan kompresi untuk website kita:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/speed/docs/insights/EnableCompression&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://developers.google.com/speed/docs/insights/EnableCompression&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;


&lt;li&gt;
&lt;h5&gt; Preload, prefetch dan dns-prefetch &lt;/h5&gt;
&lt;p&gt;
Preload bisa digunakan untuk mendahulukan berbagai resources yang kita yakini akan dipakai di halaman web tersebut seperti font, CSS maupun JavaScript dibandingkan resources yang lain. Hanya gunakan preload bila resources tersebut benar-benar digunakan karena cara ini akan memberikan perintah ke browser untuk menetapkan resources sebagai high priority dalam urutan request yang akan dilakukan.

&lt;p&gt;Berikut contoh menggunakan preload untuk memuat file CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;link rel=&quot;preload&quot; href=&quot;path/file.css&quot; as=&quot;style&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prefecth hampir sama dengan preload hanya saja memiliki prioritas dibawah preload. Gunakan prefetch untuk memuat berbagai resource yang kita yakini akan digunakan pada navigasi berikutnya setelah halaman terkait.&lt;/p&gt;
&lt;p&gt;Artikel berikut akan membantu kita memahami preload dan prefetch:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;
Dns-prefetch akan menjalankan DNS lookup untuk domain eksternal yang akan kita gunakan pada halaman website tersebut. Dns-prefetch ini akan membawa bandwith yang sangat kecil namun latency yang cukup tinggi, karenanya hanya gunakan cara ini untuk domain eksternal yang memang benar-benar kita akan panggil pada halaman tersebut.

&lt;pre&gt;&lt;code&gt;
&lt;!-- Prefetch DNS for external assets --&gt;
&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//fonts.googleapis.com&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;


&lt;li&gt;
&lt;h5&gt; Browser Cache &lt;/h5&gt;
&lt;p&gt;
Browser pada dasarnya secara default telah melakukan cache pada semua resources yang dia telah request agar pada request berikutnya tidak perlu meminta resource yang sama kembali. Namun kita diharuskan untuk menyetel max-age atau E-tag di header setiap resource yang diminta agar browser bisa memahami kapan waktu yang tepat untuk meminta ulang resource tersebut. Hal ini sudah merupakan hal wajib yang harus dikerjakan oleh para pengembang web.
&lt;/p&gt;

&lt;p&gt;
Bicara soal cache, hal yang paling menyulitkan adalah menentukan kapan waktu yang tepat untuk dilakukan evict terhadap cache tersebut. Pengembang web harus tau kapan waktu yang tepat untuk melakukan evict atau memaksa browser meminta resource terbaru. Cara yang sering diterapkan oleh para pengembang web adalah dengan memberikan signature/hash/finger print pada nama file dari resource yang diminta. Sehingga bila dilakukan deployment file terbaru maka signature/hash/finger print tersebut akan berubah dan kita tidak perlu memusingkan lagi untuk meng-evict cache sebelumnya.

&lt;p&gt;Artikel berikut membantu kita memahami bagaimana untuk memaksa browser melakukan cache kepada file kita:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/speed/docs/insights/LeverageBrowserCaching&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://developers.google.com/speed/docs/insights/LeverageBrowserCaching&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;


&lt;li&gt;
&lt;h5&gt; HTTP/2 &lt;/h5&gt;
&lt;p&gt;
HTTP/2 merupakan generasi berikutnya dari HTTP/1 yang banyak digunakan oleh sebagian besar website. Bila di HTTP/1 kita susah untuk melakukan banyak round-trip request dalam waktu yang hampir bersamaan, di HTTP/2 ini kita bisa melakukan beberapa request dalam waktu yang hampir bersamaan sehingga latency bisa dikurangi.

&lt;p&gt;Untuk memahami HTTP/2 silahkan baca artikel berikut ini:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/http2/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://developers.google.com/web/fundamentals/performance/http2/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;
Dan terakhir, silahkan tonton video menarik Addy Osmani mengenai bahasan kita kali ini. Jangan lupa aktifkan subtitles kalau yang kurang baik pendengarannya kaya saya ini.

&lt;p&gt;&lt;a href=&quot;https://youtu.be/_srJ7eHS3IM&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://youtu.be/_srJ7eHS3IM&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;
Artikel ini sebelumnya telah dipublikasikan di Medium: &lt;a href=&quot;https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://medium.com/wwwid/berbagai-best-practice-dalam-memuat-halaman-website-20def6652adf&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>Panduan memberikan versi pada aplikasi/library kita</title>
      <link>https://mazipan.github.io/blogs/articles/panduan-memberikan-versi-pada-aplikasi-atau-library-kita.md/</link>
      <pubDate>Wed, 06 Jun 2018 09:00:26 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/panduan-memberikan-versi-pada-aplikasi-atau-library-kita.md/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”630”]&lt;img src=&quot;https://nhsconnect.github.io/gpconnect/images/design/semantic-versioning.png&quot; alt=&quot;Illustrasi versioning&quot; width=&quot;630&quot; height=&quot;282&quot; /&gt; &lt;em&gt;Sumber gambar: nhsconnect.github.io&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Saya yakin semua programmer sudah paham apa itu versionning? kenapa kita harus membuat versi untuk aplikasi atau library kita? Kita tidak akan membahas hal-hal tersebut lagi, namun pada tulisan kali ini saya akan membahas bagaimana cara memberikan versi yang baik pada aplikasi/library kita.&lt;/p&gt;
&lt;p&gt;Jika kalian pernah perhatikan, versioning yang paling sering dan umum digunakan adalah menggunakan tiga digit angka dengan separator titik seperti 0.0.1 atau 0.0.2 yang masing-masing memiliki arti dan maksud yang berbeda-beda.&lt;/p&gt;
&lt;p&gt;Kalau kita sudah mengetahui ciri dari versi yang akan kita gunakan, pertanyaan berikutnya adalah kapan kita menaikkan angka pertama, kedua dan ketiga pada versi tersebut? Hal ini yang akan kita bahas pada tulisan kali ini.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Versi Patch&lt;/h2&gt;
Versi ini kita naikkan ketika kita melakukan patch atau perbaikan terhadap berbagai error atau bug pada aplikasi/library kita. Versi patch sendiri selalu ada di bagian paling akhir dari sebuah format versi. Jika kita menggunakan format tiga angka, maka kita akan menaikkan angka ketiga ketika melakukan patch/bug fix/perbaikan.
Bila versi sebelumnya adalah 0.0.1 maka kita akan release versi patch dengan versi 0.0.2.
&lt;h2&gt;Versi Minor&lt;/h2&gt;
Versi ini akan kita naikkan bila kita akan menambahkan fitur, kemampuan, atau api baru pada aplikasi/library kita. Versi minor menggunakan angka kedua dari format tiga angka yang kita gunakan didepan. Bila sebelumnya kita memiliki versi 0.0.1 maka kita akan melakukan release dengan versi 0.1.0 bilamana ingin menambahkan fitur/api baru.
Kebingungan biasanya terjadi pada programmer bilamana dalam satu kali release terdapat penambahan fitur namun juga ada patch yang dilakukan, pada hal semacam ini maka seharusnya kita pilih untuk menaikkan versi Minor namun dengan tetap menyertakan release notes yang jelas mengenai fitur dan patch apa saja yang dikerjakan pada release tersebut.
&lt;h2&gt;Versi Major&lt;/h2&gt;
Versi ini paling jarang dinaikkan biasanya. Versi major harus kita naikkan bilamana terjadi perubahan besar pada aplikasi/library kita. Misal kita mengubah total library kita yang menyebabkan perubahan pada cara instalasi, cara menggunakan, parameter yang dilempar dan lain-lain. Pada saat hal ini kita lakukan maka kita harus menaikkan versi major yang berarti menaikkan angka pertama dari tiga angka yang kita gunakan. Bila sebelumnya kita memiliki versi 0.0.1 maka ketika melakukan perubahan besar ini kita akan merelease 1.0.0. Versi major ini juga biasanya diikuti dengan tidak adanya backwards compatibility baik secara penggunaan ataupun pengetahuan.
&lt;h2&gt;Build Version&lt;/h2&gt;
Beberapa aplikasi/library selain menggunakan format tiga angka pada versi, mereka biasanya juga menambahkan build version yakni versi yang menunjukkan kapan atau iterasi keberapa aplikasi/library itu dibuat. Jadi bila tanpa build version kita biasa membuat versi 0.0.1 maka dengan build version kita bisa membuat 0.0.1-1 bila memilih menggunakan iterasi atau bisa juga 0.0.1-123456789 dimana 123456789 merupakan build time dalam millisecond.

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Demikian artikel pendek mengenai panduan memberikan versi pada aplikasi/library kita, semoga kedepannya kita bisa lebih pandai memberikan versi pada aplikasi/library kita agar memberikan pengguna informasi yang tepat pula terhadap perubahan yang terjadi pada aplikasi/library kita.&lt;/p&gt;
&lt;p&gt;Terima kasih &amp;#x1f64f;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Mengenal Intersection Observer</title>
      <link>https://mazipan.github.io/blogs/articles/mengenal-intersection-observer.md/</link>
      <pubDate>Tue, 05 Jun 2018 12:41:06 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/mengenal-intersection-observer.md/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*l6gAMRWLX_rg6JV79fPVPw.jpeg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;450&quot; /&gt; &lt;em&gt;An Intersection. Image Source: &lt;a href=&quot;https://searchengineland.com/&quot;&gt;https://searchengineland.com/&lt;/a&gt;&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Dari developer.google update bulan april 2016 &lt;a href=&quot;https://developers.google.com/web/updates/2016/04/intersectionobserver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;disini&lt;/a&gt;, Intersection Observer pertama kali di release ke user di chrome versi 51. Lalu sebenarnya apa sih Intersection Observer ini? Lantas apa juga hal yang membuatnya menjadi menarik untuk kamu coba? Berikut akan kita bahas berbagai hal mengenai Intersection Observer.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&amp;#x1f4d2; Apa itu Intersection Observer?&lt;/strong&gt;&lt;/h3&gt;
Intersection Observer (IntersectionObserver) merupakan sebuah interface dari &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Intersection Observer API&lt;/a&gt; yang menyediakan cara asynchronous untuk memantau (observe) perubahan intersection dari elemen target terhadap viewport maupun elemen ancestor.

&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*oVcjwADgDy4zQPHgnuajIw.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;568&quot; /&gt; &lt;em&gt;Image Source: &lt;a href=&quot;https://hacks.mozilla.org/2017/08/intersection-observer-comes-to-firefox/&quot;&gt;https://hacks.mozilla.org/2017/08/intersection-observer-comes-to-firefox/&lt;/a&gt;&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&amp;#x1f36d; Contoh kasus penggunaan Intersection Observer&lt;/strong&gt;&lt;/h3&gt;
Berikut beberapa contoh kasus dimana kehadiran Intersection Observer menjadi penting dan menarik:

&lt;p&gt;&lt;strong&gt;&amp;#x1f304; Lazy Loading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Konsep lazy loading pada dasarnya adalah menampilkan konten hanya ketika konten tersebut benar-benar dibutuhkan dan dilihat oleh pengguna. Implementasi paling sering dari lazy loading ini adalah pada proses untuk memuat gambar pada sebuah website, namun sebenarnya bisa juga digunakan untuk memuat konten lain baik text paragraph maupun block div.&lt;/p&gt;
&lt;p&gt;Seperti kita tahu bersama-sama, ukuran dan banyaknya file yang kita kirim ke pengguna merupakan hal yang penting dalam memuat sebuah website. Oleh karena itu lazy loading sangat membantu memastikan kita memuat konten yang tepat pada saat yang tepat pula. Jangan sampai kita memaksa pengguna untuk memuat atau mengunduh hal yang tidak pernah dia lihat sama sekali.&lt;/p&gt;
&lt;p&gt;Sebelum ada Intersection Observer kita biasa membuat lazy loading dengan cara attach event ketika pengguna melakukan scroll dan memanggil getBoundingClientRect() untuk mengecek apakah elemen yang kita maksud sudah masuk ke dalam layar yang dilihat oleh pengguna.&lt;/p&gt;
&lt;p&gt;Implementasi Intersection Observer untuk membuat lazy loading gambar maupun video telah dijelaskan secara rinci dengan berbagai contoh kode yang jelas pula di artikel &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lazy Loading Images and Video&lt;/a&gt; dari developer.google.com.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x1f503; Infinite Scroll&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.co.id/search?q=infinite+scroll&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Infinite Scroll&lt;/a&gt; paling cocok digunakan pada mobile web, dimana pengguna tidak perlu menekan tombol apapun untuk memuat halaman/konten berikutnya namun cukup dengan scroll dan nanti ditentukan apakah sudah waktunya memuat konten berikutnya atau belum. Bila kamu masih gamang dengan istilah infinite scroll, maka coba saja kunjungi halaman utama dari Instagram (&lt;a href=&quot;http://www.instagram.com/&quot;&gt;http://www.instagram.com/&lt;/a&gt;). Kita bisa browsing unggahan terbaru dari teman-teman kita di Instagram dengan mudah tanpa sekalipun harus menekan halaman selanjutnya atau apapun itu, cukup scroll terus sampai bawah dan akan dimuat halaman berikutnya secara otomatis.&lt;/p&gt;
&lt;p&gt;Tanpa Intersection Observer implemetasi infinite scroll kurang lebih akan sama dengan lazy loading namun biasanya akan lebih advance karena beberapa implementasinya memiliki logika yang lebih kompleks dimana dilakukan penambahan konten yang akan dilihat dan penghapusan terhadap konten yang sudah tidak dilihat lagi oleh pengguna.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x1f4ca; Reporting / Tracking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pernahkah terpikir untuk men-track kebiasaan pengguna ketika mengunjungi website kamu? Misalnya pengguna melakukan scroll di halaman katalog produk kemudian berhenti ketika melihat sebuah produk pada titik ini bisa dimungkinkan pengguna memiliki ketertarikan lebih terhadap produk tersebut. Kalau kita bisa collect data dari kebiasaan pengguna dalam melakukan scroll di website kita maka bisa dibuatkan pula recommendation system dengan sumber data yang lebih banyak dan bisa menghasilkan personalisasi yang lebih baik.&lt;/p&gt;
&lt;p&gt;Tracking ataupun reporting bisa membantu kita dalam membuat keputusan produk mana yang harusnya ada diatas, dan produk mana yang bisa diletakan di posisi yang lebih bawah dari katalog kita. Dan menggunakan Intersection Observer tentunya hal ini menjadi lebih mudah dilakukan dan lebih visible untuk di deliver.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x1f526; Others Task&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Banyak hal dan pekerjaan lain yang menjadi lebih mudah dengan adanya Intersection Observer, seperti penentuan kapan suatu task akan dieksekusi dan kapan tidak perlu dieksekusi, penentuan kapan suatu animasi perlu ditampilkan dan kapan tidak perlu ditampilkan kepada pengguna dan banyak lagi.&lt;/p&gt;
&lt;p&gt;Kekuatan utama pada Intersection Observer adalah bisa memberikan kita visibility yang lebih kapan waktu yang tepat untuk melakukan suatu hal dan ini tentu saja bisa diimplementasikan ke berbagai hal tergantung pada kebutuhan dan tujuan masing-masing.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&amp;#x1f30f; Browser Support&lt;/strong&gt;&lt;/h3&gt;
Sampai pada artikel ini dipublikasikan, dukungan untuk Intersection Observer memang belum merata ke semua browser. Anda bisa mengecek dukungan browser terhadap Intersection Observer di website caniuse.com (&lt;a href=&quot;https://caniuse.com/#feat=intersectionobserver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://caniuse.com/#feat=intersectionobserver&lt;/a&gt;).

&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*-E84Qj-QgHhqL-WvAX4y7A.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;405&quot; /&gt; &lt;em&gt;&lt;a href=&quot;https://caniuse.com/#feat=intersectionobserver&quot;&gt;https://caniuse.com/#feat=intersectionobserver&lt;/a&gt; (16 April 2018)&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Meski begitu kamu tetap bisa menggunakan Intersection Observer dengan menambahkan &lt;a href=&quot;https://github.com/w3c/IntersectionObserver/tree/master/polyfill&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;polyfill&lt;/strong&gt;&lt;/a&gt; untuk beberapa browser yang memang belum mendukung fitur ini secara native.&lt;/p&gt;
&lt;p&gt;Tulisan ini juga telah dipublikasikan di Medium : &lt;a href=&quot;https://medium.com/mazipan-mind/intersection-observer-sebuah-pengantar-f996cf8ab27b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/mazipan-mind/intersection-observer-sebuah-pengantar-f996cf8ab27b&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Belajar mengenai &amp;#x26a1;AMP</title>
      <link>https://mazipan.github.io/blogs/articles/belajar-mengenai-amp.md/</link>
      <pubDate>Mon, 04 Jun 2018 12:55:06 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/belajar-mengenai-amp.md/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”678”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*r2D-2y3hpUUpoe_ZeL-fFA.png&quot; alt=&quot;Flash Illustration&quot; width=&quot;678&quot; height=&quot;381&quot; /&gt; &lt;em&gt;The Flash. Image source: &lt;a href=&quot;https://nerdhaunt.com&quot;&gt;https://nerdhaunt.com&lt;/a&gt;&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;h2&gt;Apa itu &amp;#x26a1;AMP?&lt;/h2&gt;
&amp;#x26a1;AMP (Accelerated Mobile Pages) merupakan library open source yang memberikan cara untuk menyajikan website dengan menarik, mulus dan yang pasti bisa dimuat dalam waktu mendekati instan kepada penggunanya. AMP merupakan project inisiatif dari Google melalui &lt;a href=&quot;https://www.ampproject.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ampproject.org&lt;/a&gt;.
&lt;h2&gt;Bagaimana mengenali &amp;#x26a1;AMP?&lt;/h2&gt;
Pernahkah kamu perhatikan ketika sedang melakukan pencarian di Google Search melalui perangkat smartphone kalian? Sesekali akan kamu temui logo petir &amp;#x26a1; di sebelah kiri dari hasil pencarian kamu.

&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”360”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*22oqtj5TmOfde3cSdGJUkQ.png&quot; alt=&quot;&quot; width=&quot;360&quot; height=&quot;641&quot; /&gt; &lt;em&gt;Contoh hasil pencarian dengan Google&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Ya, ini merupakan tanda yang sengaja disematkan oleh Google di dalam hasil pencarian kita ketika diakses melalui mobile device, tanda yang menunjukkan bahwa konten dari website tersebut telah mendukung teknologi AMP dan kita bisa optimis bahwa kalau kita klik hasil pencarian tersebut maka akan dimuat secara cepat mendekati instans.&lt;/p&gt;
&lt;h2&gt;Mengapa harus &amp;#x26a1;AMP?&lt;/h2&gt;
Kamu mungkin bertanya-tanya kenapa harus ada AMP kalau semua kebutuhan kita untuk membuat sebuah website modern saat ini sudah terpenuhi, apa juga untungnya bagi kita untuk mengadopsi teknologi ini.

&lt;p&gt;AMP bagi saya pribadi (baca: opini) merupakan sebuah temuan yang revolusioner, AMP hadir justru karena pengetahuan yang sebenarnya sudah diketahui kita semua. Kita bersama-sama telah setuju dan mengerti bahwa dalam mengembangkan website semakin banyak hal yang kita kirim ke pengguna maka berakibat semakin lamban website tersebut dimuat. Sayangnya dengan derasnya perkembangan teknologi membuat hal ini juga dieksploitasi oleh para pengembang, mereka seolah ingin menyematkan berbagai hal keren ke dalam website mereka.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*wVK29UImtgZ3ChOtdK3lZw.png&quot; alt=&quot;The web = Endless possibilities&quot; width=&quot;800&quot; height=&quot;435&quot; /&gt; &lt;em&gt;The web = Endless possibilities&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;AMP pada posisi ini menawarkan teknologi yang diharapkan bisa mengembalikan website seperti sedia kala, cepat dengan tanpa mengorbankan pengalaman pengguna.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*wJcz2k6DdqY6dCQEdacoLA.png&quot; alt=&quot;Reason for AMP’s existence&quot; width=&quot;800&quot; height=&quot;374&quot; /&gt; &lt;em&gt;Reason for AMP’s existence&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;h2&gt;Bagian inti dari &amp;#x26a1;AMP&lt;/h2&gt;
AMP bukanlah sebuah sihir yang bisa membuat website kamu tiba-tiba menjadi cepat bahkan mendekati instan, AMP memiliki tiga bagian inti yang membuatnya menjadi cepat, seperti dijelaskan berikut:

&lt;p&gt;&lt;strong&gt;AMP HTML&lt;/strong&gt;
AMP HTML merupakan HTML biasa dengan berbagai restriksi agar bisa tetap dikirimkan dengan performa yang memuaskan.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AMP JS&lt;/strong&gt;
AMP JS merupakan library yang memastikan halaman AMP selalu cepat ketika melakukan rendering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AMP Cache&lt;/strong&gt;
Google AMP Cache adalah cache yang disediakan untuk menyimpan halaman-halaman AMP agar lebih cepat ketika diakses.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*zyP7t3wUBEv0d3je4E6p2w.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;417&quot; /&gt; &lt;em&gt;Screenshot from: &lt;a href=&quot;https://www.ampproject.org/learn/overview/&quot;&gt;https://www.ampproject.org/learn/overview/&lt;/a&gt;&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;h2&gt;Bagaimana membuat &amp;#x26a1;AMP?&lt;/h2&gt;
AMP seperti dijelaskan sebelumnya bukanlah sihir, ada beberapa langkah yang harus dikerjakan untuk mengadopsinya. Namun juga AMP tidak akan membabi buta menerapkan berbagai teknologi canggih sehingga kita tidak perlu belajar banyak hal untuk bisa bereksperimen dengan teknologi ini. Cukup terbiasa dengan HTML dan CSS serta sedikit pengetahuan JavaScript, kita sudah bisa membuat halaman AMP.

&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*K4xf9itEcwkGmd6vhMto2w.png&quot; alt=&quot;&amp;#x26a1;&amp;#xfe0f;AMP rules&quot; width=&quot;800&quot; height=&quot;255&quot; /&gt; &lt;em&gt;&amp;#x26a1;AMP memiliki beberapa aturan strict&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Namun ada sedikit yang perlu diketahui sebelumnya, membangun AMP tidaklah sama persis dengan membangun website biasanya. Ada beberapa strictness yang diberlakukan oleh AMP agar tetap mempertahankan performa yang luar biasa cepat, diantaranya kita tidak boleh menambahkan javascript selain dari yang sudah divalidasi dan dijadikan standar komponen AMP, HTML di AMP juga memiliki aturan yang diperketat agar tidak terjadi bloated code pada website nantinya, dalam urusan CSS pun AMP pada dasarnya menginginkan kita membuat stylesheet yang tepat guna.&lt;/p&gt;
&lt;p&gt;Tapi tidak usah khawatir, AMP bukanlah hal yang menyeramkan. Untuk membuat AMP bahkan kita cukup membuat skeleton dasar seperti berikut:&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*yxpkvdWV8gRYc_Mr5jhPKw.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;490&quot; /&gt; &lt;em&gt;Screenshot from: &lt;a href=&quot;https://www.ampproject.org/docs/getting_started/create/basic_markup&quot;&gt;https://www.ampproject.org/docs/getting_started/create/basic_markup&lt;/a&gt;&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”679”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*NBTmmchDZTmr7jsB01tPIg.png&quot; alt=&quot;&quot; width=&quot;679&quot; height=&quot;724&quot; /&gt; &lt;em&gt;Kebutuhan dasar sebuah halaman AMP. Source: &lt;a href=&quot;https://www.ampproject.org&quot;&gt;https://www.ampproject.org&lt;/a&gt;&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Selengkapnya langkah-langkah membuat halaman &amp;#x26a1;AMP bisa disimak di tautan berikut: &lt;a href=&quot;https://www.ampproject.org/docs/getting_started/create&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ampproject.org/docs/getting_started/create&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&amp;#x1f36c; Kisah manis&lt;/h2&gt;
AMP akan memberikan kita berbagai pengalaman menyenangkan, seperti diantaranya:

&lt;p&gt;Dalam fase pengembangan, sebuah halaman AMP bisa dengan mudah diselesaikan, tidak dibutuhkan keahlian yang super untuk mengerjakannya. Seorang junior programmer pun bisa menyelesaikan dalam jangka waktu yang tidak terlalu lama.&lt;/p&gt;
&lt;p&gt;Untuk mengerjakan halaman AMP dibutuhkan server side rendering karena kita tidak diperkenankan menyisipkan javascript selain dari AMP, sehingga mungkin dibutuhkan programmer yang familiar dengan server render templating yang disesuaikan dengan bahasa pemrograman masing-masing.&lt;/p&gt;
&lt;p&gt;Pengerjaan ini semakin mudah karena dari team AMP sendiri sudah membuatkan website yang berisikan berbagai macam dokumentasi dan koleksi berbagai komponen AMP yang bisa kita gunakan dengan mudah karena sudah disertai contoh kode serta playground untuk mencoba kode tersebut. Kamu bisa melihat koleksi komponen dari AMP di tautan berikut &lt;a href=&quot;https://www.ampproject.org/docs/reference/components&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ampproject.org/docs/reference/components&lt;/a&gt;, sedangkan untuk playground bisa dicoba di tautan &lt;a href=&quot;https://ampbyexample.com/playground/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ampbyexample.com/playground/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&amp;#x2615; Kenyataan pahit&lt;/h2&gt;
Kenyataanya hidup tak selamanya manis, pun dengan AMP. Setelah fase pengembangan yang terasa begitu mulus dan tanpa hambatan, lambat laun masalah mulai muncul dan tidak ada habisnya. Ya, AMP perlu selalu kamu monitoring untuk memastikan tetap valid dan tidak melanggar aturan yang telah dibuat.

&lt;p&gt;Kamu bisa memonitoring validitas dari halaman AMP yang ada melalui &lt;a href=&quot;https://www.google.com/webmasters/tools/accelerated-mobile-pages&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webmaster tools&lt;/a&gt; dari Google. Tools ini akan memberikan grafik berapa jumlah AMP yang berhasil di index dan berapa jumlah AMP yang rusak (baca: error) atau tidak valid. Setiap kerusakan yang terjadi akan dikelompokkan berdasarkan jenis kerusakannya. Kabar baiknya adalah tools ini memberikan penjelasan yang gamblang kesalahan yang terjadi karena apa serta bagian mana yang menyebabkan tidak valid.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*A7I4V9HvFm4vhsN6eklaCw.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;276&quot; /&gt; &lt;em&gt;Contoh grafik hasil analisa &lt;a href=&quot;https://mazipanneh.com/blog/&quot;&gt;https://mazipanneh.com/blog/&lt;/a&gt; di webmaster tools&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Bila tools ini kurang memuaskan, kita bisa juga melakukan test secara live terhadap halaman AMP kita lewat tautan &lt;a href=&quot;https://search.google.com/test/amp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://search.google.com/test/amp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dari pengalaman saya memonitoring halaman AMP ini, banyak kesalahan terjadi datang dari konten yang dinamis dan bisa semena-mena diisi atau ubah oleh tools semacam CMS atau tools &lt;a href=&quot;https://en.wikipedia.org/wiki/WYSIWYG&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WYSIWYG&lt;/a&gt;. Tools ini seringkali membawa hal-hal yang memang melanggar aturan dari AMP seperti inline stylesheet, tag-tag atau attribute yang tidak penting dalam html, bahkan sampai inject script. Hal ini juga yang membuat beberapa Wordpress Plugin seperti &lt;a href=&quot;https://wordpress.org/plugins/accelerated-mobile-pages/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AMP for WP&lt;/a&gt; memutuskan untuk membuat text editor yang berbeda antara konten asli dengan konten yang akan disajikan untuk AMP.&lt;/p&gt;
&lt;p&gt;Kabar baiknya lagi adalah Google Search dengan baik hati akan sangat cepat tanggap dengan terjadinya kesalahan di halaman AMP kalian, dengan cepat tanda petir &amp;#x26a1; di hasil pencarian akan menghilang ketika terdeteksi kesalahan. Beda lagi jika kalian menambahakan halaman AMP baru, bisa butuh waktu berhari-hari untuk memunculkan tanda petir &amp;#x26a1; ini.&lt;/p&gt;
&lt;h2&gt;&amp;#x1f57a; Bonus: Tips&lt;/h2&gt;
&lt;ol&gt;
     &lt;li&gt;Secepatnya buatlah halaman AMP untuk website kalian, AMP merupakan jalan tercepat membuat website kalian bisa diakses dengan cepat tanpa harus menunggu migrasi teknologi.&lt;/li&gt;
     &lt;li&gt;Pengembangan halaman AMP tidak terlalu susah, tapi sebaiknya pelajari terlebih dahulu beberapa rule dasar yang ada di AMP termasuk hal-hal dasar yang membuat AMP itu dianggap tidak valid.&lt;/li&gt;
     &lt;li&gt;Lebih baik menggunakan komponen yang sudah dibuatkan oleh AMP meskipun beberapa hal sebenarnya kalian bisa membuat sendiri, seperti tab, carousel, lightbox dan berbagai komponen lainnya.&lt;/li&gt;
     &lt;li&gt;Konten pada halaman AMP harus dipantau secara periodik dan teratur agar berbagai kesalahan bisa cepat teridentifikasi, sediakan waktu untuk memantau Webmaster Tools.&lt;/li&gt;
     &lt;li&gt;Kesalahan membuat halaman AMP tidak akan dianggap oleh hasil pencarian Google, oleh karenanya segera hotfix bila terdeteksi kesalahan pada halaman AMP.&lt;/li&gt;
&lt;/ol&gt;
Tulisan ini telah dipublikasikan di Medium: &lt;a href=&quot;https://medium.com/bliblidotcom-techblog/amp-sebuah-cerita-manis-dan-pahit-53b484896e96&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/bliblidotcom-techblog/amp-sebuah-cerita-manis-dan-pahit-53b484896e96&lt;/a&gt;</description>
    </item>
    <item>
      <title>Memasang iklan Google Adsense di project Vue.js</title>
      <link>https://mazipan.github.io/blogs/articles/memasang-iklan-google-adsense-di-project-vue-js.md/</link>
      <pubDate>Sun, 03 Jun 2018 17:28:21 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/memasang-iklan-google-adsense-di-project-vue-js.md/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”599”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*LyZ8OH3GLGhVa77vu573pg.jpeg&quot; alt=&quot;&quot; width=&quot;599&quot; height=&quot;400&quot; /&gt; Google AdSense logo, image from: maxmanroe.com[/caption]&lt;/p&gt;
&lt;p&gt;Google AdSense merupakan salah satu layanan dari Google untuk para publisher agar bisa menempatkan iklan dari berbagai source yang telah berafiliasi dengan Google. Menurut Google sendiri, AdSense adalah cara sederhana yang gratis untuk memperoleh penghasilan dengan menempatkan iklan di situs web Anda.&lt;/p&gt;
&lt;p&gt;Untuk memasang script Google Adsense ini sejatinya sudah di jelaskan oleh Google sendiri, salah satunya bisa dibaca di tautan ini. Namun sayangnya memang script tersebut memiliki ekspektasi bahwa kita tidak menggunakan framework dalam membangun website (dalam hal ini tentu kita akan fokus ke Vue.js).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Faktanya untuk mengimplementasikan apa yang sudah dijelaskan oleh Google adalah hal yang lumayan tricky ketika kita menggunakan Vue.js di project kita. Hal ini berkaitan dengan Vue Single Component dimana kita jadi susah untuk menyisipkan tag script di tengah-tengah kode. Namun ini juga tergantung dari tipe unit iklan yang kita pilih juga, karena untuk salah satu tipe iklan, kita bisa saja langsung menempatkan script ini di dalam tag head dimana ini biasanya ada diluar kontrol Vue.js sehingga tidak diperlukan workaround lebih lanjut untuk menempatkan script ini.&lt;/p&gt;
&lt;p&gt;Setidaknya ada 3 tipe unit iklan yang disediakan Google AdSense yang masing-masing berbeda penempatan dan fungsinya. Gambar berikut bisa menjelaskan sekilas tentang tipe-tipe unit iklan tersebut.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*SYPGXNyURCiGytaiXM-qTg.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;370&quot; /&gt; Ads unit types, image from: &lt;a href=&quot;https://www.google.com/adsense%5B/caption%5D&quot;&gt;https://www.google.com/adsense[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Untuk tipe unit iklan yang pertama text &amp;amp; display ads, ini kode iklan yang bisa ditempatkan di tag head dan otomatis Google akan mendeteksi bagian mana dari website kita yang menjadi tempat strategis untuk dipasang iklan tersebut. Tipe unit ini paling mudah, tapi juga tidak bisa dikontrol penempatannya. Bisa jadi iklan yang dihasilkan akan menutupi beberapa elemen penting yang tidak seharusnya tertutupi.&lt;/p&gt;
&lt;p&gt;Untuk tipe yang kedua In-Feed Ads dan ketiga In-Article Ads ini merupakan tipe unit yang bisa kita kontrol penempatanya, sayangnya script iklan ini harus ditempatkan di tag spesifik yang kita inginkan. Tentu seperti yang saya jelaskan diatas, ini menjadi masalah ketika kita menggunakan Vue.js sebagai framework dari website kita. Untungnya ada orang baik yang membuat library &lt;a href=&quot;https://github.com/taoeffect/vue-script2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue-Script2&lt;/a&gt; untuk memudahkan kita menambahkan tag script di dalam kode Vue.js.&lt;/p&gt;
&lt;p&gt;Kita bisa saja membuat workaround ini di setiap project yang ingin kita pasangi iklan dari Google AdSense, tapi buat saya sendiri ini merupakan hal yang melelahkan. Untuk menyelesaikan masalah ini saya memutuskan membuat Plugin yang bisa dipasang dan diimplementasikan dengan mudah ketika harus memasang iklan di website kita.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/mazipan/vue-google-adsense&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue-Google-Adsense&lt;/a&gt;&lt;/h2&gt;
Berikut beberapa langkah menggunakan vue-google-adsense di project Vue.js kalian :

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install vue-script2 vue-google-adsense --save&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memasang di main.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import Ads from 'vue-google-adsense'

Vue.use(require('vue-script2'))

Vue.use(Ads.Adsense)
Vue.use(Ads.InArticleAdsense)
Vue.use(Ads.InFeedAdsense)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Untuk pengguna Nuxt.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Buat file &lt;code&gt;plugins/vue-google-adsense.js&lt;/code&gt;, dengan kode berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import Vue from 'vue'
import Ads from 'vue-google-adsense'

Vue.use(require('vue-script2'))

Vue.use(Ads.Adsense)
Vue.use(Ads.InArticleAdsense)
Vue.use(Ads.InFeedAdsense)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kemudian tambahkan kode berikut di &lt;code&gt;nuxt.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
module.exports = {
  plugins: [
    { src: '~/plugins/vue-google-adsense', ssr: false }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memasang di Component&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;!-- Default Ads --&amp;gt;
&amp;lt;Adsense
    data-ad-client=&quot;ca-pub-XXXXXXXXXXXXXXXX&quot;
    data-ad-slot=&quot;1234567890&quot;&amp;gt;
&amp;lt;/Adsense&amp;gt;
&amp;lt;!-- In-Article Ads --&amp;gt;
&amp;lt;InArticleAdsense
    data-ad-client=&quot;ca-pub-XXXXXXXXXXXXXXXX&quot;
    data-ad-slot=&quot;1234567890&quot;&amp;gt;
&amp;lt;/InArticleAdsense&amp;gt;
&amp;lt;!-- In-Feed Ads --&amp;gt;
&amp;lt;InFeedAdsense
    data-ad-layout-key=&quot;-fg+5n+6t-e7+r&quot;
    data-ad-client=&quot;ca-pub-XXXXXXXXXXXXXXXX&quot;
    data-ad-slot=&quot;1234567890&quot;&amp;gt;
&amp;lt;/InFeedAdsense&amp;gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Props yang bisa kalian gunakan&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*YkpBCNrqAMDIfFNBVSIArQ.png&quot; /&gt;

&lt;p&gt;&lt;strong&gt;Contoh Implementasi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Saya sendiri sudah menggunakan library ini di berbagai project yang saya buat, kalian bisa melihat berbagai contoh bagaimana saya menggunakan library ini, antara lain di project:&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;&lt;a href=&quot;https://mazipan.github.io/explore-github&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://mazipan.github.io/explore-github&quot;&gt;Explore-Github&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;&lt;a href=&quot;https://mazipan.github.io/FireJak&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://mazipan.github.io/FireJak&quot;&gt;Fire Jak&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;&lt;a href=&quot;https://mazipan.github.io/RumahSakitJakarta&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://mazipan.github.io/RumahSakitJakarta&quot;&gt;Rumah Sakit Jakarta&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;&lt;a href=&quot;https://mazipan.github.io/chucknorris&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://mazipan.github.io/chucknorris&quot;&gt;ChuckNorris&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
Semua project diatas open-source sehingga kalian bisa cek ke Github saya untuk melihat kode implementasinya.

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Demikian tulisan singkat ini, semoga bermanfaat buat teman-teman.&lt;/p&gt;
&lt;p&gt;Tulisan ini telah dipublikasikan juga di Medium: &lt;a href=&quot;https://medium.com/vuejs-id/memasang-google-adsense-di-project-vue-js-ad22cb799841&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/vuejs-id/memasang-google-adsense-di-project-vue-js-ad22cb799841&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Memperkenalkan Warna Baru dari Vue-Currency-Filter</title>
      <link>https://mazipan.github.io/blogs/articles/memperkenalkan-warna-baru-dari-vue-currency-filter.md/</link>
      <pubDate>Sat, 02 Jun 2018 16:04:21 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/memperkenalkan-warna-baru-dari-vue-currency-filter.md/</guid>
      <author></author>
      <description>&lt;img class=&quot;aligncenter&quot; src=&quot;https://mazipan.github.io/wp-contents/images/vue-currency-filter-readme.png&quot; /&gt;

&lt;p&gt;&lt;strong&gt;Vue-Currency-Filter&lt;/strong&gt; merupakan plugin yang saya gunakan untuk menformat berbagai angka ke berbagai format mata uang (currency). Plugin ini sendiri pada awalnya saya buat dengan algoritma sendiri namun seiring makin banyaknya case dan kebutuhan maka saya putuskan untuk menggunakan plugin lain yakni accounting.js yang mana lebih solid untuk urusan format mata uang ini.&lt;/p&gt;
&lt;p&gt;Pada tulisan kali ini saya akan membahas bagaimana komunitas open-source bisa bersinergi untuk saling membantu dalam hal ini mengenai pembuatan logo untuk repository Vue-Currency-Filter.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Jadi ceritanya Vue-Currency-Filter ini sudah saya buat sejak lama sekitar 2017-an dan selama itu tidak ada perubahan yang berarti baik dari readme, demo page maupun bagian lain. Sebagian besar waktu dihabiskan untuk stabilisasi plugin, menambah, mengurangi, serta mengubah berbagai fitur dan kode yang tersedia di dalamnya.&lt;/p&gt;
&lt;p&gt;Kebetulan kemarin-kemarin mas &lt;a href=&quot;https://github.com/iqbalhood&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@iqbalhood&lt;/a&gt; open issue di repository tersebut di &lt;a href=&quot;https://github.com/mazipan/vue-currency-filter/issues/19&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issue#19&lt;/a&gt;. Intinya beliau mau membantu membuatkan Logo untuk repository Vue-Currency-Filter, dan tentu saja kesempatan emas ini tidak ingin saya sia-siakan sama sekali. Sekalian berkomunikasi saya juga sekalian memikirkan untuk sekalian saja benahi berbagai hal terkait repository ini terutama demo page yang sekian lama terbengkalai.&lt;/p&gt;
&lt;p&gt;Pada prosesnya sendiri seperti bisa dipantau di issue diatas, mas &lt;a href=&quot;https://github.com/iqbalhood&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@iqbalhood&lt;/a&gt; memberikan 2 alternatif logo untuk saya pilih.
Dan berikut adalah logo terbaru yang saya pilih untuk Vue-Currency-Filter:&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”300”]&lt;img src=&quot;https://raw.githubusercontent.com/mazipan/vue-currency-filter/master/assets/VueJS-Currency-512px.png&quot; alt=&quot;Vue-Currency-Filter Logo&quot; width=&quot;300&quot; /&gt; Vue-Currency-Filter Logo[/caption]&lt;/p&gt;
&lt;p&gt;Setelah logo didapat, maka saya pastikan logo tersebut memiliki tempat yang tepat untuk dipajang. Readme.md dan halaman demo merupakan tempat yang paling pas menurut saya. Untuk readme.md, saya tempatkan di sebelah kanan sedangkan untuk halaman demo belum banyak yang bisa saya ubah dikarenakan waktu yang terbatas.&lt;/p&gt;
&lt;p&gt;Perubahan di halaman demo tentunya saya ingin punya tema yang selaras dengan logo ya g telah dibuat, maka saya merombak coloring pada halaman tersebut. Mengubah menjadi didominasi warna orange agar lebih terlihat segar dan berwarna serta pastinya senada dengan logo.
Saya juga melakukan perubahan dimana saya menambahkan berbagai dokumentasi cara mendownload, menggunakan plugin ini di halaman demo agar user tidak perlu lagi masuk ke github hanya untuk tau bagaimana menggunakan plugin ini.&lt;/p&gt;
&lt;p&gt;Maka jadilah Vue-Currency-Filter sekarang memiliki brand yang lebih segar dengan dominasi warna orange.
Silahkan kunjungi repository-nya di: &lt;a href=&quot;https://github.com/mazipan/vue-currency-filter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mazipan/vue-currency-filter&lt;/a&gt;
Kunjungi juga halaman demo di: &lt;a href=&quot;https://mazipan.github.io/vue-currency-filter/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mazipan.github.io/vue-currency-filter/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Terima kasih.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Membuat Search Highlight dengan Vue.js</title>
      <link>https://mazipan.github.io/blogs/articles/membuat-search-highlight-dengan-vue-js.md/</link>
      <pubDate>Tue, 29 May 2018 14:02:29 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/membuat-search-highlight-dengan-vue-js.md/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*V1BI2Mg_MY2vPJixw7a1MQ.jpeg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;400&quot; /&gt; &lt;em&gt;Membuat Search Highlight dengan Vue.js&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Salah satu fitur yang biasanya kita inginkan ketika membuat suatu kotak pencarian maupun autocomplete adalah highlight berdasarkan kata kunci yang digunakan untuk melakukan pencarian. Sebegitu mainstreamnya seperti sudah menjadi keharusan bagi setiap kotak pencarian untuk memiliki fitur ini. Untuk memudahkan Anda memahami apa yang saya maksudkan mungkin akan lebih mudah jika kita melihat gambar berikut:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”300”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*EMOU4v7bVeWZ52Q3BZnnxA.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt; &lt;em&gt;Contoh search highlight di aplikasi FireJak&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Seperti terlihat pada gambar diatas, item yang dicari akan melakukan highlight berdasarkan kata kunci yang diketik oleh pengguna. Untungnya untuk membuat fitur seperti ini bisa dilakukan dengan mudah di Vue.js. Silahkan disimak beberapa langkah untuk membuat fitur search highlight ini :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Membuat Search Box&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pertama kita akan membuat search box dengan menggunakan input type text dan memberikan model pada input tersebut. Tentu saja tujuannya agar kita bisa menggunakan fitur two way data binding pada Vue.js dimana object searchText seperti yang terlihat pada gambar dibawah ini akan secara otomatis saling terkait antara view yang ditampilkan dengan object yang berada di data Vue.js.&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ALkkKJ64XmPP3RwL2CmJgw.png&quot;&gt;


&lt;p&gt;&lt;strong&gt;2. Menyiapkan Array Data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Karena kita akan melakukan searching atau pun filter maka salah satu bagian penting yang tidak lepas adalah array data, di dalam project FireJak sendiri saya menggunakan Vuex untuk mengambil data sehingga bisa dengan mudah diambil dengan menggunakan fitur getters yang sudah disediakan.&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*EGiaPPgat0GtW15jpwQRtw.png&quot;&gt;

&lt;p&gt;Sebagai contoh anggaplah saya punya array data seperti pada link berikut : 
&lt;a href=&quot;https://github.com/mazipan/FireJak/blob/master/static/json/pospemadam.json&quot;&gt;https://github.com/mazipan/FireJak/blob/master/static/json/pospemadam.json&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*nh_8zByhYooIZbWs5Sgaxw.png&quot;&gt;

&lt;p&gt;Maka bagian yang penting adalah meletakkan array data kedalam object data di dalam component Vue.js agar bisa diakses dengan mudah bahkan oleh object internal component. Pada contoh kali ini saya meletakkan pada object array posPemadam seperti yang terlihat pada gambar sebelumnya.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Menampilkan semua array data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Menampilkan array data kedalam view dengan Vue.js bisa dengan mudah dilakukan menggunakan v-for seperti berikut:&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*yqGGY8YJWVAM3ytq4tdK_g.png&quot;&gt;


&lt;p&gt;&lt;strong&gt;4. Mem-filter array berdasarkan kata kunci&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yang akan kita lakukan adalah memantau variabel v-model input text kita kemudian melakukan filter pada array data ketika terjadi perubahan pada variabel tersebut. Untuk melakukan hal ini kita bisa memanfaatkan fitur computed maupun watch dari Vue.js, pada artikel &lt;em&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/11/pengetahuan-dasar-vue-js-bagian-3/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Pengetahuan Dasar Vue.js — Bagian 3&lt;/a&gt;&lt;/em&gt; kita sudah belajar mengenai computed dan watch, jika masih bingung atau belum bisa membedakan perbedaan dari keduanya bisa kembali membaca artikel tersebut.&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*dHn4PbGZW7p3N0jGFGKvDA.png&quot;&gt;

&lt;p&gt;Pada gambar diatas, saya menggunakan computed untuk menghasilkan array baru dengan nama filteredList yang akan selalu dieksekusi tiap kali terjadi perubahan variabel searchText. Karena data yang akan saya filter merupakan array of object, jadi saya harus mendefinisikan field apa saja yang ingin saya bandingkan dengan kata kunci.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Mengganti view dengan array filter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Setelah membuat array baru hasil filter, maka kita akan mengganti view yang tadinya menampilkan semua data menjadi menampilkan hanya array hasil dari filter yang dijalankan. Berikut contoh kodenya:&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*GNdnrZ9KDE4xFUyzaFBgDw.png&quot;&gt;


&lt;p&gt;&lt;strong&gt;6. Membuat fungsi highlight&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fungsi yang akan kita buat pada dasarnya akan melakukan replacement berdasarkan kata kunci yang ditemukan dari sebuah text yang dilemparkan. Fungsi ini akan mengembalikan sebuah string html dari kata awal yang telah disisipkan dengan class untuk highlight text. Berikut contoh kodenya:&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*PrWB7E6wn4GhHp_XCN-Sqg.png&quot;&gt;


&lt;p&gt;&lt;strong&gt;7. Memanggil fungsi highlight&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Karena fungsi highlight ini akan mengembalikan sebuah html dengan class highlight didalamnya, maka kita tidak bisa menggunakan data-binding biasa menggunakan {{ data }} tapi kita harus menggunakan v-html agar html yang menjadi balikan dari fungsi ini bisa ditampilkan dengan baik dan di-render sebagai html bukan sebagai string. Untuk memanggil fungsi highlight ini kita perlu melemparkan dua parameter yakni kata yang akan di highlight dan kata kunci yang dijadikan highlight keyword. Berikut contoh kodenya:&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*WbaqTGs3UUobC1tnlSm4Qg.png&quot;&gt;
Dan taraaaa &amp;#x1f603;&amp;#x1f603;&amp;#x1f603; Berhasil, berhasil &amp;#x1f606;&amp;#x1f606;&amp;#x1f606;


&lt;p&gt;Tentu saja ini bukanlah satu-satunya cara untuk menerapkan fitur highlight pada search. Tapi ini bisa menjadi panduan bagi Anda yang ingin belajar dasar menerapkan fitur ini. Semua kode yang dibagikan pada artikel kali ini bisa dilihat dan dipelajari dari repository &lt;a href=&quot;https://github.com/mazipan/FireJak&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;FireJak&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Demikian tulisan singkat dari saya, semoga bermanfaat.&lt;/p&gt;
&lt;p&gt;Tulisan ini juga telah dipublikasikan di Medium: &lt;a href=&quot;https://medium.com/vuejs-id/membuat-search-highlight-dengan-vue-js-d47684d5999b&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://medium.com/vuejs-id/membuat-search-highlight-dengan-vue-js-d47684d5999b&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ChuckNorris — Vue.js Chuck Norris Jokes Generator</title>
      <link>https://mazipan.github.io/blogs/articles/vue-js-chuck-norris-jokes-generator.md/</link>
      <pubDate>Mon, 28 May 2018 13:50:51 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/vue-js-chuck-norris-jokes-generator.md/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ZsB-bLjXU-356wZGkxVYlg.jpeg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;498&quot; /&gt; &lt;em&gt;Chuck Norris (sumber : &lt;a href=&quot;http://www.healthfitnessrevolution.com&quot;&gt;http://www.healthfitnessrevolution.com&lt;/a&gt;)&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Kali ini kita akan bereksperimen dengan Vue.js untuk membuat hal-hal yang lucu agar tidak bosan dengan kode yang setiap hari kita tulis. Melihat dari daftar public API yang dibuat om @toddmotto di &lt;a href=&quot;https://github.com/toddmotto/public-apis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;, maka terbersit untuk membuat satu interface dari API yang disediakan disana. Pilihan akhirnya jatuh pada API dari &lt;a href=&quot;https://api.chucknorris.io/&quot;&gt;https://api.chucknorris.io/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Jangan bilang Anda tidak kenal Chuck Norris, baca dulu &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Chuck_Norris&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;disini&lt;/a&gt; ya mengenai Chuck Norris ini.&lt;/p&gt;
&lt;p&gt;Sebelum membuat web client nya kita akan analisa terlebih dahulu mengenai ketersediaan dan spesifikasi yang ada di dokumentasi API yang bersangkutan. Dari dokumentasi yang ada, setidaknya ada 4 jenis API yang mereka sediakan yakni :&lt;/p&gt;
&lt;ol&gt;
     &lt;li&gt;Random Jokes : https://api.chucknorris.io/jokes/random&lt;/li&gt;
     &lt;li&gt;Category : https://api.chucknorris.io/jokes/categories&lt;/li&gt;
     &lt;li&gt;Random By Category : https://api.chucknorris.io/jokes/random?category={category}&lt;/li&gt;
     &lt;li&gt;Search : https://api.chucknorris.io/jokes/search?query={query}&lt;/li&gt;
&lt;/ol&gt;
Setelah mengetahui ketersediaan API, maka kita akan sedikit berkelakar mengenai halaman apa saja yang ingin kita buat. Berdasarkan API yang ada maka saya kira-kira kita akan membuat beberapa halaman berikut :
&lt;ol&gt;
     &lt;li&gt;Homepage&lt;/li&gt;
     &lt;li&gt;Daftar kategori&lt;/li&gt;
     &lt;li&gt;Random jokes di masing-masing kategori&lt;/li&gt;
     &lt;li&gt;Search&lt;/li&gt;
&lt;/ol&gt;
Menggunakan Vue.js tentu yang paling mudah adalah karena telah tersedia Vue-CLI yang bisa dengan mudah untuk membuat skeleton project awal, tentu kita akan pilih untuk menggunakan tools keren ini. Selain itu kita akan menggunakan template webpack dari Vue-CLI agar mudah di modifikasi bila dibutuhkan. Anda bisa membaca mengenai cara menggunakan Vue-CLI ini di halaman resminya &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;disini&lt;/a&gt; atau bisa juga di blog saya &lt;a href=&quot;https://mazipanneh.com/blog/2017/07/memulai-vue-js-dengan-vue-cli-dan-webpack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;disini&lt;/a&gt;.

&lt;p&gt;Setelah selesai generate skeleton, berikutnya adalah membuat kerangka tampilan. Seperti kita tahu di Vue.js kita bisa menggunakan Vue-Router untuk melakukan frontend routing sehingga tidak perlu semua layout kita refresh melainkan hanya bagian konten saja yang perlu diubah ketika melakukan perubahan routing. Untuk ini kita akan memecah layout utama menjadi beberapa bagian berikut :&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Header&lt;/li&gt;
     &lt;li&gt;Sidebar&lt;/li&gt;
     &lt;li&gt;Tab Navigasi&lt;/li&gt;
     &lt;li&gt;Konten&lt;/li&gt;
&lt;/ul&gt;
Tentu selain konten, akan kita letakkan saja di App.vue, yang bisa dilihat kodenya &lt;a href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/App.vue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;disini&lt;/a&gt;.

&lt;p&gt;Setelah membuat layout utama di App.vue, kita akan membuat beberapa halaman yang sudah kita sepekati diawal. Masing-masing page akan direfleksikan dengan satu file .vue yang berisi konten masing-masing dan akan kita letakkan semuanya di folder pages agar mudah tracking nya. Semua file di halaman pages bisa dilihat &lt;a href=&quot;https://github.com/mazipan/chucknorris/tree/master/src/pages&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;disini&lt;/a&gt;. Karena beberapa pages yang kita buat masih sederhana dan tidak terlalu kompleks maka saya memutuskan untuk tidak memisah bagian di dalamnya menjadi komponen yang lebih kecil.&lt;/p&gt;
&lt;p&gt;Beberapa komponen yang kita pisahkan akan kita letakkan di folder &lt;a href=&quot;https://github.com/mazipan/chucknorris/tree/master/src/components&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;components&lt;/a&gt;, seperti file App.vue yang merupakan layout utama akan menjadi terlalu besar bila tidak kita pecah ke dalam komponen-komponen yang lebih kecil. Beberapa yang kita pecah adalah seperti &lt;a href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/components/Sidebar.vue&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/components/Sidebar.vue&quot;&gt;Sidebar&lt;/a&gt;, &lt;a href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/components/HeaderSection.vue&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/components/HeaderSection.vue&quot;&gt;Header&lt;/a&gt;, &lt;a href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/components/TabSection.vue&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/components/TabSection.vue&quot;&gt;Tab Navigasi&lt;/a&gt;, dan &lt;a href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/components/SocialSharingSection.vue&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/components/SocialSharingSection.vue&quot;&gt;Sosial Sharing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Untuk melakukan routing kita akan menggunakan Vue-Router yang merupakan library resmi dari Vue.js. Kita akan mengarahkan url yang kita inginkan untuk memuat file .vue yang telah kita buat di folder pages tadi. Semua konfigurasi dari routing yang kita lakukan bisa dilihat di folder router, dimana ada file index.js yang merupakan file routing kita.&lt;/p&gt;
&lt;p&gt;Menggunakan API berarti kita membutuhkan http-client library untuk melakukan pemanggilan endpoint yang tersedia. Disini kita akan menggunakan Vue-Resource sebagai library pembantu kita. Mengenai cara penggunaan Vue-Resource bisa dilihat langsung di halaman resmi mereka, namun secara prinsip dan syntax tidak jauh berbeda dengan beberapa http-client library lain yang tersedia di pasaran. Kita akan menjadikan satu file untuk melakukan pemanggilan API endpoint ini dan akan kita letakkan di folder api. Semua kode megenai pemanggilan API ini bisa dilihat di file index.js.&lt;/p&gt;
&lt;p&gt;Membuat satu aplikasi utuh terkadang akan banyak menggunakan state yang makin banyak tentunya akan makin susah di manage, maka dari itu kita kan menambahkan Vuex sebagai pengatur state-state kita. Mengenai cara menggunakan dan berbagai hal dasar mengenai Vuex silahkan dibaca di halam resmi mereka. Kita menyiapkan satu file store.js yang kita letakkan di folder store sebagai pengatur state yang memanfaatkan Vuex.&lt;/p&gt;
&lt;p&gt;Berikut sedikit screenshot hasil dari project yang telah kita buat :&lt;/p&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*r93ReTs2PEhnf16fKuPtKw.png&quot; /&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*MAuMb-UCB4gK2Wz4uprIHA.png&quot; /&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*QaNZswhBbs0qJUoyuTTp1A.png&quot; /&gt;

&lt;p&gt;Kode project ini telah diunggah ke Github dan bisa dipelajari untuk kepentingan pembelajaran bersama, silahkan di cek di tautan berikut : &lt;a href=&quot;https://github.com/mazipan/chucknorris&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mazipan/chucknorris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Demikian sharing project sederhana yang saya buat, semoga bermanfaat.&lt;/p&gt;
&lt;p&gt;Tulisan ini telah dipublikasikan juga di Medium: &lt;a href=&quot;https://medium.com/vuejs-id/chucknorris-vue-js-chuck-norris-jokes-generator-30eff39b6862&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/vuejs-id/chucknorris-vue-js-chuck-norris-jokes-generator-30eff39b6862&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Membuat Vue.js Plugin untuk pemula</title>
      <link>https://mazipan.github.io/blogs/articles/membuat-vue-js-plugin-untuk-pemula.md/</link>
      <pubDate>Sat, 26 May 2018 11:26:08 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/membuat-vue-js-plugin-untuk-pemula.md/</guid>
      <author></author>
      <description>&lt;p&gt;Belajar membuat Vue.js Plugin yang ditujukan untuk para pemula dari awal sampai publish ke npm registry.&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*w8B5xZW-IST7Agn2g7kSdA.jpeg&quot; /&gt;

&lt;p&gt;Setelah di artikel ini kita sedikit membahas soal apa itu Vue.js Plugin maka kali ini kita akan langsung belajar membuat Vue.js Plugin dari awal sampai bisa publish ke npm registry. Langsung saja, silahkan disimak beberapa langkah-langkahnya.&lt;/p&gt;
&lt;p&gt;Pertama adalah siapkan environment untuk development Vue.js project sederhana, untuk hal ini saya menggunakan beberapa dependency berikut yang mungkin saja ada beberapa yang tidak dibutuhkan namun tidak sempat lagi inspeksi mana yang tidak digunakan, berikut contoh snippet dari dependency yang saya gunakan di package.json :&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&quot;devDependencies&quot;: {
    &quot;autoprefixer&quot;: &quot;^7.1.4&quot;,
    &quot;babel-core&quot;: &quot;^6.26.0&quot;,
    &quot;babel-loader&quot;: &quot;^7.1.2&quot;,
    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.23.0&quot;,
    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,
    &quot;babel-preset-stage-2&quot;: &quot;^6.24.1&quot;,
    &quot;babel-register&quot;: &quot;^6.26.0&quot;,
    &quot;compression&quot;: &quot;^1.7.0&quot;,
    &quot;compression-webpack-plugin&quot;: &quot;^1.0.0&quot;,
    &quot;cross-env&quot;: &quot;^5.0.5&quot;,
    &quot;css-loader&quot;: &quot;^0.28.7&quot;,
    &quot;es6-promise&quot;: &quot;^4.1.1&quot;,
    &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.0&quot;,
    &quot;friendly-errors-webpack-plugin&quot;: &quot;^1.6.1&quot;,
    &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,
    &quot;vue&quot;: &quot;^2.4.4&quot;,
    &quot;node-sass&quot;: &quot;^4.5.3&quot;,
    &quot;sass-loader&quot;: &quot;^6.0.6&quot;,
    &quot;vue-loader&quot;: &quot;^13.0.4&quot;,
    &quot;vue-template-compiler&quot;: &quot;^2.4.4&quot;,
    &quot;webpack&quot;: &quot;^3.6.0&quot;,
    &quot;webpack-dev-server&quot;: &quot;^2.8.2&quot;,
    &quot;webpack-merge&quot;: &quot;^4.1.0&quot;,
    &quot;webpack-shell-plugin&quot;: &quot;^0.5.0&quot;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setelah menambahkan dependency dan menginstall semuanya maka dalam rangka menyiapkan environment ini, kita akan buat webpack.config.js, beberapa loader yang kita gunakan adalah babel, vue-loader dan sass-loader, berikut contoh konfigurasi webpack yang kita buat untuk kebutuhan development kita :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var path = require('path');
var webpack = require('webpack');

require('es6-promise').polyfill();

module.exports = {
  entry: {
    app: './main.js'
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/dist',
    filename: 'bundle.js',
    jsonpFunction: 'WebpackJsonp'
  },
  resolve: {
    extensions: ['.js'],
    alias: {
      'vue$': 'vue/dist/vue.common.js'
    }
  },
  module: {
    rules: [      
      {
        test: /\.vue$/,
        loader: 'vue-loader',
        options: {
          loaders: {
            // Since sass-loader (weirdly) has SCSS as its default parse mode, we map
            // the &quot;scss&quot; and &quot;sass&quot; values for the lang attribute to the right configs here.
            // other preprocessors should work out of the box, no loader config like this necessary.
            'scss': 'vue-style-loader!css-loader!sass-loader',
            'sass': 'vue-style-loader!css-loader!sass-loader?indentedSyntax'
          }
          // other vue-loader options go here
        }
      },
      {
        test: /\.js$/,
        exclude: path.resolve(__dirname, 'node_modules'),
        loader: 'babel-loader'
      }
    ]
  },
  devServer: {
    historyApiFallback: true,
    noInfo: true
  },
  performance: {
    hints: false
  },
  devtool: '#eval-source-map'
}


if (process.env.NODE_ENV === 'production') {
  module.exports.devtool = '#source-map'
  // http://vue-loader.vuejs.org/en/workflow/production.html
  module.exports.plugins = (module.exports.plugins || []).concat([
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: '&quot;production&quot;'
      }
    }),
    new webpack.optimize.UglifyJsPlugin({
      sourceMap: true,
      compress: {
        warnings: false
      }
    }),
    new webpack.LoaderOptionsPlugin({
      minimize: true
    })
  ])
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Untuk menjalankan webpack ini di development kita bisa menambahkan script di package.json kita dengan key apapun, seperti “dev” sehingga kita bisa menggunakan shortcut untuk menjalankan script ini lewat npm run nama_key. Berikut sedikit contoh script untuk menjalankan webpack tersebut dalam mode development :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cross-env NODE_ENV=development webpack-dev-server — hot— open&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bila anda memutuskan untuk mengganti nama file dari konfigurasi ini, maka anda perlu menambahkan — config nama_file di dalam script tersebut.&lt;/p&gt;
&lt;p&gt;Setelah environment siap, maka kita akan masuk pada fase development kita.
Seperti terlihat dari konfigurasi webpack, bahwa kita menggunakan file main.js sebagai entry dari aplikasi kita. Maka file tersebut adalah file pertama yang harus kita buat agar webpack bisa berjalan tanpa error. File main.js ini akan berisi instance dari Vue.js kita. berikut contoh file main.js tersebut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import Vue from 'vue'
import App from './App.vue'

/* global process */
if (process.env.NODE_ENV !== 'production') {
  Vue.config.devtools = true
}

new Vue({
  el: '#app',
  template: '',
  components: {App}
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;File main.js tersebut akan menarik dependency dari file App.vue sebagai root dari aplikasi Vue.js kita, maka kita bisa membuat file .vue kosong terlebih dahulu untuk mengakomodir hal ini. Berikut contoh file App.vue kosong yang kita buat :&lt;/p&gt;
&lt;pre class=&quot;lang:js decode:true&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&quot;app&quot; class=&quot;app&quot;&amp;gt; 
    {{ msg }}
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: 'app',
  data () {
    return {
      msg: 'Welcome to Vue world!!!'
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style lang=&quot;scss&quot;&amp;gt;
&amp;lt;/style&amp;gt;&lt;/pre&gt;
&lt;p&gt;Untuk memastikan aplikasi vue kita berjalan dan semua setup environment kita bisa berjalan maka kita perlu buat index.html sebagai halaman awal, berikut adalah contoh index.html buatan kita :&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
  &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&amp;gt;
  &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=7&quot;&amp;gt;

  &amp;lt;title&amp;gt;Vue Currency Filter | Irfan Maulana&amp;lt;/title&amp;gt;

&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;noscript&amp;gt;&amp;lt;p&amp;gt;Please use the latest browser and enable javascript.&amp;lt;/p&amp;gt;&amp;lt;/noscript&amp;gt;

    &amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;script src=&quot;dist/bundle.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Seharusnya sampai sini, aplikasi kita paling tidak sudah bisa di running dan akan menampilkan index.html hasil buatan kita yang kemudian div dengan id app akan di-inject dengan kode yang ada di file App.vue kita.&lt;/p&gt;
&lt;p&gt;Langkah selanjutnya, kita bisa fokus membuat Vue.js Plugin kita. Anggap saja kita akan membuat Plugin yang berupa Filter untuk mem-format sebuah angka menjadi sebuah currency atau format mata uang. Kita harus membuat file tersendiri untuk ini, karena nantinya file ini akan kita jadikan library yang independen dan bisa digunakan oleh orang lain juga.&lt;/p&gt;
&lt;p&gt;Kita akan membuat file baru dengan nama VueCurrencyFilter.js, file ini merupakan Plugin kita. Ada beberapa dasar untuk bisa membuat Plugin di Vue.js, berikut adalah kode utama untuk membuat Plugin :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
const VueCurrencyFilter = {
  install (Vue, options) {
    // put your plugin code here
  }
}
export default VueCurrencyFilter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seperti bisa kita lihat bahwa dasar dari membuat Plugin adalah menambahkan install dengan parameter Vue Instance dan bisa juga ditambahkan parameter object konfigurasi lainnya.
Karena kita akan membuat sebuah Filter sebagai Plugin maka akan kita tambahkan sintaks dasar untuk membuat Filter di Vue.js, seperti berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
const VueCurrencyFilter = {
  install (Vue, options) {
    Vue.filter('currency', function (value) {
      let result = value
      // put your logic to transform result here
      return result
    })
  }
}
export default VueCurrencyFilter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kita bisa menambahkan sendiri logic untuk men-format/transform data inputan menjadi balikan yang sudah dalam bentuk format mata uang di tanda komentar yang sudah saya buat. Tentu ada banyak alternatif solusi di luar sana, kita akan coba cari di stackoverflow.com saja. Berikut adalah link dari stackoverflow yang saya temukan : &lt;a href=&quot;https://stackoverflow.com/a/14428340/2856792&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/a/14428340/2856792&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Berikut adalah setelah kita meng-implementasikan logika yang kita temukan di stackoverflow.com tersebut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
const VueCurrencyFilter = {
  install (Vue, options) {
    Vue.filter('currency', function (value) {
      let result = &quot;$ &quot; + (value).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,')
      return result
    })
  }
}
export default VueCurrencyFilter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sampai disini harusnya kode tersebut sudah bisa digunakan, namun saya akan mencontohkan bila symbol dari currency yang di kode tersebut masih hardcode maka akan kita jadikan parameter yang bisa di set tergantung kebutuhan. Berikut contoh kodenya :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
const VueCurrencyFilter = {
  install (Vue, options) {

    if(typeof options === &quot;undefined&quot;) options = {}
    let symbol = options.symbol || 'Rp'

    Vue.filter('currency', function (value, _symbol) {

      if(typeof _symbol !== 'undefined') symbol = _symbol

      let result = symbol + &quot; &quot; + (value).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,')
      return result
    })
  }
}
export default VueCurrencyFilter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Selesai sudah Plugin sederhana kita, berikutnya kita akan mencoba menjalankan Plugin Filter kita dengan memanggil di main.js kita. Berikut adalah contoh kode main.js yang sudah menggunakan Plugin Filter kita :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import Vue from 'vue'
import App from './App.vue'

if (process.env.NODE_ENV !== 'production') {
  Vue.config.devtools = true
}

// using our plugin
import VueCurrencyFilter from './VueCurrencyFilter.js'
Vue.use(VueCurrencyFilter, {symbol: '$'})

new Vue({
  el: '#app',
  template: '',
  components: {App}
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setelah menambahkan kode diatas maka kita bebas menggunakan Filter yang telah kita buat dimanapun di dalam aplikasi Vue.js kita tanpa harus membuat ulang di setiap komponen. Berikut contoh App.vue yang menggunakan Plugin Filter kita tadi :&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&quot;app&quot; class=&quot;app&quot;&amp;gt; 
    {{ msg }}&amp;lt;br&amp;gt;
    &amp;lt;span&amp;gt;{{ textNum | currency }}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;span&amp;gt;{{ textNum | currency('Rp') }}&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: 'app',
  data () {
    return {
      msg: 'Welcome to Vue world!!!',
      textNum: 2000
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style lang=&quot;scss&quot;&amp;gt;
&amp;lt;/style&amp;gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Bagian terakhir dari artikel ini adalah membuat Vue.js Plugin yang telah kita buat menjadi library yang bisa digunakan ulang oleh orang lain dengan cara di bundle kemudian kita publish ke npm registry. Kita akan memanfaatkan ilmu hitam dari webpack untuk membuat output dengan target &lt;a href=&quot;https://github.com/umdjs/umd&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;umd&lt;/a&gt; (Universal Module Definition) yang lebih universal terhadap berbagai macam penggunaan.&lt;/p&gt;
&lt;p&gt;Untuk membuat output umd ini file config webpack akan saya pisah dengan membuat file baru. Berikut adalah contoh file konfigurasi webpack untuk membuat library umd tersebut :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var path = require('path');
var webpack = require('webpack');
var npm = require(&quot;./package.json&quot;);

require('es6-promise').polyfill();

module.exports = {
  entry: {
    app: './VueCurrencyFilter.js'
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/dist',
    filename: 'VueCurrencyFilter.bundle.js',
    library: 'VueCurrencyFilter',
    libraryTarget: 'umd',
    umdNamedDefine: true,
    jsonpFunction: 'WebpackJsonp'
  },
  resolve: {
    extensions: ['.js'],
    alias: {
      'vue$': 'vue/dist/vue.common.js'
    }
  },
  devtool: '#source-map',
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: path.resolve(__dirname, 'node_modules'),
        loader: 'babel-loader'
      }
    ]
  },
  externals: {
    &quot;vue&quot;: &quot;Vue&quot;
  },
  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        'NODE_ENV': '&quot;production&quot;'
      }
    }),
    new webpack.optimize.UglifyJsPlugin({
      compress: {
        warnings: false
      },
      sourceMap: false
    }),
    new webpack.BannerPlugin({
      banner: `VueCurrencyFilter v.${npm.version}\nIrfan Maulana (https://github.com/mazipan)`
    })
  ]
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Webpack konfigurasi ini bisa dijalankan dengan script :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
cross-env NODE_ENV=production webpack — config webpack.config.dist.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dengan menjalankan script ini kita akan membuat file baru dengan nama VueCurrencyFilter.bundle.js di dalam folder &lt;b&gt;dist/&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Setelah berhasil membuat file bundle dari Plugin kita, maka kita akan memulai persiapan untuk publish ke registry npm. Sebelumnya perlu kita ketahui bahwa secara default npm akan mengunggah semua kode yang ada di repository kita ke npm registry ketika kita memberikan perintah npm publish. Makin banyak file yang kita unggah juga akan berakibat makin lama ketika seseorang berusaha mendownload dan menggunakan library kita lewat npm. Maka dari itu kita perlu pilih-pilih terlebih dahulu file mana yang akan kita unggah dan file mana yang tidak perlu. Hal ini bisa dilakukan dengan mudah dengan menambahkan files di package.json, seperti contoh berikut :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
&quot;files&quot;: [
  &quot;dist/VueCurrencyFilter.bundle.js&quot;,
  &quot;dist/VueCurrencyFilter.bundle.js.map&quot;,
  &quot;VueCurrencyFilter.js&quot;
]
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Setelah menambahkan files, kita juga perlu menambahkan main script kita di package.json, gunanya agar ketika orang melakukan import tidak perlu mencari folder tertentu namun bisa langsung ke library kita saja. Kita akan ambil file hasil build webpack sebagai main script kita seperti berikut :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
&quot;main&quot;: &quot;dist/VueCurrencyFilter.bundle.js&quot;
&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;Dan silahkan berikan perintah kepada npm untuk publish dengan 
&lt;b&gt;npm publish&lt;/b&gt; &amp;#x1f605; !!!&lt;/p&gt;
&lt;p&gt;Semua kode yang saya share sudah tersedia di Github dan sudah di publish di npm: &lt;a href=&quot;https://github.com/mazipan/vue-currency-filter&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/mazipan/vue-currency-filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ada beberapa repository lain dari saya juga yang mungkin bisa menjadi referensi untuk anda belajar bagaimana membuat Vue.js Plugin ini, berikut daftarnya silahkan di cek dan jangan lupa &amp;#x1f31f; di repository githubnya :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vue2-simplert-plugin (Vue2-Simplert as Vue.js Plugins)&lt;/li&gt;
&lt;li&gt;vue-complexify (Vuejs porting library from jquery.complexify.js)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Demikian tulisan singkat dari saya, semoga bermanfaat.&lt;/p&gt;
&lt;p&gt;Tulisan ini juga telah dipublikasikan di medium: &lt;a href=&quot;https://medium.com/vuejs-id/membuat-vue-js-plugin-untuk-pemula-3ae9921ade02&quot;&gt;https://medium.com/vuejs-id/membuat-vue-js-plugin-untuk-pemula-3ae9921ade02&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>15 programmer JavaScript keren asal Indonesia</title>
      <link>https://mazipan.github.io/blogs/articles/15-programmer-javascript-keren-asal-indonesia/</link>
      <pubDate>Thu, 01 Mar 2018 14:12:22 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/15-programmer-javascript-keren-asal-indonesia/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”700”]&lt;img src=&quot;https://static.cdn-cdpl.com/700x350/998b78e349061b4971c0a2b0e8d6be41/aa.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;350&quot; /&gt; Sumber gambar: codepolitan.com[/caption]&lt;/p&gt;
&lt;div style=&quot;border-left: 2px solid #fa5742; padding-left: 1em;&quot;&gt;
&lt;p class=&quot;crayon-selected&quot; style=&quot;text-align: left;&quot;&gt;&lt;i&gt;Disclaimer: artikel ini dibuat berdasarkan opini pribadi, tidak ada maksud untuk meng-endorse atau menjatuhkan siapapun. Adapun bila banyak teman-teman keren lain yang tidak bisa disebutkan dikarenakan memang terbatasnya media ini. Semoga berkenan.&lt;/i&gt;&lt;/p&gt;

&lt;/div&gt;
Pasti sudah pada tahu JavaScript kan ? Salah satu bahasa pemrograman yang (baca: katanya) lagi &lt;i&gt;hype&lt;/i&gt; beberapa waktu belakangan ini. Pada artikel kali ini kita akan sebutkan beberapa programmer JavaScript lokal keren yang bisa kita ikuti baik sosial medianya ataupun kalau sempat bertemu bisa langsung coba menyapa dan ngobrol dengan mereka-mereka ini. Kenapa saya rekomendasikan untuk mengikuti sosial media mereka ? Karena menurut saya beberapa dari mereka memang rajin untuk berbagi banyak informasi menarik baik perkembangan JavaScript terkini, tulisan-tulisan, maupun project-project yang sedang mereka kerjakan yang seringkali menarik dan layak untuk kita pelajari.

&lt;p&gt;Berikut daftar mereka yang tidak saya urutkan berdasarkan apapun, jadi jangan berekspektasi bahwa yang lebih atas berarti lebih keren daripada yang ada di daftar bawahnya. Semuanya keren-keren, berikut daftarnya:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;
&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Sonny Lazuardi&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars3.githubusercontent.com/u/856609?s=200&amp;amp;v=4&quot; alt=&quot;Sonny Lazuardi&quot; /&gt;

&lt;p&gt;Sonny Lazuardi, sekarang bekerja di Grab Singapore sebagai UX Engineer. Ketika berbicara mengenai JavaScript di Indonesia tentu nama orang yang satu ini tidak boleh terlewat. Sudah coba lihat ke akun Github nya ? Sudah tidak terhitung berapa banyak projek &lt;em&gt;open source&lt;/em&gt; yang dikerjakan olehnya yang menurut saya sendiri seringkali terlalu keren untuk di open source kan. Namun begitulah Sonny, sangat &lt;em&gt;passionate&lt;/em&gt; dalam berbagi ke teman-teman di luar sana. Sonny juga aktif menjadi speaker di beberapa &lt;em&gt;conference&lt;/em&gt; dan &lt;em&gt;meetup&lt;/em&gt; di kalangan programmer. Yang paling heboh adalah ketika menjadi pembicara di JSConf Asia akhir tahun 2016 kemarin. Videonya bisa dilihat di tautan berikut &lt;a href=&quot;https://www.youtube.com/watch?v=tokHz64qXs8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=tokHz64qXs8&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/sonny.lazuardi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/sonny.lazuardi&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/sonnylazuardi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://twitter.com/sonnylazuardi&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/sonnylazuardi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/sonnylazuardi&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Top Skill: React Native, ReactJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;2. Muhammad Azammudin&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars3.githubusercontent.com/u/3477408?s=200&amp;amp;v=4&quot; alt=&quot;Muhammad Azammudin&quot; /&gt;

&lt;p&gt;Mas Azam, salah satu orang yang pertama menjadi ambasador ReactJS di Indonesia ketika teman-teman lain bahkan mungkin belum mendengar apa itu ReactJS. Mas Azam ini juga aktif sekali berbagi banyak informasi menarik lewat halaman di facebook &lt;a href=&quot;https://www.facebook.com/arrowfunxtion/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/arrowfunxtion/&lt;/a&gt;. Ada banyak mini seri baik screencast maupun tutorial kecil yang berguna baik bagi level pemula sampai menengah. Silahkan add akun sosial medianya dan ikuti berbagai info menarik yang beliau sebarkan.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/script.holic/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/script.holic/&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/azamuddin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/azamuddin&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Top Skill: ReactJS, SailsJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;3. Muhammad Naufal Rabbani&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars0.githubusercontent.com/u/12091318?s=200&amp;amp;v=4&quot; alt=&quot;Muhammad Naufal Rabbani&quot; /&gt;

&lt;p&gt;Mas Naufal ini salah satu programmer JavaScript keren asal Sidoarjo. Aktif sebagai &lt;em&gt;speaker&lt;/em&gt; di beberapa &lt;em&gt;meetup&lt;/em&gt; lokal yang diadakan di kawasan Sidoarjo, Surabaya dan sekitarnya. Menilik ke akun Githubnya juga tidak main-main luar biasanya. Ada banyak &lt;em&gt;open source&lt;/em&gt; keren yang memiliki bintang lebih dari 100 yang menunjukkan bawa projek tersebut setidaknya bermanfaat dan digunakan banyak orang.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/BosNaufalAccount&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/BosNaufalAccount&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/bosnaufal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/bosnaufal&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ReactJS, VueJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;4. Antony Budianto&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars3.githubusercontent.com/u/7658554?s=200&amp;amp;v=4&quot; alt=&quot;Antony Budianto&quot; /&gt;

&lt;p&gt;Antony Budianto merupakan kontributor open source di banyak repositori. Membuat banyak projek &lt;em&gt;starter kit&lt;/em&gt; untuk beberapa framework sehingga memudahkan teman-teman lain yang ingin cepat mencari skeleton untuk projeknya. Di Facebook beliau juga rajin membagikan banyak artikel terbaru mengenai perkembangan JavaScript khususnya ReactJS.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/antonybudianto&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/antonybudianto&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/antonybudianto&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/antonybudianto&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ReactJS, Angular&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;5. Rian Yulianto W&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars0.githubusercontent.com/u/11639412?s=200&amp;amp;v=4&quot; alt=&quot;Rian Yulianto W&quot; /&gt;

&lt;p&gt;Mas Rian atau kalian mungkin akan lebih familiar dengan gambar kucing di berbagai akun sosial medianya. Mas Rian ini aslinya programmer Java dengan spesialisasi di Android namun beberapa tahun terakhir juga aktif di komunitas JavaScript terutama Angular dan Typescript. Ikuti sosial medianya dan pasti kalian akan dapat banyak info menarik, berita terbaru dan berbagai projek menarik terbaru karena memang beliau sangat aktif untuk berbagi informasi yang beliau dapatkan.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/darkfirenze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/darkfirenze&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/GulajavaMinistudio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/GulajavaMinistudio&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: TypeScript, Angular&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;6. Jihad Dzikri Waspada&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars2.githubusercontent.com/u/5234842?s=200&amp;amp;v=4&quot; alt=&quot;Jihad Dzikri Waspada&quot; /&gt;

&lt;p&gt;Mas Jihad, mantan programmer di TechInAsia Indonesia yang ternyata sekarang sudah melalang buana ke negeri orang. Kalau ditanya soal JavaScript programmer di Indonesia tentu nama beliau akan selalu saya sebut diantara banyak yang lain. Satu yang menjadi kelebihan beliau adalah karena pemahaman &lt;em&gt;functional programming&lt;/em&gt;nya berada diatas rata-rata, ini didapatkan karena beliau juga fasih di bahasa Haskell yang menganut paradigma ini. Wajar saja kalau kita kunjungi akun mediumnya maka akan kita temukan berbagai artikel mengenai &lt;em&gt;functional programming&lt;/em&gt; yang tentunya diimplementasikan menggunakan JavaScript.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/dewey.macro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/dewey.macro&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/dewey92&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/dewey92&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Medium: &lt;a href=&quot;https://medium.com/@Dewey92&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/@Dewey92&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ReactJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;7. Muhammad Mustadi&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars0.githubusercontent.com/u/3748658?s=200&amp;amp;v=4&quot; alt=&quot;Muhammad Mustadi&quot; /&gt;

&lt;p&gt;Muhammad Mustadi atau biasa dipanggil Ody ini salah seorang programmer Hackaton mania. Kalau ada Hackaton dan Ody ikut, itu berarti pemberitahuan untuk peserta lain untuk tidak terlalu berharap. Ody seorang programmer yang membuat banyak produk keren baik untuk hackaton maupun di sela-sela waktu luangnya. Mengikuti sosial medianya terutama akun &lt;a href=&quot;https://twitter.com/mathdroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Twitternya&lt;/a&gt; memang agak riskan bagi yang tidak sepemikiran, seringkali memang tweetnya agak &lt;em&gt;berbahaya&lt;/em&gt;untuk dibaca anak-anak :-).&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/mathdroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/mathdroid&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/mathdroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mathdroid&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/mathdroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://twitter.com/mathdroid&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ReactJS, NodeJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;8. Alfred Crosby&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars3.githubusercontent.com/u/13277869?s=200&amp;amp;v=4&quot; alt=&quot;Alfred Crosby&quot; /&gt;

&lt;p&gt;Programmer Tokopedia yang sekarang sudah hijrah ke Grab ini mungkin tidak begitu banyak terdengar di telinga temen-temen - ya paling tidak, tidak seheboh Sonny ya :-). Namun Osby ini juga senang berbagi, ada beberapa artikelnya yang ditulis dengan komprehensif dan keren untuk dibaca.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/putualfredcrosby&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/putualfredcrosby&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/alfrcr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/alfrcr&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Medium: &lt;a href=&quot;https://medium.com/@alfrcr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/@alfrcr&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ReactJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;9. Ega Wachid Radiegtya&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars1.githubusercontent.com/u/2161622?s=200&amp;amp;v=4&quot; alt=&quot;Ega Wachid Radiegtya&quot; /&gt;

&lt;p&gt;Mas Ega pemilik &lt;a href=&quot;https://www.facebook.com/dumbwaysdotid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DumbWays.id&lt;/a&gt; ini banyak membuat konten dan screencast untuk teman-teman belajar JavaScript, beliau juga mengadakan bootcamp offline yang bisa kalian ikuti juga lewat page DumbWays.id miliknya.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/ega.radiegtya&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/ega.radiegtya&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/radiegtya&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/radiegtya&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ReactJS, ReactNative, VueJS, NodeJS, MeteorJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;10. Yohan Toting&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars3.githubusercontent.com/u/106703?s=200&amp;amp;v=4&quot; alt=&quot;Yohan Toting&quot; /&gt;

&lt;p&gt;Mas Yohan, salah satu &lt;em&gt;Google Developer Advocate&lt;/em&gt; yang jika kita kunjungi akun Mediumnya banyak membahas soal Web pada umumnya serta PWA akhir-akhir ini. Sering mengisi berbagai conference dan meetup dari komunitas di berbagai kota di Indonesia. Yang paling hebat dari mas Yohan ini semangatnya dalam berbagi ke teman-teman, caranya memproduksi konten baik tulisan maupun &lt;em&gt;talks&lt;/em&gt; selalu bisa membuat kalian berdecak kagum pada orang ini.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/tyohan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/tyohan&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/tyohan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tyohan&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/tyohan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://twitter.com/tyohan&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Medium: &lt;a href=&quot;https://medium.com/@tyohan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/@tyohan&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: Polymer, ReactJS, VanillaJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;11. Riza Fahmi&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars3.githubusercontent.com/u/1147918?s=200&amp;amp;v=4&quot; alt=&quot;Riza Fahmi&quot; /&gt;

&lt;p&gt;Mas Riza ini salah satu organizer di &lt;a href=&quot;https://www.meetup.com/JakartaJS/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JakartaJS&lt;/a&gt;, salah satu dari 3 Lead &lt;a href=&quot;https://www.facebook.com/groups/DevCJakarta/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Facebook Developer Circle Jakarta&lt;/a&gt;. Aktif berbagi informasi di sosial media terutama Facebook. Beliau sekarang menjadi &lt;em&gt;Curriculum Director&lt;/em&gt; di &lt;a href=&quot;https://hacktiv8.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hacktiv8&lt;/a&gt; dan saat ini sedang berusaha berbagi cerita-cerita menarik dari berbagai programmer yang berhasil di wawancarai lewat &lt;em&gt;podcast&lt;/em&gt; yang tidak kalah unik di &lt;a href=&quot;https://www.ceritanyadeveloper.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ceritanyadeveloper.com/&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/rizafahmi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/rizafahmi&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/rizafahmi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/rizafahmi&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ReactJS, NodeJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;12. Fatih Kalifa&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars3.githubusercontent.com/u/1614415?s=200&amp;amp;v=4&quot; alt=&quot;Fatih Kalifa&quot; /&gt;

&lt;p&gt;Fatih Kalifa saat ini bekerja di &lt;a href=&quot;https://www.traveloka.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Traveloka&lt;/a&gt; dan dengan pekerjaan sehari-hari yang berkaitan dengan ReactJS, mas Fatih masih sempat membuat beberapa library-library keren yang kebanyakan berbasiskan ReactJS. Silahkan ikuti saja akun Githubnya.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/pveyes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/pveyes&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/pveyes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/pveyes&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/pveyes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://twitter.com/pveyes&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ReactJS, NodeJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;13. Mulia Nasution&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars0.githubusercontent.com/u/113989?s=200&amp;amp;v=4&quot; alt=&quot;Mulia Nasution&quot; /&gt;

&lt;p&gt;Mas Mulia sekarang bisa dibilang top ambassador bagi framework JavaScript VueJS. Namanya menjadi orang yang harus disebut ketika membicarakan framework hijau ini. Mas Mulia juga yang menjadi Admin di group Facebook &lt;a href=&quot;https://www.facebook.com/groups/1675298779418239/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue.js Indonesia&lt;/a&gt; yang juga aktif menjawab pertanyaan dari teman-teman di group tersebut.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/mul14&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/mul14&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/mul14&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mul14&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: VueJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;14. Hengki Sihombing&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars3.githubusercontent.com/u/201664?s=200&amp;amp;v=4&quot; alt=&quot;Hengki Sihombing&quot; /&gt;

&lt;p&gt;Co-Founder dan CTO &lt;a href=&quot;https://www.urbanhire.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Urbanhire&lt;/a&gt; tentu saja familiar di telinga semua programmer JavaScript tanah air. Menjadi salah satu organizer di &lt;a href=&quot;https://www.meetup.com/JakartaJS/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JakartaJS&lt;/a&gt;, beliau ini sangat fasih dengan ExpressJS.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/hengki.sihombing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/hengki.sihombing&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/hengkiardo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/hengkiardo&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: ExpressJS&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

&lt;p&gt;&lt;strong&gt;15. Galih Pratama&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://avatars2.githubusercontent.com/u/2271384?s=200&amp;amp;v=4&quot; alt=&quot;Galih Pratama&quot; /&gt;

&lt;p&gt;Pemilik &lt;a href=&quot;https://www.facebook.com/belajarkoding.id/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Belajarkoding&lt;/a&gt; dan Head Front End Developer di Crowde.co ini aktif membuat konten screencast dan berbagai tutorial berbagai bahasa pemrograman dan salah satu orang yang fasih dengan salah satu framework JavaScript yakni VueJS.&lt;/p&gt;
&lt;ul&gt;
     &lt;li&gt;Facebook: &lt;a href=&quot;https://www.facebook.com/pratamagalih/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/pratamagalih/&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Github: &lt;a href=&quot;https://github.com/galpratama&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/galpratama&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/galpratama&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://twitter.com/galpratama&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;TopSkill: VueJS&lt;/li&gt;
&lt;/ul&gt;
&amp;#x1f44d;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Tentu masih banyak teman-teman lain yang tidak kalah keren di luar sana namun tidak masuk kedalam daftar ini. Bila ingin melihat beberapa programmer JavaScript lokal keren lain yang tidak bisa disebutkan di artikel ini, silahkan kunjungi tautan ini : &lt;a href=&quot;http://git-awards.com/users?country=indonesia&amp;amp;language=javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://git-awards.com/users?country=indonesia&amp;amp;language=javascript&lt;/a&gt; Sekali lagi mohon maaf karena tidak bisa menyebutkan semua temen-temen keren lain ya.&lt;/p&gt;
&lt;p&gt;Semoga bermanfaat.&lt;/p&gt;
&lt;p&gt;Artikel ini telah dipublikasikan di Codepolitan: &lt;a href=&quot;https://www.codepolitan.com/programmer-javascript-lokal-keren-yang-bisa-kalian-ikuti-5ad71c72c4de2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.codepolitan.com/programmer-javascript-lokal-keren-yang-bisa-kalian-ikuti-5ad71c72c4de2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Pengetahuan Dasar Vue.js — Bagian 3</title>
      <link>https://mazipan.github.io/blogs/articles/pengetahuan-dasar-vue-js-bagian-3.md/</link>
      <pubDate>Fri, 10 Nov 2017 13:41:23 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/pengetahuan-dasar-vue-js-bagian-3.md/</guid>
      <author></author>
      <description>&lt;section class=&quot;section section--body section--first&quot;&gt; 

&lt;div class=&quot;section-content&quot;&gt;
  &lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
    &lt;p id=&quot;326e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;
      &lt;strong&gt;Pengetahuan Dasar Vue.js (&lt;a href=&quot;https://mazipanneh.com/blog/&quot;&gt;mazipanneh.com&lt;/a&gt;)&lt;/strong&gt; - Artikel ini merupakan seri lanjutan dari artikel yang sebelumnya sudah di publikasikan, baca semua seri Pengetahuan Dasar Vue.js :
    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li id=&amp;quot;7d0b&amp;quot; class=&amp;quot;graf graf--li graf-after--p&amp;quot;&amp;gt;
    &amp;lt;a class=&amp;quot;markup--anchor markup--li-anchor&amp;quot; href=&amp;quot;https://mazipanneh.com/blog/2017/11/pengetahuan-dasar-vue-js-bagian-1/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener&amp;quot; data-href=&amp;quot;https://medium.com/vuejs-id/pengetahuan-dasar-vue-js-bagian-1-88d02d57f859&amp;quot;&amp;gt;Pengetahuan Dasar Vue.js — Bagian 1&amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;2e00&amp;quot; class=&amp;quot;graf graf--li graf-after--li&amp;quot;&amp;gt;
    &amp;lt;a class=&amp;quot;markup--anchor markup--li-anchor&amp;quot; href=&amp;quot;https://mazipanneh.com/blog/2017/11/pengetahuan-dasar-vue-js-bagian-2/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener&amp;quot; data-href=&amp;quot;https://medium.com/vuejs-id/pengetahuan-dasar-vue-js-bagian-2-3616af1461d8&amp;quot;&amp;gt;Pengetahuan Dasar Vue.js — Bagian 2&amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;09b6&amp;quot; class=&amp;quot;graf graf--li graf-after--li graf--trailing&amp;quot;&amp;gt;
    Pengetahuan Dasar Vue.js — Bagian 3 &amp;lt;strong class=&amp;quot;markup--strong markup--li-strong&amp;quot;&amp;gt;(Anda disini)&amp;lt;/strong&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt;
&lt;/div&gt;&lt;/section&gt; &lt;section class=&quot;section section--body&quot;&gt; 

&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;section-divider&quot;&gt;
  &lt;figure style=&quot;width: 720px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*w8B5xZW-IST7Agn2g7kSdA.jpeg&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;365&quot; data-src=&quot;https://cdn-images-1.medium.com/max/720/1*w8B5xZW-IST7Agn2g7kSdA.jpeg&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Vue.js Illustrasi (sumber : https://fullstackfeed.com)&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div class=&quot;section-content&quot;&gt;
  &lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; style=&quot;text-align: left;&quot;&gt;
    &lt;p id=&quot;12c3&quot; class=&quot;graf graf--p graf--leading&quot;&gt;
      Kali ini kita akan melanjutkan dengan membahas hal dasar lainnya dalam Vue.js, silahkan siapkan kopi dan simak artikel berikut :
    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h4 id=&amp;quot;138b&amp;quot; class=&amp;quot;graf graf--h4 graf-after--p&amp;quot;&amp;gt;
  1. Filter, Computed dan Watch
&amp;lt;/h4&amp;gt;

&amp;lt;p id=&amp;quot;d959&amp;quot; class=&amp;quot;graf graf--p graf-after--h4&amp;quot;&amp;gt;
  &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;amp;#x1f449; Filter&amp;lt;/strong&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;b7da&amp;quot; class=&amp;quot;graf graf--p graf--hasDropCapModel graf--hasDropCap graf-after--p&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;graf-dropCap&amp;quot;&amp;gt;F&amp;lt;/span&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;ilter &amp;lt;/em&amp;gt;merupakan fitur yang juga diadopsi dari AngularJS dan memiliki fungsi yang hampir sama. &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;Filter &amp;lt;/em&amp;gt;di dalam Vue.js digunakan untuk melakukan transformasi atau pun formatting data secara &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;real-time&amp;lt;/em&amp;gt;berdasarkan rule yang telah ditetapkan di dalam kode kita.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;70be&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Keuntungan menggunakan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;filter &amp;lt;/em&amp;gt;adalah kita tidak perlu melakukan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;formatting &amp;lt;/em&amp;gt;secara manual dari setiap data yang ingin kita ubah, namun cukup membuat satu &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;filter &amp;lt;/em&amp;gt;dan bisa digunakan berulang-ulang dengan cara yang sangat simple dan mudah.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;61ef&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;Filter &amp;lt;/em&amp;gt;dapat digunakan di dalam template html dengan menambahkan pipe (|) pada data yang ingin kita lakukan transformasi, seperti terlihat pada gambar dibawah ini :
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;3b03&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*D4-aOneUq6C4hrBOCnM84Q.png&amp;quot; data-width=&amp;quot;603&amp;quot; data-height=&amp;quot;142&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;canvas class=&amp;quot;progressiveMedia-canvas js-progressiveMedia-canvas&amp;quot; width=&amp;quot;75&amp;quot; height=&amp;quot;16&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;figure style=&amp;quot;width: 603px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*D4-aOneUq6C4hrBOCnM84Q.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;603&amp;quot; height=&amp;quot;142&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*D4-aOneUq6C4hrBOCnM84Q.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Menggunakan Filter dalam Vue.js. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;p id=&amp;quot;bf51&amp;quot; class=&amp;quot;graf graf--p graf-after--figure&amp;quot;&amp;gt;
  &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;Filter &amp;lt;/em&amp;gt;harus mengembalikan nilai yang merupakan hasil dari data yang telah di transformasi ke bentuk yang diinginkan, contohnya bisa dilihat di gambar berikut :
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;98d0&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*BvnnbKYEQP6Wd92I63Zy9w.png&amp;quot; data-width=&amp;quot;598&amp;quot; data-height=&amp;quot;225&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;canvas class=&amp;quot;progressiveMedia-canvas js-progressiveMedia-canvas&amp;quot; width=&amp;quot;75&amp;quot; height=&amp;quot;27&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;figure style=&amp;quot;width: 598px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*BvnnbKYEQP6Wd92I63Zy9w.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;598&amp;quot; height=&amp;quot;225&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*BvnnbKYEQP6Wd92I63Zy9w.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Membuat Filter dalam Vue.js. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;p id=&amp;quot;676f&amp;quot; class=&amp;quot;graf graf--p graf-after--figure&amp;quot;&amp;gt;
  &amp;amp;#x1f449; &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;Computed&amp;lt;/strong&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;9869&amp;quot; class=&amp;quot;graf graf--p graf--hasDropCapModel graf--hasDropCap graf-after--p&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;graf-dropCap&amp;quot;&amp;gt;C&amp;lt;/span&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;omputed&amp;lt;/em&amp;gt; merupakan satu method yang akan dijalankan secara otomatis setiap kali variable/object yang ada dibawah function didalamnya mengalami perubahan. &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;Computed&amp;lt;/em&amp;gt; sendiri akan/harus mengembalikan suatu nilai yang bisa kita panggil lagi baik di html template maupun javascript.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;3f6b&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Balikan nilai dari &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;computed&amp;lt;/em&amp;gt; ini bersifat mirip dengan variabel di dalam &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;data &amp;lt;/em&amp;gt;yang telah dijelaskan pada Bagian 2 sebelumnya. Sehingga bila dilihat di contoh potongan kode pada gambar dibawah ini maka bisa dijelaskan bahwa kita punya variabel di dalam &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;data &amp;lt;/em&amp;gt;dengan nama “message” dan setiap perubahan yang terjadi pada nilainya maka otomatis akan men-&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;trigger&amp;lt;/em&amp;gt; suatu &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;computed&amp;lt;/em&amp;gt; dan akan menghasilkan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;data virtual&amp;lt;/em&amp;gt; dengan nama “reversedMessage&amp;amp;#8221;.
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;a096&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*LLXLOPoAq-2rbjflVtcNCQ.png&amp;quot; data-width=&amp;quot;603&amp;quot; data-height=&amp;quot;277&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;canvas class=&amp;quot;progressiveMedia-canvas js-progressiveMedia-canvas&amp;quot; width=&amp;quot;75&amp;quot; height=&amp;quot;33&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;figure style=&amp;quot;width: 603px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*LLXLOPoAq-2rbjflVtcNCQ.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;603&amp;quot; height=&amp;quot;277&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*LLXLOPoAq-2rbjflVtcNCQ.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Computed dalam Vue.js. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;p id=&amp;quot;fbf2&amp;quot; class=&amp;quot;graf graf--p graf-after--figure&amp;quot;&amp;gt;
  &amp;amp;#x1f449; &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;Watch&amp;lt;/strong&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;4c2f&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Watch memiliki fungsi yang hampir mirip dengan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;computed&amp;lt;/em&amp;gt; namun memiliki persepsi yang berbeda. Jika menggunakan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;computed&amp;lt;/em&amp;gt; maka kita ingin menghasilkan suatu data baru menggunakan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;function &amp;lt;/em&amp;gt;yang jika di dalamnya terjadi perubahan pada variabel nya maka akan dilakukan kalkulasi ulang untuk menghasilkan data baru tersebut, maka dengan menggunakan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;watch&amp;lt;/em&amp;gt;kita berarti ingin memantau perubahan dari suatu variabel yang terdapat didalam &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;Data&amp;lt;/em&amp;gt; dan setiap kali terjadi perubahan pada variabel yang kita pantau maka akan otomatis menjalankan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;function &amp;lt;/em&amp;gt;yang ada di dalam &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;watch&amp;lt;/em&amp;gt;bersangkutan. &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;Watch&amp;lt;/em&amp;gt; juga tidak mengembalikan nilai seperti yang diharuskan pada &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;computed&amp;lt;/em&amp;gt;.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;b6d6&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Contoh membuat watch bisa dilihat pada gambar berikut :
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;e3fa&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*Ka7d-PCJai4k3lbvcliSzw.png&amp;quot; data-width=&amp;quot;606&amp;quot; data-height=&amp;quot;237&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;canvas class=&amp;quot;progressiveMedia-canvas js-progressiveMedia-canvas&amp;quot; width=&amp;quot;75&amp;quot; height=&amp;quot;27&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;figure style=&amp;quot;width: 606px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*Ka7d-PCJai4k3lbvcliSzw.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;606&amp;quot; height=&amp;quot;237&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*Ka7d-PCJai4k3lbvcliSzw.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Watch dalam Vue.js. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;h4 id=&amp;quot;48ff&amp;quot; class=&amp;quot;graf graf--h4 graf-after--figure&amp;quot;&amp;gt;
  2. Mengenal Vue.js Plugins
&amp;lt;/h4&amp;gt;

&amp;lt;p id=&amp;quot;cf8e&amp;quot; class=&amp;quot;graf graf--p graf-after--h4&amp;quot;&amp;gt;
  &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;Vue.js Plugin&amp;lt;/em&amp;gt; pada dasarnya memiliki tujuan untuk menambahkan suatu fungsi yang bersifat global dan mudah untuk digunakan ulang. Contoh paling mudah adalah ketika kita di Vue.js sering kali menggunakan sintaks &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;Vue.use(MyPlugin)&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;, ini sebenarnya kita sedang ingin menggunakan suatu &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;plugin &amp;lt;/em&amp;gt;lewat sintaks ini. Semua logika dari &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;plugin &amp;lt;/em&amp;gt;sudah dibungkus di dalamnya sehingga kita bisa menggunakan dengan mudah dan tidak perlu susah-susah untuk inisialisasi ulang disetiap tempat yang membutuhkan melainkan cukup diinisialisasi di &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;root &amp;lt;/em&amp;gt;dari aplikasi kita.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;ecc6&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Sintaks dasar untuk membuat &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;plugin &amp;lt;/em&amp;gt;di dalam Vue.js bisa dilihat pada gambar dibawah ini :
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;2e1d&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*R46xLi5QU-S5urIHiaxSGg.png&amp;quot; data-width=&amp;quot;598&amp;quot; data-height=&amp;quot;535&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;canvas class=&amp;quot;progressiveMedia-canvas js-progressiveMedia-canvas&amp;quot; width=&amp;quot;75&amp;quot; height=&amp;quot;66&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;figure style=&amp;quot;width: 598px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*R46xLi5QU-S5urIHiaxSGg.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;598&amp;quot; height=&amp;quot;535&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*R46xLi5QU-S5urIHiaxSGg.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Plugins dalam Vue.js. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;p id=&amp;quot;a49b&amp;quot; class=&amp;quot;graf graf--p graf-after--figure graf--trailing&amp;quot;&amp;gt;
  Pengetahuan membuat &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;plugin &amp;lt;/em&amp;gt;di Vue.js ini akan sangat membantu apalagi bila membangun aplikasi yang lumayan kompleks dengan banyak komponen dan saling berkomunikasi antar mereka. Dengan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;plugin &amp;lt;/em&amp;gt;kita bisa membuat satu logika untuk semua tempat, seperti contoh kita membuat beberapa &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;filter &amp;lt;/em&amp;gt;yang bisa digunakan di semua komponen dalam aplikasi kita menggunakan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;plugin&amp;lt;/em&amp;gt;. Hal seperti ini tentu menghemat banyak waktu kita karena menghindarkan kita dari membuat duplikasi kode di banyak tempat.
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt;
&lt;/div&gt;&lt;/section&gt; &lt;section class=&quot;section section--body section--last&quot;&gt; 

&lt;div class=&quot;section-divider&quot;&gt;
  &lt;hr class=&quot;section-divider&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;section-content&quot;&gt;
  &lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
    &lt;p id=&quot;2000&quot; class=&quot;graf graf--p graf--leading&quot;&gt;
      Demikian sedikit sharing mengenai beberapa pengetahuan dasar di Vue.js kali ini.
    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p id=&amp;quot;6b1f&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Terima kasih dan semoga bermanfaat penjelasan singkatnya.
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt;
&lt;/div&gt;&lt;/section&gt;</description>
    </item>
    <item>
      <title>Pengetahuan Dasar Vue.js — Bagian 2</title>
      <link>https://mazipan.github.io/blogs/articles/pengetahuan-dasar-vue-js-bagian-2.md/</link>
      <pubDate>Fri, 10 Nov 2017 13:40:10 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/pengetahuan-dasar-vue-js-bagian-2.md/</guid>
      <author></author>
      <description>&lt;section class=&quot;section section--body section--first&quot;&gt; 

&lt;div class=&quot;section-content&quot;&gt;
  &lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
    &lt;p id=&quot;73d9&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;
      &lt;strong&gt;Pengetahuan Dasar Vue.js (&lt;a href=&quot;https://mazipanneh.com/blog/&quot;&gt;mazipanneh.com&lt;/a&gt;)&lt;/strong&gt; - Artikel ini merupakan seri lanjutan dari artikel yang sebelumnya sudah di publikasikan, baca semua seri Pengetahuan Dasar Vue.js :
    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ol class=&amp;quot;postList&amp;quot;&amp;gt;
  &amp;lt;li id=&amp;quot;7d0b&amp;quot; class=&amp;quot;graf graf--li graf-after--p&amp;quot;&amp;gt;
    &amp;lt;a class=&amp;quot;markup--anchor markup--li-anchor&amp;quot; href=&amp;quot;https://mazipanneh.com/blog/2017/11/pengetahuan-dasar-vue-js-bagian-1/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener&amp;quot; data-href=&amp;quot;https://medium.com/vuejs-id/pengetahuan-dasar-vue-js-bagian-1-88d02d57f859&amp;quot;&amp;gt;Pengetahuan Dasar Vue.js — Bagian 1&amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;2e00&amp;quot; class=&amp;quot;graf graf--li graf-after--li&amp;quot;&amp;gt;
    &amp;lt;strong&amp;gt;Pengetahuan Dasar Vue.js — Bagian 2(Anda disini)&amp;lt;/strong&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;09b6&amp;quot; class=&amp;quot;graf graf--li graf-after--li graf--trailing&amp;quot;&amp;gt;
    &amp;lt;a class=&amp;quot;markup--anchor markup--li-anchor&amp;quot; href=&amp;quot;https://mazipanneh.com/blog/2017/11/pengetahuan-dasar-vue-js-bagian-3/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener&amp;quot; data-href=&amp;quot;https://medium.com/vuejs-id/pengetahuan-dasar-vue-js-bagian-3-cc5de5213eb2&amp;quot;&amp;gt;Pengetahuan Dasar Vue.js — Bagian 3&amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;&amp;lt;figure style=&amp;quot;width: 720px&amp;quot; class=&amp;quot;wp-caption alignnone&amp;quot;&amp;gt;

&amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*w8B5xZW-IST7Agn2g7kSdA.jpeg&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;720&amp;quot; height=&amp;quot;365&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*w8B5xZW-IST7Agn2g7kSdA.jpeg&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Vue.js Illustrasi (sumber : https://fullstackfeed.com)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;p&amp;gt;
  &amp;amp;nbsp;
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/section&gt; &lt;section class=&quot;section section--body&quot;&gt; 

&lt;div class=&quot;section-content&quot;&gt;
  &lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
    &lt;p id=&quot;36ca&quot; class=&quot;graf graf--p graf--leading&quot;&gt;
      Kali ini kita akan melanjutkan dengan membahas hal dasar lainnya dalam Vue.js, silahkan siapkan kopi dan simak artikel berikut :
    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h4 id=&amp;quot;0ae1&amp;quot; class=&amp;quot;graf graf--h4 graf-after--p&amp;quot;&amp;gt;
  1. Mengenal File .vue
&amp;lt;/h4&amp;gt;

&amp;lt;p id=&amp;quot;d66b&amp;quot; class=&amp;quot;graf graf--p graf-after--h4&amp;quot;&amp;gt;
  Vue.js mengenalkan &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;single file component &amp;lt;/em&amp;gt;dimana kita bisa membuat satu file berekstensi .vue yang berisi html template, javascript function dan style layout. Sistem seperti ini terinspirasi dari JSX yang diadopsi di lingkungan React. File ini sangat memudahkan kita dalam mengatur struktur folder dalam suatu proyek karena tidak perlu lagi &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;foldering &amp;lt;/em&amp;gt;untuk memisahkan antar komponen.
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;df23&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*kXUoUokfkaSv0n2VuwCyLQ.png&amp;quot; data-width=&amp;quot;1246&amp;quot; data-height=&amp;quot;1370&amp;quot; data-action=&amp;quot;zoom&amp;quot; data-action-value=&amp;quot;1*kXUoUokfkaSv0n2VuwCyLQ.png&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;amp;nbsp;
    &amp;lt;/p&amp;gt;&amp;lt;figure style=&amp;quot;width: 720px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;

    &amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*kXUoUokfkaSv0n2VuwCyLQ.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;720&amp;quot; height=&amp;quot;791&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*kXUoUokfkaSv0n2VuwCyLQ.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Gambaran .vue file. Sumber (https://vuejs.org)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;p id=&amp;quot;adcc&amp;quot; class=&amp;quot;graf graf--p graf-after--figure&amp;quot;&amp;gt;
  Menggunakan file .vue juga sangat-sangat mudah. Seperti terlihat pada gambar di atas dimana kita bisa mendeklarasikan tiga tag untuk memisahkan masing-masing bagian yakni &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;template &amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;untuk html template, &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;script &amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;untuk menyisipkan kode javascript, dan &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;style &amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;untuk menyisipkan kode css maupun pre-processor nya.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;b83d&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Di dalam tag &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;template &amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;kita bisa menyisipkan kode layaknya html biasa tanpa ada sedikitpun yang berbeda begitu pula di dalam tag &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;script &amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;maupun &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;style&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;. Sedikit fitur dalam tag &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;style &amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;kita bisa menambahkan &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;scoped &amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;bila ingin menggunakan style yang di-isolasi dalam suatu komponen. kita juga bisa dengan mudah menambahkan &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;&amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;lang=scss &amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;bila ingin menggunakan SASS misalnya. File .vue ini tentu saja tidak bisa dibaca oleh browser, oleh karenanya jangan lupa untuk menambahkan Loader di webpack bila ingin menggunakan file .vue ini yang hebatnya lagi sudah di generate oleh Vue-CLI bila kita menggunakan scaffolding official Vue.js ini.
&amp;lt;/p&amp;gt;

&amp;lt;h4 id=&amp;quot;5bb6&amp;quot; class=&amp;quot;graf graf--h4 graf-after--p&amp;quot;&amp;gt;
  2. Life Cycle Vue.js Component
&amp;lt;/h4&amp;gt;

&amp;lt;p id=&amp;quot;6af1&amp;quot; class=&amp;quot;graf graf--p graf-after--h4&amp;quot;&amp;gt;
  Vue.js memiliki berbagai hook yang bisa kita gunakan sesuai dengan state di dalam life cycle nya, misalkan created adalah hook yang akan di eksekusi ketika sebuah komponen berhasil diinisialisasi. Masalahnya adalah kita tidak boleh sembarangan mengunakan hook ini, mesti paling tidak harus tahu hook yang tersedia dan posisinya dalam. Karena bila salah menggunakan hook maka sangat mungkin kode yang kita buat tidak menghasilkan hal yang seharusnya. Untuk lebih memahami masing-masing hook ini mari sama-sama kita lihat gambar dibawah ini :
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;363f&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*HT2uZUmdWYRt-_qqfarpYw.png&amp;quot; data-width=&amp;quot;1200&amp;quot; data-height=&amp;quot;3039&amp;quot; data-action=&amp;quot;zoom&amp;quot; data-action-value=&amp;quot;1*HT2uZUmdWYRt-_qqfarpYw.png&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;amp;nbsp;
    &amp;lt;/p&amp;gt;&amp;lt;figure style=&amp;quot;width: 720px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;

    &amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*HT2uZUmdWYRt-_qqfarpYw.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;720&amp;quot; height=&amp;quot;1823&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*HT2uZUmdWYRt-_qqfarpYw.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Vue.js 2 Life Cycle Diagram. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;h4 id=&amp;quot;e6c2&amp;quot; class=&amp;quot;graf graf--h4 graf-after--figure&amp;quot;&amp;gt;
  3. Data, Methods dan Props
&amp;lt;/h4&amp;gt;

&amp;lt;p id=&amp;quot;8d72&amp;quot; class=&amp;quot;graf graf--p graf-after--h4&amp;quot;&amp;gt;
  Ketika belajar Vue.js kita akan sering bergelut dengan data, methods dan juga props. Ketiganya merupakan hal dasar yang perlu kita ketahui kegunaannya masing-masing.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;5b14&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  &amp;amp;#x1f449; &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;Data&amp;lt;/strong&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;8051&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Data di dalam Vue.js merupakan sekumpulan variabel yang digunakan oleh html template dan dapat dimanipulasi dan dimanfaatkan oleh internal komponen masing-masing dan tidak dapat diakses oleh komponen lainnya. Jadi sebuah variabel di dalam suatu komponen Vue.js hanya akan berpengaruh terhadap komponen itu sendiri.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;e6df&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Data sendiri bisa didefinisikan menggunakan syntax seperti yang terlihat pada gambar berikut :
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;761f&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*uETZUVp3OXr-bTujzBzn7Q.png&amp;quot; data-width=&amp;quot;583&amp;quot; data-height=&amp;quot;320&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;amp;nbsp;
    &amp;lt;/p&amp;gt;&amp;lt;figure style=&amp;quot;width: 583px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;

    &amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*uETZUVp3OXr-bTujzBzn7Q.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;583&amp;quot; height=&amp;quot;320&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*uETZUVp3OXr-bTujzBzn7Q.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Data dalam Vue.js. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;p id=&amp;quot;6a65&amp;quot; class=&amp;quot;graf graf--p graf-after--figure&amp;quot;&amp;gt;
  &amp;amp;#x1f449; &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;Methods&amp;lt;/strong&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;3a10&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Methods merupakan opsi dalam Vue.js yang berupa object berisi function-function. Function ini sendiri akan memiliki berbagai tujuan yang berbeda-beda dan bervariasi baik memanipulasi data ataupun melakukan sebuah logika bisnis sebuah aplikasi. Function di dalam methods juga bisa jadi sebuah Event yang bisa dipanggil dengan mudah di bagian html template dari komponen yang bersangkutan. Function bisa merupakan sebuah pure function yang me-return suatu nilai maupun berupa void function yang tidak mengembalikan nilai apapun.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;2f3e&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Pembuatan methods bisa dilihat dalam gambar berikut :
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;b7e2&amp;quot; class=&amp;quot;graf graf--figure graf-after--p&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*lljpQonCxoURO1bXgl99fg.png&amp;quot; data-width=&amp;quot;584&amp;quot; data-height=&amp;quot;230&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;amp;nbsp;
    &amp;lt;/p&amp;gt;&amp;lt;figure style=&amp;quot;width: 584px&amp;quot; class=&amp;quot;wp-caption alignnone&amp;quot;&amp;gt;

    &amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*lljpQonCxoURO1bXgl99fg.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;584&amp;quot; height=&amp;quot;230&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*lljpQonCxoURO1bXgl99fg.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Methods dalam Vue.js. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;p id=&amp;quot;5f03&amp;quot; class=&amp;quot;graf graf--p graf-after--figure&amp;quot;&amp;gt;
  &amp;amp;#x1f449; &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;Props&amp;lt;/strong&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;d0d2&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Props merupakan parameter yang bisa dilempar oleh sebuah komponen kepada komponen lainnya. Props merupakan satu dari beberapa jalan untuk mendistribusikan data dari satu komponen ke komponen lainnya. Jadi Props di suatu komponen akan memiliki nilai yang sama dengan nilai dari data yang dilemparkan oleh komponen parent nya.
&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;198b&amp;quot; class=&amp;quot;graf graf--p graf-after--p&amp;quot;&amp;gt;
  Gambar dibawah merupakan contoh pembuatan Props dengan beberapa variasinya, sebagai berikut :
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;5a67&amp;quot; class=&amp;quot;graf graf--figure graf-after--p graf--trailing&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspectRatioPlaceholder-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&amp;quot; data-image-id=&amp;quot;1*FQp8RmMGnDlxbw16gSp-rA.png&amp;quot; data-width=&amp;quot;586&amp;quot; data-height=&amp;quot;424&amp;quot; data-scroll=&amp;quot;native&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;amp;nbsp;
    &amp;lt;/p&amp;gt;&amp;lt;figure style=&amp;quot;width: 586px&amp;quot; class=&amp;quot;wp-caption aligncenter&amp;quot;&amp;gt;

    &amp;lt;img class=&amp;quot;progressiveMedia-image js-progressiveMedia-image&amp;quot; src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*FQp8RmMGnDlxbw16gSp-rA.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;586&amp;quot; height=&amp;quot;424&amp;quot; data-src=&amp;quot;https://cdn-images-1.medium.com/max/720/1*FQp8RmMGnDlxbw16gSp-rA.png&amp;quot; /&amp;gt;&amp;lt;figcaption class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;Props dalam Vue.js. sumber (https://vuejs.org/)&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption class=&amp;quot;imageCaption&amp;quot;&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt;&lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt;
&lt;/div&gt;&lt;/section&gt; &lt;section class=&quot;section section--body section--last&quot;&gt; 

&lt;div class=&quot;section-divider&quot;&gt;
  &lt;hr class=&quot;section-divider&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;section-content&quot;&gt;
  &lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
    &lt;p id=&quot;3ee0&quot; class=&quot;graf graf--p graf--leading&quot;&gt;
      Demikian sedikit penjelasan tentang beberapa hal dasar di Vue.js.
    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h4 id=&amp;quot;22a3&amp;quot; class=&amp;quot;graf graf--h4 graf-after--p&amp;quot;&amp;gt;
  Lanjut di Bagian 3 ya !!! Stay tuned dan follow blog ini &amp;amp;#x1f605;
&amp;lt;/h4&amp;gt;

&amp;lt;p id=&amp;quot;ed57&amp;quot; class=&amp;quot;graf graf--p graf-after--h4&amp;quot;&amp;gt;
  Terima kasih dan semoga bermanfaat penjelasan singkatnya.
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;  &lt;/div&gt;
&lt;/div&gt;&lt;/section&gt;</description>
    </item>
    <item>
      <title>Pengetahuan Dasar Vue.js — Bagian 1</title>
      <link>https://mazipan.github.io/blogs/articles/pengetahuan-dasar-vue-js-bagian-1.md/</link>
      <pubDate>Fri, 10 Nov 2017 13:39:05 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/pengetahuan-dasar-vue-js-bagian-1.md/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*TLIHVxC4s25LX9Fls8QZrA.png&quot; alt=&quot;Vuejs&quot; width=&quot;800&quot; height=&quot;243&quot; /&gt; &lt;em&gt;Sumber : &lt;a href=&quot;https://vuejs.id/&quot;&gt;https://vuejs.id/&lt;/a&gt;&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Artikel ini merupakan serial artikel, baca semua seri Pengetahuan Dasar Vue.js :&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Pengetahuan Dasar Vue.js — Bagian 1(Anda disini)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/11/pengetahuan-dasar-vue-js-bagian-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pengetahuan Dasar Vue.js — Bagian 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/11/pengetahuan-dasar-vue-js-bagian-3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pengetahuan Dasar Vue.js — Bagian 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vue.js (&lt;a href=&quot;https://vuejs.org/&quot;&gt;https://vuejs.org/&lt;/a&gt;) seperti di websitenya yang membawa tagline “The Progressive JavaScript Framework” merupakan javascript framework yang membantu kita dalam membuat sebuah website/aplikasi yang membutuhkan banyak interaksi di dalamnya, biasanya berupa Single Page Application. Vue.js belakangan memiliki gaung yang lumayan kencang di kalangan web developer maupun Javascript developer karena kemudahan dalam mempelajari dan mengimplementasikan di dalam website/aplikasi kita.&lt;/p&gt;
&lt;p&gt;Pada tulisan kali ini kita akan membahas beberapa pengetahuan dasar dan beberapa istilah yang akan sering kita temui jika belajar Vue.js, semoga pembahasan ini akan membantu saya dan kita yang sedang belajar framework ini.
Langsung saja, silahkan disimak beberapa poin pembahasan berikut :&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Mengenai Vue Component&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue.js seperti framework Javascript modern lainnya juga mengusung konsep component based dimana setiap blok layout dianggap sebagai komponen yang independen dan memiliki style serta fungsi sendiri yang terisolir sehingga mudah untuk digunakan ulang oleh setiap halaman website kita. Setiap komponen tersebut nantinya akan kita susun menjadi blok-blok yang saling terkait dan membangun sebuah tampilan utuh sebuah halaman website.&lt;/p&gt;
&lt;p&gt;Menggunakan komponen berarti kita akan membuat custom tag di HTML template kita, secara mudah komponen di Vue.js bisa dibuat sesederhana kode berikut :&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”602”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*UrS8uYY_ud6HnUKVbgPaFg.png&quot; alt=&quot;Mendefinisikan Vue.js Component&quot; width=&quot;602&quot; height=&quot;116&quot; /&gt; &lt;em&gt;Mendefinisikan Vue.js Component&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Dari pendefinisian diatas kita bisa menggunakan komponen tersebut dalam HTML template dengan cara yang tak kalah mudah, yakni seperti berikut :&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”602”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*VE7izWNyCw8OwS4ECyxGGA.png&quot; alt=&quot;Menggunakan Vue.js Component dalam HTML Template&quot; width=&quot;602&quot; height=&quot;116&quot; /&gt; &lt;em&gt;Menggunakan Vue.js Component dalam HTML Template&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Data Binding dalam Vue.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue.js memang sangat terinspirasi dari AngularJS dalam hal data binding ini, itu mengapa sangat mudah untuk belajar Vue.js bilamana kita pernah belajar AngularJS sebelumnya. Bila di AngularJS kita mengenal ng-bind maka di Vue.js kita mengenal v:bind, berikut beberapa data binding dalam Vue.js :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x1f449; 1. Binding data ke dalam view&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue.js menggunakan syntax {{ }} seperti terlihat pada gambar diatas, dengan syntax tersebut berarti kita ingin menampilkan sebuah data yang ada dalam Javascript kita ke dalam HTML template.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”602”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*24isMnRrGBh8ZLkAnkxIeA.png&quot; alt=&quot;Binding data ke View&quot; width=&quot;602&quot; height=&quot;116&quot; /&gt; &lt;em&gt;Binding data ke View&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x1f449; 2. Attribute Binding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seperti disebut sebelumnya, di Vue.js kita menggunakan v-bind untuk melakukan binding ke dalam HTML. Maka jika kita melihat ke gambar diatas berarti kita ingin menambahkan attribute title ke dalam span dengan menggunakan data dinamis dari javascript. v-bind pada dasarnya bisa diterapkan pada berbagai attribute di HTML sehingga kita mungkin akan menemui banyak variasi v-bind ini seperti v-bind:src, v-bind:class, v-bind:alt, dan lain sebagainya. 
Vue.js juga menyediakan shortcut untuk kita mendefinisikan v-bind di dalam HTML yakni dengan menghilangkan bagian v-bind nya, jadi kita bisa menggunakan shortcut seperti :title, :src, :class, :alt dan sebagainya.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”602”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*mSVRJZ1aNZc4CAh3P697Og.png&quot; alt=&quot;Attribute binding di Vuejs&quot; width=&quot;602&quot; height=&quot;116&quot; /&gt; &lt;em&gt;Attribute binding di Vuejs&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x1f449; 3. Two way data binding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seperti AngularJS, Vue.js juga menyediakan fitur two way data binding yang artinya setiap perubahan pada Javascript akan berpengaruh pada view HTML dan sebaliknya perubahan pada HTML view pun akan mempengaruhi atau mengubah nilai di Javascript nya.
Di Vue.js kita menggunakan v-model untuk melakukan two way binding yang biasanya sering ditempelkan pada sebuah elemen input HTML, seperti gambar berikut :&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”602”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*gR8ZMoqTliJLwY7V-3prZA.png&quot; alt=&quot;Contoh two-way data binding di Vuejs&quot; width=&quot;602&quot; height=&quot;116&quot; /&gt; &lt;em&gt;Contoh two-way data binding di Vuejs&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#x1f449; 4. Event binding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Untuk memanggil suatu event yang telah kita buat di Javascript, Vue.js menggunakan v-on di dalam HTML template diikuti hook event yang akan ditambahkan. Jadi kita bisa menggunakan berbagai variasi v-on seperti v-on:click, v-on:blur, v-on:focus, v-on:keyup dan sebagainya.&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”602”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*LhxPyR8mv0Cf5zjPf0XlRQ.png&quot; alt=&quot;Event binding di Vuejs&quot; width=&quot;602&quot; height=&quot;116&quot; /&gt; &lt;em&gt;Event binding di Vuejs&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Vue.js menyediakan juga shortcut untuk melakukan event binding ini yakni menggunakan @, sehingga kita bisa menyingkat seperti : @click, @blur,@focus dan sebagainya.&lt;/p&gt;
&lt;p&gt;….&lt;/p&gt;
&lt;p&gt;Masih akan ada beberapa hal yang ingin saya bahas di judul ini, namun sepertinya akan saya pecah saja kedalam beberapa bagian agar lebih ringan saat membacanya.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Tips kolaborasi Back-end x Front-end untuk Meningkatkan Produktivitas</title>
      <link>https://mazipan.github.io/blogs/articles/tips-kolaborasi-back-end-x-front-end-untuk-meningkatkan-produktivitas.md/</link>
      <pubDate>Sun, 13  Aug 2017 14:20:54 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/tips-kolaborasi-back-end-x-front-end-untuk-meningkatkan-produktivitas.md/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;strong&gt;Tips kolaborasi Back-end x Front-end untuk Meningkatkan Produktivitas&lt;/strong&gt; - &lt;em&gt;Back-end programmer&lt;/em&gt; adalah sebutan bagi para &lt;em&gt;programmer&lt;/em&gt; yang bergelut dengan berbagai logika penyajian data dari basis data maupun third party vendor sampai menghasilkan format data yang diinginkan yang biasanya dalam bentuk akhir xml ataupun json data. &lt;em&gt;Front-end programmer&lt;/em&gt; sendiri merupakan sebutan bagi para &lt;em&gt;programmer&lt;/em&gt; yang memiliki peranan untuk menyajikan visualisasi dari data yang diberikan oleh &lt;em&gt;Back-end programmer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/frontend-x-backend-mazipanneh-1.png&quot; alt=&quot;Frontend x Backend&quot;&gt;&lt;/p&gt;
&lt;p&gt;Perbedaan &lt;em&gt;skillset&lt;/em&gt; yang dibutuhkan untuk masing-masing spesialisasi posisi &lt;em&gt;programmer&lt;/em&gt; ini yang menyebabkan industri secara sadar maupun tidak sadar seringkali memisahkan kedua posisi tersebut sehingga dalam dunia programming hal ini seperti dua jurusan bagi para programmer untuk menentukan perminatan mereka. &lt;em&gt;Programmer&lt;/em&gt; yang memiliki minat dengan sisi &lt;em&gt;Back-end&lt;/em&gt; biasanya akan banyak fokus dengan hal-hal yang berkaitan dengan Back-end seperti &lt;em&gt;database_, _optimization response speed_, _caching_, _generate reporting&lt;/em&gt; dan banyak hal lainnya. &lt;em&gt;Programmer&lt;/em&gt; yang memiliki ketertarikan dengan &lt;em&gt;Front-end&lt;/em&gt; juga sebaliknya biasanya akan meninggalkan hal-hal yang berkaitan dengan &lt;em&gt;Back-end&lt;/em&gt; dan fokus dengan berbagai teknologi yang mendukung untuk visualisasi tampilan.&lt;/p&gt;
&lt;p&gt;Pada dunia nyata, kedua posisi spesialisasi dalam programming ini akan sangat sering bekerja bersama untuk sama-sama menyelesaikan sebuah projek sampai selesai. Dan parahnya ada banyak &lt;em&gt;programmer&lt;/em&gt; yang mengeluh karena hal ini, mereka saling salah-menyalahkan ketika sebuah projek atau produk gagal mereka selesaikan tepat pada waktunya. Orang &lt;em&gt;Back-end&lt;/em&gt; akan menyalahkan bagian &lt;em&gt;Front-end&lt;/em&gt; karena mereka telah menyelesaikan bagian mereka dan orang &lt;em&gt;Front-end&lt;/em&gt; akan menyalahkan bagian Back-end karena terlalu lama menyelesaikan pekerjaan mereka sehingga membuat mundur starting point bagi mereka untuk memulai bekerja.&lt;/p&gt;
&lt;p&gt;Pada tulisan kali ini saya akan coba berbagi tips bagaimana berkolaborasi antara &lt;em&gt;Back-end&lt;/em&gt; dengan &lt;em&gt;Front-end&lt;/em&gt; agar meningkatkan produktivitas dari keduanya bagi sebuah tim projek maupun produk berdasarkan pengalaman saya selama di Blibli.com, berikut beberapa diantaranya :&lt;/p&gt;
&lt;h2 id=&quot;1-back-end-x-front-end-sama-sama-memahami-bussiness-flow&quot;&gt;1. Back-end x Front-end sama-sama memahami bussiness flow&lt;/h2&gt;
&lt;p&gt;Memang logika &lt;em&gt;bussiness flow&lt;/em&gt; lebih banyak dikerjakan oleh orang &lt;em&gt;Back-end&lt;/em&gt; dengan berbagai data yang diolah, namun pendapat bahwa orang &lt;em&gt;Front-end&lt;/em&gt; bisa tiba-tiba datang di tengah-tengah projek yang sedang berjalan tanpa mengikuti berbagai &lt;em&gt;meeting&lt;/em&gt; di awal projek yang biasanya akan membahas berbagai &lt;em&gt;bussiness flow&lt;/em&gt; dan juga berbagai requirement adalah jelas-jelas salah.&lt;/p&gt;
&lt;p&gt;Saya sendiri adalah salah satu &lt;em&gt;Front-end developer&lt;/em&gt; yang berperan seperti tentara bayaran di Blibli.com, sering berpindah-pindah dari satu team ke team lain, dari satu projek ke projek lainnya. Beberapa kesempatan saya bisa mengikuti sebuah projek dari awal _kick-off_, ini kondisi ideal dan tidak ada masalah. Namun di beberapa kesempatan saya juga harus terlambat bergabung dengan sebuah projek yang artinya melewatkan fase penting seperti yang disebutkan di awal tadi. Ini bukanlah kondisi ideal dan sangat besar kemungkinan bahwa produktivitas saya tidak bisa sebagus ketika berada di kondisi ideal.&lt;/p&gt;
&lt;p&gt;Jadi tips pertama dari saya adalah pastikan semua anggota team baik itu &lt;em&gt;Back-end&lt;/em&gt; maupun &lt;em&gt;Front-end&lt;/em&gt; memiliki pemahaman yang sama dan cukup mengenai berbagai seluk-beluk sebuah projek yang dikerjakan, mulai dari latar belakang, tujuan yang ingin dicapai, &lt;em&gt;bussiness flow_, _requirement&lt;/em&gt; dan lain-lain. Dengan begini komunikasi akan lebih berjalan efektif dan tepat sasaran antara &lt;em&gt;Back-end&lt;/em&gt; x &lt;em&gt;Front-end&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;2-pembuatan-kontrak-api-sebelum-memulai-pekerjaan&quot;&gt;2. Pembuatan kontrak API sebelum memulai pekerjaan&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/frontend-x-backend-mazipanneh-2.jpg&quot; alt=&quot;Frontend x Backend&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Back-end&lt;/em&gt; yang memproduksi API dan tidak memiliki dokumentasi mengenai apa yang dia kerjakan adalah awal dari segala malapetaka kekacauan. Dokumentasi API juga bukan sesuatu yang dibuat di akhir setelah API tersebut jadi. Dokumentasi yang saya maksud juga bukan dokumentasi yang memanfaatkan &lt;em&gt;tools&lt;/em&gt; untuk men-&lt;em&gt;generate_-nya seperti &lt;strong&gt;swagger&lt;/strong&gt; dan teman-teman. Dokumentasi yang diinginkan disini adalah sebuah kontrak perjanjian yang disepakati oleh bagian _Back-end&lt;/em&gt; dan &lt;em&gt;Front-end&lt;/em&gt; di awal sebelum pekerjaan dimulai.&lt;/p&gt;
&lt;p&gt;Pada fase ini orang Back-end dan Front-end harus duduk bersama untuk sama-sama merumuskan API apa saja yang tersedia, seperti apa bentuk request yang dibutuhkan, serta seperti apa bentuk &lt;em&gt;response&lt;/em&gt; yang akan dikembalikan. Kontrak ini akan dijadikan panduan bagi Back-end dan Front-end untuk mengerjakan pekerjaan mereka, setiap perubahan yang terjadi di tengah projek pun harus diinformasikan dan dengan memperbarui kontrak yang telah dibuat sebelumnya.&lt;/p&gt;
&lt;p&gt;Jadi tips kedua, bila di tempat Anda sebuah API hanya dirumuskan oleh orang &lt;em&gt;Back-end&lt;/em&gt; tanpa ada kontrak dengan orang &lt;em&gt;Front-end&lt;/em&gt; maka sudah saatnya mencoba hal ini. &lt;em&gt;Back-end&lt;/em&gt; dan &lt;em&gt;Front-end&lt;/em&gt; harus sama-sama terlibat dalam merumuskan API dan membuat kesepakatan segala bentuk &lt;em&gt;request-response&lt;/em&gt; yang akan dibuat.&lt;/p&gt;
&lt;h2 id=&quot;3-front-end-membuat-api-mocking&quot;&gt;3. Front-end membuat API mocking&lt;/h2&gt;
&lt;p&gt;Pada tahap ini kontrak API sudah dibuat dan orang &lt;em&gt;Back-end&lt;/em&gt; akan bekerja untuk menghasilkan API seperti yang telah disepakati. Pada tahapan ini orang &lt;em&gt;Front-end&lt;/em&gt; juga perlu mengimplementasikan satu cara agar tidak perlu menunggu suatu API jadi dan melakukan pemanggilan API secara nyata ke sebuah &lt;em&gt;End-Point&lt;/em&gt; API yang dibuat oleh &lt;em&gt;Back-end&lt;/em&gt;. Salah satu caranya adalah melakukan &lt;em&gt;mocking&lt;/em&gt; terhadap semua API yang terdapat pada kontrak di awal, dalam bahasa lainnya bahwa orang &lt;em&gt;Front-end&lt;/em&gt; perlu membuat suatu simulasi agar setiap &lt;em&gt;End-Point&lt;/em&gt; yang dipanggil pada saat &lt;em&gt;development&lt;/em&gt; tidak langsung mengarah ke &lt;em&gt;Back-end&lt;/em&gt; melainkan ke sebuah data tiruan yang menyerupai &lt;em&gt;Back-end&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tahap &lt;em&gt;mocking&lt;/em&gt; ini menjadi krusial apalagi dengan timeline projek yang singkat, karena bisa memangkas banyak waktu menunggu sebuah API jadi, &lt;em&gt;free bug_, dan siap digunakan. Dengan melakukan _mocking&lt;/em&gt; maka orang Front-end bisa berjalan beriringan dengan pekerjaan orang Back-end tanpa harus ada saling tunggu satu sama lain.&lt;/p&gt;
&lt;p&gt;Jadi tips ketiga adalah meng-&lt;em&gt;improve&lt;/em&gt; metode pekerjaan orang &lt;em&gt;Front-end&lt;/em&gt; agar bisa melakukan &lt;em&gt;mocking&lt;/em&gt; terhadap API yang dibuat oleh Back-end.&lt;/p&gt;
&lt;h2 id=&quot;4-back-end-ikut-terlibat-dalam-front-end-finishing&quot;&gt;4. Back-end ikut terlibat dalam Front-end finishing&lt;/h2&gt;
&lt;p&gt;Sebenarnya hal ini bisa dihindarkan jika saja pada proses pembuatan kontrak API semua hal nya sudah jelas terdeskripsikan dengan baik namun ada kalanya sebuah kontrak API tidak mampu menjelaskan fungsinya dan bagian-bagian di dalamnya secara detail sehingga yang terjadi adalah kesalahan implementasi dari &lt;em&gt;Front-end&lt;/em&gt; terhadap API yang sudah dibuat. Seperti contoh kasus sederhana saja, sebuah API akan memproduksi 3 &lt;em&gt;field&lt;/em&gt; yakni &lt;em&gt;price_, _discount_, dan _total&lt;/em&gt;. Namun pada kontrak tidak pernah dijelaskan &lt;em&gt;field&lt;/em&gt; &lt;em&gt;price&lt;/em&gt; itu harga yang seperti apa, harga yang sebelum &lt;em&gt;discount&lt;/em&gt; atau setelah &lt;em&gt;discount&lt;/em&gt; begitu juga dengan &lt;em&gt;field&lt;/em&gt; &lt;em&gt;total_, _total&lt;/em&gt; yang dimaksud itu &lt;em&gt;total&lt;/em&gt; yang seperti apa.&lt;/p&gt;
&lt;p&gt;Orang &lt;em&gt;Back-end&lt;/em&gt; adalah salah satu yang paling paham dengan fungsi dari masing-masing &lt;em&gt;field&lt;/em&gt; yang ada di dalam API karena mereka yang tau &lt;em&gt;field&lt;/em&gt; itu didapatkan dari mana. Maka dari itu keterlibatan &lt;em&gt;Back-end&lt;/em&gt; dalam &lt;em&gt;finishing&lt;/em&gt; suatu &lt;em&gt;Front-end&lt;/em&gt; kerapkali dibutuhkan baik sebagai orang yang menjelaskan berbagai kesimpangsiuran data ataupun bisa langsung terjun untuk menempelkan data pada tempat yang sudah disediakan oleh bagian Front-end.&lt;/p&gt;
&lt;p&gt;Jadi tips ketiga adalah mengurangi ke-&lt;em&gt;haram_-an orang _Back-end&lt;/em&gt; untuk memegang sedikit bagian di tahap &lt;em&gt;finishing&lt;/em&gt; &lt;em&gt;Front-end&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;5-komunikasi-back-end-x-front-end&quot;&gt;5. Komunikasi Back-end x Front-end&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/frontend-x-backend-mazipanneh-3.jpeg&quot; alt=&quot;Frontend x Backend&quot;&gt;&lt;/p&gt;
&lt;p&gt;Bagian terkahir namun bisa menjadi kunci dari semua hal di atas adalah komunikasi. Komunikasi yang baik antara Back-end dan Front-end adalah mutlak menjadi keharusan apalagi dalam projek dengan &lt;em&gt;timeline&lt;/em&gt; yang singkat. Segala issue yang melibatkan &lt;em&gt;cross responsibility&lt;/em&gt; harus secepatnya di komunikasikan untuk mencari solusi terbaik. Duduk dalam tempat yang berdekatan mungkin menjadi solusi bilamana &lt;em&gt;online communication&lt;/em&gt; belum bisa berjalan dengan baik di perusahaan Anda.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Chemistry&lt;/em&gt; antara Back-end x Front-end di dalam satu team perlu dibangun setiap bagian memiliki kepemilikan terhadap terhadap sebuah projek, ketika sebuah projek &lt;em&gt;delay&lt;/em&gt; itu artinya keseluruhan team gagal dan bukan kesalahan satu bagian saja, setiap bagian memiliki peranan masing-masing dan tidak ada salahnya untuk &lt;em&gt;cross-function&lt;/em&gt; untuk saling membantu menyelesaikan berbagai masalah dalam satu projek.&lt;/p&gt;
&lt;p&gt;Demikian sedikit hal yang bisa saya bagikan dalam artikel kali ini, silahkan ambil yang baik-baik dan tinggalkan hal-hal yang dirasa merugikan dalam artikel ini.&lt;/p&gt;
&lt;p&gt;Semoga bermanfaat &amp;#x1f44d;&amp;#x1f44d;&amp;#x1f44d;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Jurus Jitu Pencitraan buat Para Programmer</title>
      <link>https://mazipan.github.io/blogs/articles/jurus-jitu-pencitraan-buat-para-programmer.md/</link>
      <pubDate>Thu, 10  Aug 2017 14:23:24 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/jurus-jitu-pencitraan-buat-para-programmer.md/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;strong&gt;Jurus Jitu Pencitraan buat Para Programmer&lt;/strong&gt; &lt;em&gt;- Programmer, Developer, Software Engineer _atau istilah lain yang punya artian hampir sama beberapa waktu belakangan memang menjadi salah satu profesi yang _hype&lt;/em&gt; sekali. Hal ini juga sejalan dengan sangat berkembangnya startup yang bergerak di bidang &lt;em&gt;hiring&lt;/em&gt; karyawan atau &lt;em&gt;head hunter&lt;/em&gt; yang beberapa diantaranya bahkan berani men-spesialisasikan diri mereka dalam untuk membantu mencarikan karyawan khusus di bidang IT seperti contohnya adalah beberapa profesi yang saya sebut di depan.&lt;/p&gt;
&lt;p&gt;Dengan semakin dikenalnya profesi tersebut berarti juga akan meningkatkan minat banyak orang lain untuk ikut atau sekedar ikut-ikutan terjun dan belajar untuk menekuni profesi tersebut. Meskipun diakui bahwa tidak gampang untuk serius menekuni profesi di bidang seperti IT namun dengan semakin tingginya minat di bidang IT maka secara kasar kita bisa bilang bahwa persaingan untuk mendapatkan satu pekerjaan juga semakin tinggi. Dan dengan semakin tingginya persaingan maka kita juga perlu mempersiapkan beberapa hal agar tidak tenggelam oleh banyaknya kompetitor yang siap menikung Anda kapan saja.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dalam artikel ini saya akan membagikan beberapa jurus untuk melakukan pencitraan bagi kalian para programmer di luar sana. Kenapa harus pencitraan ? Karena yang menilai kita adalah orang lain, dan baik buruknya​ penilaian orang lain terhadap kita itu tergantung dari citra kita di mata orang tersebut. Berikut beberapa jurus yang bisa saya bagikan kepada teman-teman sekalian :&lt;/p&gt;
&lt;h3 id=&quot;1-menulis-figure-style-width-540px-class-wp-caption-alignnone-&quot;&gt;1. Menulis&lt;figure style=&quot;width: 540px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*y9zK7GvV2Z8pzVzNSJu1Sw.jpeg&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;296&quot; data-src=&quot;https://cdn-images-1.medium.com/max/800/1*y9zK7GvV2Z8pzVzNSJu1Sw.jpeg&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Sumber : inspirasi.co&lt;/figcaption&gt;&lt;/figure&gt; &lt;/p&gt;
&lt;p&gt;Menulis merupakan langkah pertama yang bisa kalian coba untuk melakukan pencitraan diri kalian di mata banyak orang di luar sana. Tulisan seseorang memang seringkali merefleksikan pengetahuan seseorang, namun fakta bahwa sebuah tulisan adalah merupakan buah pemikiran yang tidak datang dalam sekejap mata dan bisa dibuat kosep yang matang adalah peluang bagi kita untuk menjadikan tulisan-tulisan yang kita buat/tulis bisa lebih berkesan dan bermanfaat bagi banyak orang.&lt;/p&gt;
&lt;p&gt;Menulis bisa meluangkan apa yang telah kita ketahui untuk dibagikan kepada orang lain. Menulis bisa juga menjadi catatan bagi diri sendiri mengenai apa yang telah kita pelajari dan mungkin suatu saat akan berguna bilamana kita lupa akan hal tersebut. Menulis tidak harus mengambil tema yang begitu disukai oleh orang, menulis bisa dimulai dari hal yang kita sukai dan kita ketahui.&lt;/p&gt;
&lt;p&gt;Mengenai menulis ini sendiri saya juga telah membuat tulisan terpisah yang menjelaskan kenapa seorang programmer menurut saya perlu untuk meluangkan waktu untuk menulis. Bisa dibaca &lt;a href=&quot;https://medium.com/@mazipanneh/why-writing-is-worth-for-programmer-20694b18efd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;2-sharing-kode-figure-style-width-740px-class-wp-caption-alignnone-&quot;&gt;2. Sharing Kode&lt;figure style=&quot;width: 740px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*s6VlBC8UicoYEywf8RdrOA.gif&quot; alt=&quot;&quot; width=&quot;740&quot; height=&quot;284&quot; data-src=&quot;https://cdn-images-1.medium.com/max/800/1*s6VlBC8UicoYEywf8RdrOA.gif&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Github Activity Stream&lt;/figcaption&gt;&lt;/figure&gt; &lt;/p&gt;
&lt;p&gt;Sebagai programmer terkadang menulis sebuah artikel bukanlah hal yang mudah, menulis kata demi kata untuk menjadi sebuah artikel yang enak dibaca merupakan hal yang sulit bagi orang seperti kita. Solusi bagi kalian yang malas menulis artikel adalah tulis sebuah kode untuk kemudian dibagikan ke khalayak ramai. Menulis kode tentunya lebih mudah bagi kita yang seorang programmer karena sudah merupakan aktivitas yang dikerjakan setiap hari.&lt;/p&gt;
&lt;p&gt;Beberapa programmer bisa terlihat skill nya dengan melihat kode yang dia tulis, jadi mulailah membuat kode sederhana kalian sendiri untuk kemudian dibagikan dan menerima berbagai kritik dan saran mengenai kesalahan dan pengembangan kode tersebut. Hal-hal seperti itu harus dilakukan secara bertahap dan terus menerus, karena mereka yang rajin berbagi kode-kode keren pun pernah mengalami masa-masa awal yang cupu.&lt;/p&gt;
&lt;h3 id=&quot;3-bergabung-dengan-komunitas-figure-style-width-800px-class-wp-caption-alignnone-&quot;&gt;3. Bergabung Dengan Komunitas&lt;figure style=&quot;width: 800px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*BdOI5H4slAF6n-IL2nobXQ.jpeg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;533&quot; data-src=&quot;https://cdn-images-1.medium.com/max/800/1*BdOI5H4slAF6n-IL2nobXQ.jpeg&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Dokumentasi di salah satu event PHP Indonesia&lt;/figcaption&gt;&lt;/figure&gt; &lt;/p&gt;
&lt;p&gt;Komunitas merupakan perkumpulan dari banyak orang yang berasal dari berbagai latar belakang namun memiliki kecintaan dan minat dalam hal yang sama. Itu mengapa ikut dalam sebuah komunitas merupakan hal baik bagi kalian programmer, karena kalian bisa bertemu dengan banyak orang yang bergelut di hal yang sama dengan kalian. Di dalam komunitas kalian bisa bertemu dan belajar dari banyak orang yang lebih dahulu dan lebih hebat dalam segala hal daripada kalian, di dalam komunitas pun kalian bisa berbagi dengan mereka yang baru saja belajar mengenai apa yang sudah lebih dahulu kalian pelajari. Komunitas hidup karena orang-orang didalamnya yang senantiasa saling berbagi dan tidak terus-menerus menunggu untuk dibagikan sesuatu. Jadi bila ingin menjadi bagian yang baik dari suatu komunitas maka pastikan juga kalian mengambil peran yang seimbang antara belajar dan mengajar, antara berbagi dan dibagikan, antara menerima dan memberi. Dengan begitu keberlangsungan sebuah komunitas bisa terus terjaga dan regenerasi bisa tetap berjalan dengan baik.&lt;/p&gt;
&lt;h3 id=&quot;4-berdiri-diantara-mereka-figure-style-width-800px-class-wp-caption-alignnone-&quot;&gt;4. Berdiri Diantara Mereka&lt;figure style=&quot;width: 800px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*6r-eIvi9Z4oaEnDXat6VbA.jpeg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;533&quot; data-src=&quot;https://cdn-images-1.medium.com/max/800/1*6r-eIvi9Z4oaEnDXat6VbA.jpeg&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Dokumentasi Surabaya Developer Day 2017&lt;/figcaption&gt;&lt;/figure&gt; &lt;/p&gt;
&lt;p&gt;Salah satu jurus yang paling ampuh untuk melakukan sebuah pencitraan adalah menjadi berbeda dan menonjol diantara banyak orang yang ada. Ya, kita semua bisa jadi memiliki &lt;em&gt;skillset&lt;/em&gt; yang sama namun tentu saja mereka yang mau menonjol dibandingkan teman lainnya akan dianggap lebih bisa. Namun hal ini harus dilakukan dengan bertahap dan hati-hati karena bila salah mengambil tempat bukannya menjadi lebih menonjol malah sebaliknya. Memilih audience yang tepat juga menjadi syarat mutlak terutama bagi kita yang baru saja memulai untuk melakukan cara-cara ini. Mulai dari teman terdekat dan dalam jumlah yang sangat sedikit tentu akan sangat membantu kita dalam mengasah kemampuan untuk mau berdiri diantara mereka.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Berdiri diantara mereka&lt;/strong&gt; sebenarnya tidak harus selalu diartikan secara harafiah juga, karena hal ini sebenarnya hanya kiasan bahwa kita mesti mau mengambil peran yang mungkin orang lain masih memikirkan untuk mengambilnya. Kita bisa mengambil peran untuk menjadi yang terdepan ketika orang lain masih merasa sungkan untuk mengambil peran tersebut. Istilah ini bisa diterapkan ke berbagai hal dan tidak harus selalu berarti berdiri untuk menyampaikan materi. Kita bisa saja mengambil peran untuk aktif di sebuah komunitas sebagai seorang yang mengatur dan membantu jalannya sebuah event (_&lt;em&gt;yang kita tahu tidak semua orang mau_), dan banyak peran lain yang bisa kita ambil untuk bisa *&lt;/em&gt;berdiri diantara mereka**.&lt;/p&gt;
&lt;h3 id=&quot;5-silaturahmi-figure-style-width-720px-class-wp-caption-alignnone-&quot;&gt;5. Silaturahmi&lt;figure style=&quot;width: 720px&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*6icTBOtLoaLr39JZjcKonQ.jpeg&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;720&quot; data-src=&quot;https://cdn-images-1.medium.com/max/800/1*6icTBOtLoaLr39JZjcKonQ.jpeg&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Dokumentasi Geek Camp 2017&lt;/figcaption&gt;&lt;/figure&gt; &lt;/p&gt;
&lt;p&gt;Programmer merupakan dunia yang dekat dengan Internet dan segala yang berbau dunia maya, namun jangan pernah dilupakan bahwa kita hidup di dunia nyata. Segala hubungan baik yang terjalin lewat dunia maya tidak akan pernah sama dengan hubungan yang terjalin baik lewat dunia nyata. Itu mengapa jangan pernah segan untuk menyapa, menegor, ataupun menemui orang-orang yang kalian telah kenal dalam komunitas online karena hal tersebut akan mempererat hubungan antar kalian.&lt;/p&gt;
&lt;p&gt;Menjalin hubungan baik dengan banyak orang adalah cara ampuh untuk pencitraan kalian, karena kalian tidak perlu repot-repot untuk memberitahukan siapa diri kalian dan apa yang kalian telah lakukan jika kalian telah mengenal dengan baik orang tersebut. Pencitraan akan berjalan dengan sendirinya bila kalian mengenal banyak orang diluar sana.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Semua yang saya tulis dalam artikel ini merupakan pendapat pribadi beserta pengalaman yang saya alami tentu saja juga ditunjang dari beberapa sumber dan bahan bacaan yang saya telah baca dan telaah, bila ada perbedaan pendapat, koreksi maupun penambahan dari kalian semua silahkan tinggalkan komentar di artikel ini.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Langkah-langkah memasang i18n di Vue.js project</title>
      <link>https://mazipan.github.io/blogs/articles/langkah-langkah-memasang-i18n-di-vue-js-project.md/</link>
      <pubDate>Thu, 27 Jul 2017 21:11:35 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/langkah-langkah-memasang-i18n-di-vue-js-project.md/</guid>
      <author></author>
      <description>&lt;p&gt;[caption id=”” align=”aligncenter” width=”500”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*CfsCXJtHf9hhwE65VATiOQ.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;412&quot; /&gt; i18n visualisasi (sumber : &lt;a href=&quot;https://make.wordpress.org)%5B/caption%5D&quot;&gt;https://make.wordpress.org)[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Internationalization (i18n) dalam sebuah software berarti ketika software tersebut mendukung beberapa bahasa. Fitur ini tentu akan sangat membantu terutama bila software Anda memang ditargetkan pada lebih dari satu negara sehingga mengharuskan mendukung beberapa variasi bahasa.&lt;/p&gt;
&lt;p&gt;Di dalam project yang dibuat menggunakan Vue.js hal ini bisa dilakukan dengan mudah bahkan dalam hitungan menit kita sudah bisa menyelesaikan contoh sebuah aplikasi yang mendukung multi bahasa.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Berikut beberapa langkah untuk setup i18n di dalam Vue.js :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Install dependency&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kita akan menggunakan bantuan sebuah plugin yakni vue-i18n.
Bila menggunakan npm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install vue-i18n — save&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;atau bisa juga menggunakan yarn dengan perintah:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add vue-i18n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Setup file locale&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;File locale ini berupa Json file yang berisi terjemahan dari berbagai kata yang akan digunakan dalam aplikasi kita. Misalnya saja kita ingin mendukung bahasa Indonesia dan bahasa Inggris dalam aplikasi kita, maka kita akan membuat dua file locale yakni id.json dan en.json.&lt;/p&gt;
&lt;p&gt;Contoh file ini bisa dilihat di :&lt;/p&gt;
&lt;ol&gt;
     &lt;li&gt;&lt;a href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/i18n/id.json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;id.json&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;&lt;a href=&quot;https://github.com/mazipan/chucknorris/blob/master/src/i18n/en.json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;en.json&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;strong&gt;3. Setup plugin&lt;/strong&gt;

&lt;p&gt;Untuk menggunakan plugin tersebut kita bisa dengan mudah mendefinisikan bahasa yang akan kita pakai beserta file locale yang telah kita buat sebelumnya. Berikut adalah contoh setup plugin tersebut :&lt;/p&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*ISmEFYkGcPsyTeF22XCwRg.png&quot; /&gt;

&lt;p&gt;Seperti terlihat, kita meng-import dua file json locale kita kemudian mendefinisikan default EN di dalam object VueI18n di dalam property locale, dan mendefinisikan bahasa lain yang tersedia dalam property messages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Menyisipkan kedalam Vue Instance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Setelah membuat file diatas, kita kan menyisipkan setup file tadi ke dalam Vue Instance kita yang biasanya terdapat dalam file main.js. Berikut contoh kodenya :&lt;/p&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*6ACofjVF00WuvWO2bPCVjw.png&quot; /&gt;

&lt;p&gt;Bisa dilihat ketika kita membuat &lt;i&gt;new Vue({})&lt;/i&gt;, kita menyisipkan file setup i18n yang kita buat sebelumnya.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Menggunakan di HTML Template&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Setelah langkah diatas dilakukan, maka kita bisa dengan mudah digunakan di html template kita dengan sintaks {{ $t(‘key’) }} dimana key adalah key yang terdapat pada file Json locale kita. Berikut adalah potongan kode penggunaan plugin vue-i18n di dalam HTML template :&lt;/p&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*SvD85sxkikZdv_PYT_n-8g.png&quot; /&gt;

&lt;p&gt;Terlihat di gambar diatas kita membuat beberapa terjemahan dengan cara menggunakan sintaks : {{$t(‘tab.search’)}} dan juga {{$t(‘sidebar.about’)}}. Dengan kode ini berarti kita telah mendefinisikan sebuah key-value di dalam file json kita seperti contoh berikut :&lt;/p&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*h9BI7UxMHnI64EHZM6H5Zw.png&quot; /&gt;

&lt;p&gt;&lt;strong&gt;6. Mengganti bahasa&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Untuk mengganti bahsa kita hanya cukup mengganti locale dari instace plugin vue-i18n yang bisa diakses dengan this.$i18n di dalam masing-masing komponen kita. Berikut contoh kodenya :&lt;/p&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*RH3GGyD9rZeNG7Li2xd9DA.png&quot; /&gt;

&lt;p&gt;Semua kode yang saya bagikan adalah potongan kode dalam project ChuckNorris yang bisa dilihat di : &lt;a href=&quot;https://github.com/mazipan/chucknorris/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mazipan/chucknorris/&lt;/a&gt;&lt;/p&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*mbx2wtZZ3UdD4X8bessyyQ.png&quot; /&gt;
&lt;img class=&quot;aligncenter&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*VgS8pLwGSeu4lgj5jTzNnQ.png&quot; /&gt;

&lt;p&gt;Bila ingin belajar lebih lanjut mengenai berbagai penggunaan vue-i18n ini Anda bisa langsung cek dokumentasinya di : &lt;a href=&quot;https://kazupon.github.io/vue-i18n/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://kazupon.github.io/vue-i18n/en/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Tulisan ini juga telah dipublikasikan di Medium: &lt;a href=&quot;https://medium.com/vuejs-id/mudahnya-setup-internationalisasi-bahasa-di-vue-js-2b7d00ef3c1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/vuejs-id/mudahnya-setup-internationalisasi-bahasa-di-vue-js-2b7d00ef3c1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Kenapa Saya Masih Suka Nge-Tweet ?</title>
      <link>https://mazipan.github.io/blogs/articles/kenapa-saya-masih-suka-nge-tweet.md/</link>
      <pubDate>Wed, 26 Jul 2017 21:11:35 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/kenapa-saya-masih-suka-nge-tweet.md/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;strong&gt;Kenapa saya masih suka nge-Tweet&lt;/strong&gt; - Twitter adalah salah satu media sosial atau mereka lebih suka menyebut diri mereka sebagai &lt;em&gt;micro-blogging&lt;/em&gt; platform. Twitter memiliki berbagai fitur yang tentu saja juga sebagian merupakan ciri khas dari mereka yang membuat mereka berbeda dari para pesaingnya.&lt;/p&gt;
&lt;p&gt;Twitter telah memulai petualangan mereka sejak 2006 dan sempat mencapai pertumbuhan yang luar biasa diantara tahun 2011-2014an. Meskipun pada tahun 2015an sampai saat ini mulai mengalami penurunan pertumbuhan dan mulai ditinggalkan oleh sebagian penggunanya.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Namun bahkan di tengah persaingan yang ketat dengan para kompetitornya Twitter masih memiliki banyak pengguna setia yang senantiasa memanfaatkan service yang mereka sediakan secara gratis ini sampai sekarang.&lt;/p&gt;
&lt;p&gt;Salah satu yang membuat Twitter masih bertahan adalah ciri khas yang tidak pernah ditinggalkan. Twitter konsisten dengan konsep awal mereka sebagai micro-blogging, dimana sampai sekarang mereka masih membatasi jumlah karakter yang bisa di ketik hanya sebanyak 140 karakter dalam sekali posting. Meskipun berbagai peningkatan dan penambahan fitur telah ditambahkan sebagai pemenuhan kebutuhan para penggunanya seperti auto shortening pada post yang memiliki panjang karakter lebih dari 140 sehingga kini sebenarnya kita bisa mem-posting lebih dari 140 karakter namun akan otomatis dipotong oleh Twitter agar tetap sepanjang 140 karakter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kenapa sampai saat ini saya masih nge-tweet ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bagi saya sendiri Twitter memiliki tempat tersendiri, meskipun posisinya telah banyak tergantikan oleh kompetitornya terutama Facebook yang memang saat ini menjadi Leader dalam dunia sosial media. Twitter memiliki keunggulannya tersendiri dibandingkan Facebook menurut saya, itu kenapa saya juga berusaha memilah-milih mana postingan yang cocok untuk di post di Facebook dan mana yang cocok untuk Twitter karena memang keduanya memiliki karakteristik yang sangat berbeda.&lt;/p&gt;
&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;a/31qzo&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;//imgur.com/31qzo&quot; class=&quot;broken_link&quot; rel=&quot;nofollow&quot;&gt;&lt;br /&gt; Twitter Irfan Maulana - @Maz_Ipan&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Twitter dan Facebook menjadi dua Social Media yang masih coba saya pakai dengan segmentasi yang berbeda. Facebook memberikan kita keunggulan dalam melakukan interaksi dengan pengguna lain, Fitur komentar yang menurut saya sangat nyaman untuk digunakan untuk berinteraksi dengan yang lain membuat saya membagikan post yang membutuhkan banyak interaksi dengan pengguna lain di media sosial Facebook. Sementara Twitter meskipun memiliki fitur Reply namun saya tidak begitu nyaman menggunakan fitur ini, sehingga saya lebih banyak membagikan post yang sifatnya publikasi searah lewat Twitter. Ya, Twitter sangat saya manfaatkan untuk spread to the world tentang segala sesuatu yang saya rasa baik untuk dibagikan.&lt;/p&gt;
&lt;p&gt;Twitter juga memberikan simplicity bagi saya, karena tentu saja berpikir untuk menulis 140 karakter lebih mudah dibandingkan lebih dari itu.&lt;/p&gt;
&lt;p&gt;Sampai saat ini saya masih suka nge-Tweet berbagai informasi yang saya pikir itu baik dan bermanfaat untuk orang lain. Saya masih follow beberapa orang hebat yang tentu saja Tweet-nya saya rasa akan bermanfaat bagi saya sendiri. Twitter sampai saat ini masih menjadi secondary media sosial yang saya gunakan dan sepertinya masih akan saya gunakan dalam beberapa saat kedepan tergantung pada kebijakan Twitter juga apakah masih akan melayani penggunanya di masa yang akan datang.&lt;/p&gt;
&lt;p&gt;Tentu saja Anda bisa follow akun Twitter saya bila dirasa apa yang saya bagikan itu bermanfaat bagi Anda, dan silahkan pula untuk unfollow kapanpun bila dirasa apa yang saya bagikan akan menggangu Anda.&lt;/p&gt;
&lt;p&gt;Apapun itu, kita berhak memakai media sosial yang kita sukai dan nyaman menggunakannya.&lt;/p&gt;
&lt;p&gt;Bijaklah dalam menggunakan sosial media.&lt;/p&gt;
&lt;p&gt;Berpikir sebelum membagikan sesuatu tentu akan lebih baik dibandingkan menyesal karena membagikan sesuatu yang salah dan merusak orang lain.&lt;/p&gt;
&lt;p&gt;Berbagilah kepada orang lain segala hal yang bermanfaat.&lt;/p&gt;
&lt;p&gt;Sosial media merupakan alat yang sangat baik digunakan untuk saling berbagi informasi, berbagi pengetahuan, dan menjalin tali silaturahmi dengan teman.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Memulai Vue.js dengan Vue-CLI dan Webpack</title>
      <link>https://mazipan.github.io/blogs/articles/memulai-vue-js-dengan-vue-cli-dan-webpack.md/</link>
      <pubDate>Sat, 22 Jul 2017 17:56:03 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/memulai-vue-js-dengan-vue-cli-dan-webpack.md/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img src=&quot;https://coligo.io/vuejs-the-basics/cover-850x416.jpg&quot; alt=&quot;Vue.js&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memulai Vue.js dengan Vue-CLI dan Webpack&lt;/strong&gt; - Vue.js merupakan salah satu pilihan framework javascript yang terdapat di pasar saat ini dan salah satu yang belakangan mendapatkan perhatian lumayan dari para javascript developer. Vue.js banyak dibilang sebagai framework yang berhasil mengadopsi kehebatan React dan Angular dalam satu wadah yang tepat. Memang jika kita belajar Vue.js terutama di versi 2 akan mendapatkan rasa seperti React yang bercampur dengan Angular. Vue.js datang belakangan, hal itu menjadi wajar kenapa Vue.js bisa dibilang sukses belajar dari para pendahulunya. Menggabungkan &lt;em&gt;strong point&lt;/em&gt; dari beberapa framework untuk bisa berdiri sendiri menggunakan paradigma yang diusungnya.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Untuk memulai project Vue.js sebenarnya sangat mudah, karena Vue.js bisa langsung jalan di browser seperti yang dilakukan sejak versi 1.x cukup dengan menambahkan tag &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; dan kode Vue.js sudah bisa dipakai di browser Anda seperti terlihat di dokumentasi nya disini : &lt;a href=&quot;https://vuejs.org/v2/guide/#Getting-Started&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vuejs.org/v2/guide/#Getting-Started&lt;/a&gt;. Namun dengan menggunakan cara ini, maka kita tidak dapat menggunakan banyak hal menarik dalam proses development kita seperti _css preprocessor_, file dengan ekstensi &lt;code&gt;.vue&lt;/code&gt;, ES6 syntax serta banyak hal lain lagi yang membutuhkan kompilasi sebelum dijalankan.&lt;/p&gt;
&lt;p&gt;Seperti halnya framework lain yang menghadirkan &lt;em&gt;generator skeleton&lt;/em&gt; bagi yang ingin memulai belajar tanpa harus pusing setup maka Vue.js juga hadir dengan hal tersebut. Mereka punya Vue-CLI sebagai &lt;em&gt;generator&lt;/em&gt; dari struktur project mereka. Vue-CLI menurut saya sendiri salah satu &lt;em&gt;generator&lt;/em&gt; yang palling fleksibel diantara para pesaingnya. Vue-CLI punya banyak pilihan &lt;em&gt;template&lt;/em&gt; yang bisa kita pilih untuk di _generate_, mulai dari webpack yang simple, webpack yang kompleks, browserify simple sampai yang kompleks, PWA, sampai yang sangat sederhana dengan hanya satu file html. Semua file hasil dari Vue-CLI pun sangat terlihat alami tanpa adanya campur tangan sebuah _generator_, jadi sangat mudah buat kita untuk memodifikasi berbagai konfigurasi yang ada didalamnya sesuai dengan kebutuhan kita.&lt;/p&gt;
&lt;p&gt;Yang akan kita coba bahas disini adalah generate Vue-CLi untuk template webpack, kenapa webpack ? karena dependency ini salah satu yang paling populer dan paling baik dokumentasinya sehingga mudah untuk di modifikasi kedepannya. Ada dua pilihan yakni webpack simple dan webpack, kita akan mencoba menggunakan template webpack pada tutorial kali ini.&lt;/p&gt;
&lt;p&gt;Pertama pastikan Anda meng-&lt;em&gt;install&lt;/em&gt; Vue-CLI dengan cara : &lt;code&gt;npm install -g vue-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Dan perintah dasar untuk melakukan &lt;em&gt;generate&lt;/em&gt; dengan Vue-CLI adalah dengan : &lt;code&gt;vue init template_name project_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Dan spesifik untuk men-&lt;em&gt;generate&lt;/em&gt; sebuah webpack setup untuk Vue.js bisa dengan cara : &lt;code&gt;vue init webpack project_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Dalam kasus normal hal ini harusnya akan berjalan dengan baik, namun ada kalanya proses ini gagal dan biasanya penyebabnya ada di Proxy dalam jaringan yang tidak mengijinkan untuk mengunduh template yang ada di github.&lt;/p&gt;
&lt;p&gt;Salah satu solusi mudahnya adalah dengan mengunduh template yang ada di github ke dalam lokal komputer Anda untuk dilakukan &lt;em&gt;generate&lt;/em&gt; secara lokal.&lt;/p&gt;
&lt;p&gt;File template sendiri bisa ditemukan di :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs-templates/webpack&quot;&gt;webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs-templates/webpack-simple&quot;&gt;webpack-simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs-templates/browserify&quot;&gt;browserify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs-templates/browserify-simple&quot;&gt;browserify-simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs-templates/pwa&quot;&gt;pwa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs-templates/simple&quot;&gt;simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Setelah mendownload file di lokal komputer Anda, bisa gunakan perintah berikut untuk melakukan &lt;em&gt;generate&lt;/em&gt; &lt;em&gt;skeleton&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;vue init path_to_lokal_template project_name&lt;/pre&gt;

&lt;p&gt;Setelah menjalankan perintah ini akan ada beberapa pertanyaan seputar konfigurasi yang ingin di generate seperti akan menggunakan Vue-Router atau tidak, akan menggunakan ESLint atau tidak, ingin men-&lt;em&gt;generate&lt;/em&gt; &lt;em&gt;skeleton&lt;/em&gt; untuk &lt;em&gt;unit test&lt;/em&gt; dan &lt;em&gt;end-2-end test&lt;/em&gt; atau tidak.&lt;/p&gt;
&lt;p&gt;Berikut adalah controh &lt;em&gt;screenshoot&lt;/em&gt; ketika melakukan &lt;em&gt;generate skeleton&lt;/em&gt; menggunakan Vue-CLI webpack template :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/vue-cli-mazipanneh.PNG&quot; alt=&quot;Vue-CLI Lokal&quot;&gt;&lt;/p&gt;
&lt;p&gt;Vue-CLI juga akan melakukan generate shortcut script yang biasa kita jalankan dengan &lt;em&gt;npm run task&lt;/em&gt; seperti contoh berikut :&lt;/p&gt;
&lt;pre class=&quot;&quot;&gt;&quot;dev&quot;: &quot;node build/dev-server.js&quot;,
&quot;build&quot;: &quot;node build/build.js&quot;,
&quot;unit&quot;: &quot;cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run&quot;,
&quot;e2e&quot;: &quot;node test/e2e/runner.js&quot;,
&quot;test&quot;: &quot;npm run unit &amp;&amp; npm run e2e&quot;,
&quot;lint&quot;: &quot;eslint --ext .js,.vue src test/unit/specs test/e2e/specs&quot;
&lt;/pre&gt;

&lt;p&gt;Jadi setelah project kita berhasil ter-&lt;em&gt;generate&lt;/em&gt; dan telah meng-&lt;em&gt;install&lt;/em&gt; &lt;em&gt;dependency&lt;/em&gt; dengan &lt;code&gt;npm install&lt;/code&gt; maupun &lt;code&gt;yarn install&lt;/code&gt; maka kita bisa menjalankan project tersebut dengan perintah &lt;code&gt;npm run dev&lt;/code&gt; dan bila ingin men-compile file untuk production kita bisa menjalankan &lt;code&gt;npm run build&lt;/code&gt; sedangkan untuk test ada &lt;code&gt;npm run unit&lt;/code&gt; dan lain-lain.&lt;/p&gt;
&lt;p&gt;Demikian sedikit tutorial dasar mengenai penggunaan dasar Vue-CLI. Semua dokumentasi dan &lt;em&gt;issue&lt;/em&gt; telah ada di Github resminya di &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vuejs/vue-cli&lt;/a&gt;, silahkan dipelajari lebih lanjut jika ingin yang lebih kompleks lagi.&lt;/p&gt;
&lt;p id=&quot;b6b7&quot; class=&quot;graf graf--p graf--hasDropCapModel graf--hasDropCap graf-after--p&quot;&gt;
  Bila ada pertanyaan ataupun diskusi langsung kepada penulis, Anda bisa menghubungi lewat beberapa sosial media berikut :
&lt;/p&gt;

&lt;ul class=&quot;postList&quot;&gt;
  &lt;li id=&quot;9738&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;
    Facebook : &lt;a class=&quot;markup--anchor markup--li-anchor&quot; href=&quot;https://medium.com/r/?url=https%3A%2F%2Ffacebook.com%2Fmazipanneh&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener nofollow&quot; data-href=&quot;https://medium.com/r/?url=https%3A%2F%2Ffacebook.com%2Fmazipanneh&quot;&gt;https://facebook.com/mazipanneh&lt;/a&gt;
  &lt;/li&gt;
  &lt;li id=&quot;9f16&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;
    Twitter : &lt;a class=&quot;markup--anchor markup--li-anchor&quot; href=&quot;https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2FMaz_Ipan&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2FMaz_Ipan&quot;&gt;https://twitter.com/Maz_Ipan&lt;/a&gt;
  &lt;/li&gt;
  &lt;li id=&quot;50e1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;
    Slideshare : &lt;a class=&quot;markup--anchor markup--li-anchor&quot; href=&quot;https://medium.com/r/?url=https%3A%2F%2Fwww.slideshare.net%2FIrfanMaulana21&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://medium.com/r/?url=https%3A%2F%2Fwww.slideshare.net%2FIrfanMaulana21&quot;&gt;https://www.slideshare.net/IrfanMaulana21&lt;/a&gt;
  &lt;/li&gt;
  &lt;li id=&quot;b1a8&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;
    Github : &lt;a class=&quot;markup--anchor markup--li-anchor&quot; href=&quot;https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fmazipan&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fmazipan&quot;&gt;https://github.com/mazipan&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Terima kasih,&lt;/p&gt;
&lt;p&gt;Irfan Maulana&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Belajar Angular - Bagian 6 - Persiapan File Production</title>
      <link>https://mazipan.github.io/blogs/articles/belajar-angular-bagian-6-persiapan-file-production.md/</link>
      <pubDate>Thu, 13 Jul 2017 07:00:29 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/belajar-angular-bagian-6-persiapan-file-production.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 825px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/belajar-angular-bagian-6-mazipanneh.jpg&quot; alt=&quot;Belajar Angular - Bagian 6 - Persiapan File Production&quot; width=&quot;825&quot; height=&quot;35&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Belajar Angular - Bagian 6 - Persiapan File Production&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Belajar Angular - Bagian 6 - Persiapan File Production&lt;/strong&gt; - Development Angular dengan bantuan Angular-CLI memang sangat dimudahkan baik dari mulai pembuatan project awal, penambahan berbagai komponen sampai pada pembuatan file production yang nantinya akan kita deploy atau host.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tulisan ini merupakan serial pembahasan mengenai framework &lt;strong&gt;Angular&lt;/strong&gt;, Anda mungkin ingin membaca tulisan lainnya berikut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a title=&quot;belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project&quot; href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 1 - Pengenalan dan Inisialisasi Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;belajar-angular-bagian-2-membuat-komponen&quot; href=&quot;http://mazipanneh.com/blog/2017/05/belajar-angular-bagian-2-membuat-komponen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 2 - Membuat Komponen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;belajar-angular-bagian-3-membuat-service&quot; href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-3-membuat-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 3 - Membuat Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;belajar-angular-bagian-4-membuat-route&quot; href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-4-membuat-route/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 4 - Membuat Route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;belajar-angular-bagian-5-membuat-custom-pipe-atau-filter&quot; href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-5-membuat-custom-pipe-atau-filter/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 5 - Membuat Custom Pipe atau Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;belajar-angular-bagian-6-persiapan-file-production&quot; href=&quot;http://mazipanneh.com/blog/2017/07/belajar-angular-bagian-6-persiapan-file-production/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 6 - Persiapan File Production&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dengan Angular-CLI kita bisa dengan mudah menyiapkan file untuk production dengan beberapa perintah bawaan yang telah disediakan.&lt;/p&gt;
&lt;p&gt;Berikut ini kita akan belajar bagaimana untuk menyiapkan file yang layak di deploy ke production serta beberapa catatan yang mungkin perlu diperhatikan :&lt;/p&gt;
&lt;h3 id=&quot;build-file-dengan-angular-cli&quot;&gt;Build file dengan Angular-CLI&lt;/h3&gt;
&lt;p&gt;Angular-CLI bisa men-generate file build yang bisa kita deploy ke production dengan cara&lt;/p&gt;
&lt;pre&gt;ng build
&lt;/pre&gt;

&lt;p&gt;Dengan perintah ini kita akan mendapatkan folder &lt;code&gt;/dist&lt;/code&gt; yang berisi file &lt;code&gt;index.html&lt;/code&gt; dan beberapa file .js hasil generate. File-file ini dalam folder ini adalah file yang nantinya bisa kita deploy ke production.&lt;/p&gt;
&lt;p&gt;Mudah bukan ?&lt;/p&gt;
&lt;p&gt;Tapi coba kita buka salah satu file .js hasil build nya, kita akan menemukan kode javascript yang belum di &lt;em&gt;minified&lt;/em&gt; dan tentunya ini bukan harapan kita untuk di deploy ke production, untung nya lagi Angular-CLi juga telah menyediakan perintah untuk build file dengan mode yang sudah ter-&lt;em&gt;minified&lt;/em&gt; yakni dengan perintah&lt;/p&gt;
&lt;pre&gt;ng build --prod
&lt;/pre&gt;

&lt;h3 id=&quot;set-base-href&quot;&gt;Set Base Href&lt;/h3&gt;
&lt;p&gt;Angular memiliki fitur untuk melakukan routing di frontend dan untuk bisa melakukan ini di production, kita mungkin akan perlu menyesuaikan base-href dari &lt;code&gt;index.html&lt;/code&gt; kita terutama bila kita akan mendeploy aplikasi kita ke tempat yang bukan merupakan root dari domain Anda, misalkan &lt;code&gt;irfan.com/apps/&lt;/code&gt; maka kita perlu pindahkan base-href nya dari / ke /apps. Cara manual adalah dengan mengubah kode berikut sesuai dengan path yang akan digunakan di production.&lt;/p&gt;
&lt;pre&gt;&amp;lt;base href=&quot;/path-production/&quot;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Jika cara manual ini terlalu membuat Anda malas, maka kita bisa menambahkan option ketika akan build file menggunakan Angular-CLI seperti contoh&lt;/p&gt;
&lt;pre&gt;ng build --prod --base-href /apps/
&lt;/pre&gt;

&lt;p&gt;Setelah menjalankan ini, maka base-href yang ada di file &lt;code&gt;index.html&lt;/code&gt; akan mengarah ke option tersebut.&lt;/p&gt;
&lt;p&gt;Perintah diatas juga bisa disingkat seperti berikut&lt;/p&gt;
&lt;pre&gt;ng build --prod -bh /apps/
&lt;/pre&gt;

&lt;h3 id=&quot;set-deploy-url&quot;&gt;Set Deploy Url&lt;/h3&gt;
&lt;p&gt;Seperti pada kasus sebelumnya, jika kita ingin mendeploy ke tempat yang bukan merupakan root domain seringkali terjadi salah path termasuk dari file-file yang di generate oleh Angular-CLI.&lt;/p&gt;
&lt;p&gt;Angular-CLI secara default akan membuatkan path yang mengarah ke file .js hasil build dengan tanpa path di depannya, contoh &lt;code&gt;main.bundle.js&lt;/code&gt;. Secara teori harusnya tidak ada masalah dengan cara ini, karena dengan tidak menyebutkan path di depannya berarti akan diarahkan ke folder tempat &lt;code&gt;index.html&lt;/code&gt; itu berada. Namun entah kenapa terkadang ada saja masalah dengan hal ini, dan salah satu caranya adalah dengan menambahkan relative path di depannya.&lt;/p&gt;
&lt;p&gt;Cara manual yang bisa kita lakukan adalah dengan mengubah path &lt;code&gt;main.bundle.js&lt;/code&gt; menjadi&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/apps/main.bundle.js&lt;/code&gt; misalnya. Namun cara ini lumayan membuat capek dan rentan terjadi kelupaan, kabar baiknya lagi Angular-CLI juga telah menyiapkan option untuk hal ini jadi kita tidak perlu mengubah manual lagi namun menggunakan perintah seperti berikut&lt;/p&gt;
&lt;pre&gt;ng build --prod -bh /apps/ --deploy-url /apps/
&lt;/pre&gt;

&lt;p&gt;Atau bisa juga kita singkat seperti ini&lt;/p&gt;
&lt;pre&gt;ng build --prod -bh /apps/ -d /apps/
&lt;/pre&gt;

&lt;p&gt;Setelah menggunakan perintah ini maka path yang di generate oleh Angular-CLI akan disesuaikan ke path ini.&lt;/p&gt;
&lt;h3 id=&quot;set-ke-npm-script&quot;&gt;Set ke npm script&lt;/h3&gt;
&lt;p&gt;Perintah-perintah diatas tentu akan membuat kita lupa kalau tidak kita buat shortcut untuk mempermudah pekerjaan kita, jadi kita bisa memindahkan perintah itu ke dalam &lt;code&gt;package.json&lt;/code&gt; kita di bagian &lt;code&gt;script&lt;/code&gt;, seperti contoh&lt;/p&gt;
&lt;pre&gt;&quot;scripts&quot;: {
    &quot;dist&quot;: &quot;ng build --prod --base-href /apps/ -d /apps/&quot;
  }
&lt;/pre&gt;

&lt;p&gt;Dengan begini kita bisa dengan mudah memanggil perintah ini kembali, cukup dengan perintah&lt;/p&gt;
&lt;pre&gt;npm run dist
&lt;/pre&gt;

&lt;p&gt;Dan taraaaa&amp;#8230;&lt;/p&gt;
&lt;p&gt;Sekian tulisan dari saya, semoga bermafaat.&lt;/p&gt;
&lt;p&gt;Kode yang digunakan dalam tutorial ini diambil dari repository &lt;a href=&quot;https://github.com/mazipan/ng2-starwars&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/mazipan/ng2-starwars&lt;/a&gt; dan bisa dilihat demo nya di : &lt;a href=&quot;http://mazipan.github.io/ng2-starwars/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://mazipan.github.io/ng2-starwars/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Silahkan dipelajari source code nya.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana.&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Vue2-Simplert - Pengalaman Membuat Library Menggunakan Vue2</title>
      <link>https://mazipan.github.io/blogs/articles/vue2-simplert-pengalaman-membuat-library-menggunakan-vue2.md/</link>
      <pubDate>Sun, 11 Jun 2017 09:00:19 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/vue2-simplert-pengalaman-membuat-library-menggunakan-vue2.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 344px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img title=&quot;Vue2-Simplert Logo&quot; src=&quot;https://mazipan.github.io/vue2-simplert/images/vue2-simplert-logo+icon.png&quot; alt=&quot;Vue2-Simplert Logo&quot; width=&quot;344&quot; height=&quot;337&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Vue2-Simplert Logo&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Vue2-Simplert&lt;/strong&gt; adalah sebuah component yang dibuat untuk framework Vue versi 2 untuk memenuhi kebutuhan saya dan kantor tempat saya bekerja akan sebuah komponen yang mirip seperti SweatAlert yang telah kita kenal sebelumnya. Sebenarnya sudah ada beberapa alternatif diluar sana, namun setelah menimbang dari beberapa hal kita memutuskan untuk membuatnya sendiri saja dengan harapan nantinya akan mudah untuk di maintain dan di custom sesuai dengan kemauan kita.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vue2-Simplert&lt;/strong&gt; sendiri saya coba inisialisasi pembuatannya sebagai project open-source dengan harapan bisa digunakan oleh mereka yang mempunyai problem yang sama serta bisa mendapatkan bantuan sehingga bisa lebih cepat dalam pengembangannya.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vue2-Simplert&lt;/strong&gt; tentu saja tidak datang langsung seperti sekarang yang kalian lihat. Ada perjalanan seperti juga perjalanan saya yang masih sangat baru belajar Vue versi 2 serta belajar membuat project open-source yang baik dan layak digunakan orang lain.&lt;/p&gt;
&lt;p&gt;Menengok ke belakang pada versi awal saya tidak begitu banyak membutuhkan setup yang aneh karena saya memang ingin fokus pada inisialisai pembuatan komponen nya, jadi saya putuskan untuk mencari-cari beberapa repository Vue2 dengan setup yang minimalis. Setelah mencari-cari akhirnya saya temukan repository yang saya pikir cocok untuk dijadikan skeleton project dan kebetulan repo tersebut punya orang Indonesia. Anda mungkin bisa melihat repositorinya &lt;a href=&quot;https://github.com/BosNaufal/vue2-loading-bar&quot; title=&quot;vue2-loading-bar&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dengan menggunakan skeleton ini pada masa-masa awal pembuatan &lt;strong&gt;Vue2-Simplert&lt;/strong&gt; saya memulai untuk membuat komponen sederhana yang bisa memunculkan popup dan bisa di set predefine config layaknya SweatAlert. &lt;/p&gt;
&lt;p&gt;Saat ini sendiri &lt;strong&gt;Vue2-Simplert&lt;/strong&gt; telah banyak berkembang sejak dari masa awal release termasuk migrasi skeleton dari yang sederhana menjadi menggunakan Vue-CLI skeleton agar mudah setup unit test dan lain-lain. &lt;/p&gt;
&lt;p&gt;Menyiapkan project open-source Saya juga belajar untuk meyiapkan dokumentasi agar orang lain bisa mudah menggunakan dan membantu mengembangkan, dan sampai saat ini &lt;strong&gt;Vue2-Simplert&lt;/strong&gt; sudah memiliki dokumentasi yang lumayan lengkap yang bisa Anda lihat di &lt;a href=&quot;https://github.com/mazipan/vue2-simplert/wiki&quot; title=&quot;Vue2-Simplert wiki&quot;&gt;halaman wiki Vue2-Simplert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Setelah berbagai perubahan pada design dan kodenya berikut adalah cara menggunakan &lt;strong&gt;Vue2-Simplert&lt;/strong&gt; mulai dari versi 0.2.1 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Instalasi&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;npm install vue2-simplert — save-dev
           // atau
           yarn add vue2-simplert
       &lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Komponen Referer&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;import Simplert from 'vue2-simplert'
           export default {
              components: {Simplert}
           };
       &lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Template View&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&amp;lt;simplert useRadius=true useIcon=true ref=&quot;simplert&quot;&amp;gt;
       &amp;lt;/simplert&amp;gt;
       &lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Membuka Popup&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;let obj = {
          title: 'Title',
          message: 'Message',
          type: 'success'
       }
       this.$refs.simplert.openSimplert(obj)
       &lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Konfigurasi Object&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;{
         title: 'test', //string -- title alert
         message: 'message', //string -- message alert
         type: 'success', //string -- type : info (default), success, warning, error
         customClass: '', //string -- custom class in simplert div
         customIconUrl: '', //string -- custom url custom image icon
         customCloseBtnText: '', //string -- close button text
         customCloseBtnClass: '', //string -- custom class for close button
         onClose: this.onClose, //function -- when close triggered
         useConfirmBtn: false, //boolean -- using confirm button
         customConfirmBtnText: '', //string -- confirm button text
         customConfirmBtnClass: '', //string -- custom class for confirm button
         onConfirm: this.onConfirm, //function -- when confirm button triggered
         disableOverlayClick: false //boolean -- set to true if you want disable overlay click function
       }
       &lt;/pre&gt;&lt;figure style=&quot;width: 344px&quot; class=&quot;wp-caption aligncenter&quot;&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img title=&quot;Vue2-Simplert Logo Typography&quot; src=&quot;https://mazipan.github.io/vue2-simplert/images/vue2-simplert-logo.png&quot; alt=&quot;Vue2-Simplert Logo Typography&quot; width=&quot;344&quot; height=&quot;71&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Vue2-Simplert Logo Typography&lt;/figcaption&gt;&lt;/figure&gt; &lt;/p&gt;
&lt;p&gt;Anda bisa melihat semua dokumentasi dari mulai cara memasang, cara menggunakan, contoh penggunaan sampai config yang tersedia di halaman wiki &lt;strong&gt;Vue2-Simplert&lt;/strong&gt; &lt;a href=&quot;https://github.com/mazipan/vue2-simplert/wiki&quot; title=&quot;Vue2-Simplert wiki&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pada akhirnya, project ini bukanlah project wah yang bisa begitu berguna buat Anda mungkin, tapi semoga apa yang saya bagikan bisa berguna bagi mereka yang sedang mengalami dan membutuhkan solusi yang sama dengan kami. &lt;/p&gt;
&lt;p&gt;Anda bisa membuka issue di &lt;a href=&quot;https://github.com/mazipan/vue2-simplert&quot; title=&quot;Vue2-Simplert Github&quot;&gt;Github Repository &lt;strong&gt;Vue2-Simplert&lt;/strong&gt;&lt;/a&gt; bila ada request feature atau menemukan bug dalam &lt;strong&gt;Vue2-Simplert&lt;/strong&gt; &lt;a href=&quot;https://github.com/mazipan/vue2-simplert/issues&quot; title=&quot;Vue2-Simplert issues&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana. &lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Belajar Angular - Bagian 5 - Membuat Custom Pipe atau Filter</title>
      <link>https://mazipan.github.io/blogs/articles/belajar-angular-bagian-5-membuat-custom-pipe-atau-filter.md/</link>
      <pubDate>Sat, 10 Jun 2017 09:00:34 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/belajar-angular-bagian-5-membuat-custom-pipe-atau-filter.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 825px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/belajar-angular-bagian-5-mazipanneh.jpg&quot; alt=&quot;Belajar Angular - Bagian 5 - Membuat Custom Pipe atau Filter&quot; width=&quot;825&quot; height=&quot;35&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Belajar Angular - Bagian 5 - Membuat Custom Pipe atau Filter&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Belajar Angular - Bagian 5 - Membuat Custom Pipe atau Filter&lt;/strong&gt; - Angular dari semasa masih versi satu sudah menyediakan fitur keren ini, di AngularJS kita kenal dengan nama &lt;strong&gt;Filter&lt;/strong&gt; sedangkan di Angular kini dikenal dengan sebutan &lt;strong&gt;Pipe&lt;/strong&gt;. pipe/Filter ini sendiri merupakan fitur yang memungkinkan kita untuk men-transform atau mengubah maupun mem-format suatu data secara real-time. Pipe/Filter ini tidak berubah dari versi sebelumnya dari sisi sintax penggunaannya tetap ditandai dengan adanya pipe symbol (|) diikuti nama filter/pipe nya, contoh &lt;code&gt;{{ dateNow | date }}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tulisan ini merupakan serial pembahasan mengenai framework &lt;strong&gt;Angular&lt;/strong&gt;, Anda mungkin ingin membaca tulisan lainnya berikut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project&quot;&gt;Bagian 1 - Pengenalan dan Inisialisasi Project&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/05/belajar-angular-bagian-2-membuat-komponen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-2-membuat-komponen&quot;&gt;Bagian 2 - Membuat Komponen&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-3-membuat-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-3-membuat-service&quot;&gt;Bagian 3 - Membuat Service&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-4-membuat-route/&quot; title=&quot;belajar-angular-bagian-4-membuat-route&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 4 - Membuat Route&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-5-membuat-custom-pipe-atau-filter/&quot; title=&quot;belajar-angular-bagian-5-membuat-custom-pipe-atau-filter&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 5 - Membuat Custom Pipe atau Filter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/07/belajar-angular-bagian-6-persiapan-file-production/&quot; title=&quot;belajar-angular-bagian-6-persiapan-file-production&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 6 - Persiapan File Production&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Seperti juga pada versi sebelumnya, Angular juga menyediakan beberapa built-in Pipe yang bisa kita gunakan langsung seperti &lt;code&gt;DatePipe&lt;/code&gt;, &lt;code&gt;UpperCasePipe&lt;/code&gt;, &lt;code&gt;LowerCasePipe&lt;/code&gt;, &lt;code&gt;CurrencyPipe&lt;/code&gt; dan &lt;code&gt;PercentPipe&lt;/code&gt;. Namun dari beberapa Pipe yang disediakan ada kalanya kita butuh sesuatu yang belum disediakan oleh Angular dan membuat sendiri Pipe/Filter sesuai dengan kebutuhan kita. Pada tulisan kali ini kita akan belajar bagaimana membuat custom Pipe di Angular, silahkan disimak langkah-langkahnya berikut ini :&lt;/p&gt;
&lt;p&gt;Sebelumnya kita akan sedikit bernostalgia bagaimana membuat Filter di AngularJS v.1.x, kodenya kurang lebih akan seperti ini :&lt;/p&gt;
&lt;pre&gt;var commonFilter = angular.module('irfan.custom.filters', []);

commonFilter.filter('truncate', function() {
  return function(text, length) {
    if (text) {
      var ellipsis = text.length &amp;gt; length ? &quot;...&quot; : &quot;&quot;;
      return text.slice(0, length) + ellipsis;
    }
    return text;
  };
});
&lt;/pre&gt;

&lt;p&gt;Mudah bukan ? Angular pun sebenarnya mudah juga, mari kita belajar untuk membuatnya di Angular :&lt;/p&gt;
&lt;p&gt;Pada contoh kali ini saya tidak sempat membuat Pipe yang bermanfaat namun hanya menunjukkan bagaimana untuk membuatnya saja, Anda bisa sesuaikan dengan kebutuhan Anda masing-masing. Saya akan menambahkan String didepan String yang menjadi value awalnya.&lt;/p&gt;
&lt;p&gt;Pertama, saya akan buat file custom Pipe dengan nama &lt;code&gt;film-title.pipe.ts&lt;/code&gt; yang isinya :&lt;/p&gt;
&lt;pre&gt;import { Pipe, PipeTransform } from '@angular/core';
@Pipe({
  name: 'filmTitle'
})
export class FilmTitlePipe implements PipeTransform {
  transform(value: string): string {
    let res = 'Film '+ value
    return res;
  }
}
&lt;/pre&gt;

&lt;p&gt;Bisa dilihat dari kode diatas, bahwa untuk membuat Pipe custom kita membutuhkan dua depedency dari &lt;code&gt;@angular/core&lt;/code&gt; yakni &lt;code&gt;Pipe&lt;/code&gt; dan &lt;code&gt;PipeTransform&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pipe&lt;/code&gt; akan kita gunakan sebagai decorator seperti kode diatas dimana decorator ini mendefinisikan nama Pipe yang nanti bisa kita pakai di view template kita.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PipeTransform&lt;/code&gt; sendiri merupakan interface yang akan kita implement dan menggunakan fungsi &lt;code&gt;transform&lt;/code&gt; yang ada didalamnya untuk meletakan kode custom Pipe kita. fungsi transform ini default nya akan menerima satu parameter &lt;code&gt;value&lt;/code&gt; yang bisa kita define tipenya, kita juga bisa menambahkan parameter tambahan bila memang dibutuhkan. Fungsi transform ini harus me-return suatu data dimana saya me-return data dengan tipe string dan menambahakan string tambahan sebelum di return.&lt;/p&gt;
&lt;p&gt;Selesai membuat file tersebut, kita perlu menambahkan file Pipe tersebut kedalam &lt;code&gt;app.module.ts&lt;/code&gt; seperti contoh berikut :&lt;/p&gt;
&lt;pre&gt;... // other code
import { FilmTitlePipe } from './Pipe/film-title/film-title.pipe';


@NgModule({

  imports: [
    ... // other code
  ],

  declarations: [
    ... // other code
    FilmTitlePipe
  ],

  providers: [
    ... // other code
  ],

  bootstrap: [ AppComponent ]
})
export class AppModule { }
&lt;/pre&gt;

&lt;p&gt;Seperti Anda bisa lihat kita menambahkan depedency Pipe yang kita buat kedalam Array &lt;code&gt;declarations&lt;/code&gt; agar bisa digunakan di view template kita.&lt;/p&gt;
&lt;p&gt;Untuk menggunakan Pipe yang sudah kita buat sangat mudah bisa dengan cara seperti ini :&lt;/p&gt;
&lt;pre&gt;&amp;lt;tr *ngFor=&quot;let film of films; let i = index; trackBy:trackByEpisodId;&quot;&amp;gt;
  &amp;lt;td&amp;gt;{{ i+1 }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ film.title | filmTitle }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ film.episode_id }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ film.release_date }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Bagaimana ? mudah bukan ? cara diatas adalah cara manual untuk membuat Pipe, sebenarnya &lt;code&gt;Angular-CLI&lt;/code&gt; telah menyediakan fitur untuk men-generate custom pipe kita tadi dengan cara :&lt;/p&gt;
&lt;pre&gt;ng generate pipe pipe_name
&lt;/pre&gt;

&lt;p&gt;Dengan begitu Angular-CLI akan menyiapkan file custom Pipe dan akan otomatis menambahkan depedency nya ke dalam &lt;code&gt;app.module.ts&lt;/code&gt; kita.&lt;/p&gt;
&lt;p&gt;Sekian tulisan dari saya, semoga bermafaat.&lt;/p&gt;
&lt;p&gt;Kode yang digunakan dalam tutorial ini diambil dari repository &lt;a href=&quot;https://github.com/mazipan/ng2-starwars&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/mazipan/ng2-starwars&lt;/a&gt; dan bisa dilihat demo nya di : &lt;a href=&quot;http://mazipan.github.io/ng2-starwars/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://mazipan.github.io/ng2-starwars/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Silahkan dipelajari source code nya.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana.&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Belajar Angular - Bagian 4 - Membuat Route</title>
      <link>https://mazipan.github.io/blogs/articles/belajar-angular-bagian-4-membuat-route.md/</link>
      <pubDate>Fri, 09 Jun 2017 09:15:26 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/belajar-angular-bagian-4-membuat-route.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 825px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/belajar-angular-bagian-4-mazipanneh.jpg&quot; alt=&quot;Belajar Angular - Bagian 4 - Membuat Route&quot; width=&quot;825&quot; height=&quot;35&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Belajar Angular - Bagian 4 - Membuat Route&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Belajar Angular - Bagian 4 - Membuat Route&lt;/strong&gt; - Kita akan membahas mengenai cara membuat Routing menggunakan framework &lt;strong&gt;Angular&lt;/strong&gt;. Routing di frontend javascript framework memang seperti sudah menjadi feature yang diwajibkan ada jaman sekarang, &lt;strong&gt;Angular&lt;/strong&gt; dalam hal ini seperti biasa yang tidak mengikuti cara framework modern lain dalam menghadirkan Routing nya yang memilih dipisah dari framework utamanya, &lt;strong&gt;Angular&lt;/strong&gt; justru selalu hadir dengan paket lengkap termasuk dengan built-in Routing didalamnya. Pada versi 2.x sendiri &lt;strong&gt;Angular&lt;/strong&gt; memisahkan repository untuk Routing sehingga Anda akan melihat depedency &lt;code&gt;@angular/router&lt;/code&gt; pada &lt;code&gt;package.json&lt;/code&gt;, namun bedanya bahwa Router pada Angular di maintain secara official oleh team mereka dan selalu release sebaga satu kesatuan framework bersamaan dengan core nya.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tulisan ini merupakan serial pembahasan mengenai framework &lt;strong&gt;Angular&lt;/strong&gt;, Anda mungkin ingin membaca tulisan lainnya berikut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project&quot;&gt;Bagian 1 - Pengenalan dan Inisialisasi Project&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/05/belajar-angular-bagian-2-membuat-komponen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-2-membuat-komponen&quot;&gt;Bagian 2 - Membuat Komponen&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-3-membuat-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-3-membuat-service&quot;&gt;Bagian 3 - Membuat Service&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-4-membuat-route/&quot; title=&quot;belajar-angular-bagian-4-membuat-route&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 4 - Membuat Route&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-5-membuat-custom-pipe-atau-filter/&quot; title=&quot;belajar-angular-bagian-5-membuat-custom-pipe-atau-filter&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 5 - Membuat Custom Pipe atau Filter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/07/belajar-angular-bagian-6-persiapan-file-production/&quot; title=&quot;belajar-angular-bagian-6-persiapan-file-production&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 6 - Persiapan File Production&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Baik silahkan disimak, berikut adalah cara sederhana membuat Routing menggunakan Angular :&lt;/p&gt;
&lt;p&gt;Pertama, kita buat file baru &lt;code&gt;app.routing.module.ts&lt;/code&gt;. File ini berisi routing kita serta komponen apa yang akan ditampilkan pada routing tersebut. Berikut kodenya :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { NgModule } from &amp;#39;@angular/core&amp;#39;;
import { RouterModule, Routes } from &amp;#39;@angular/router&amp;#39;;

import { FilmListComponent } from &amp;#39;./Film/film-list.component&amp;#39;;
import { PeopleListComponent } from &amp;#39;./People/people-list.component&amp;#39;;
import { PlanetListComponent } from &amp;#39;./Planet/planet-list.component&amp;#39;;
import { SpeciesListComponent } from &amp;#39;./Species/species-list.component&amp;#39;;
import { StarshipListComponent } from &amp;#39;./Starship/starship-list.component&amp;#39;;
import { VehicleListComponent } from &amp;#39;./Vehicle/vehicle-list.component&amp;#39;;

const appRoutes: Routes = [
  { path: &amp;#39;&amp;#39;, redirectTo: &amp;#39;film&amp;#39;, pathMatch: &amp;#39;full&amp;#39; },
  { path: &amp;#39;film&amp;#39;,  component: FilmListComponent},
  { path: &amp;#39;planet&amp;#39;, component: PlanetListComponent },
  { path: &amp;#39;people&amp;#39;, component: PeopleListComponent },
  { path: &amp;#39;species&amp;#39;, component: SpeciesListComponent },
  { path: &amp;#39;starship&amp;#39;, component: StarshipListComponent },
  { path: &amp;#39;vehicle&amp;#39;, component: VehicleListComponent }
];

@NgModule({
  imports: [
    RouterModule.forRoot(appRoutes, { useHash: true })
  ],
  exports: [
    RouterModule
  ]
})
export class AppRoutingModule { }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bisa dilihat, bahwa untuk membuat Routing di Angular kita butuh &lt;code&gt;{ RouterModule, Routes }&lt;/code&gt; sebagai library utama pengatur Routing. Setelahnya kita define Route tersebut seperti terlihat pada potongan kode dari kode diatas berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const appRoutes: Routes = [
  { path: &amp;#39;&amp;#39;, redirectTo: &amp;#39;film&amp;#39;, pathMatch: &amp;#39;full&amp;#39; },
  { path: &amp;#39;film&amp;#39;,  component: FilmListComponent},
  { path: &amp;#39;planet&amp;#39;, component: PlanetListComponent },
  { path: &amp;#39;people&amp;#39;, component: PeopleListComponent },
  { path: &amp;#39;species&amp;#39;, component: SpeciesListComponent },
  { path: &amp;#39;starship&amp;#39;, component: StarshipListComponent },
  { path: &amp;#39;vehicle&amp;#39;, component: VehicleListComponent }
];&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Membuat object dengan tipe class &lt;code&gt;Routes&lt;/code&gt; dan menjelaskan path dan komponen yang akan digunakan.&lt;/p&gt;
&lt;p&gt;Setelah membuat file ini, kita akan meng-include-kan di &lt;code&gt;app.module.ts&lt;/code&gt; kita sebagai berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { NgModule }      from &amp;#39;@angular/core&amp;#39;;
import { BrowserModule } from &amp;#39;@angular/platform-browser&amp;#39;;
import { HttpModule, JsonpModule } from &amp;#39;@angular/http&amp;#39;;
// Routing Module
import { AppRoutingModule }  from &amp;#39;./app.routing.module&amp;#39;;

@NgModule({

  imports: [
    BrowserModule,
    HttpModule,
    JsonpModule,
    AppRoutingModule
  ],

  declarations: [
    ... // other code
  ],

  providers: [
    ... // other code
  ],

  bootstrap: [ AppComponent ]
})
export class AppModule { }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Karena kita membuat file routing kita tersebut sebagai &lt;code&gt;module&lt;/code&gt;, maka kita bisa menambahkan di bagian &lt;code&gt;imports&lt;/code&gt; pada file &lt;code&gt;app.module.ts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Berikutnya kita akan meletakan kode tambahan di &lt;code&gt;app.component.html&lt;/code&gt; kita, dimana kita harus menambahkan &lt;code&gt;&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;&lt;/code&gt;, sehingga file tersebut akan menjadi seperti berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;HeaderBlock&amp;gt;&amp;lt;/HeaderBlock&amp;gt;
  &amp;lt;main role=&amp;quot;main&amp;quot; class=&amp;quot;site__main main&amp;quot;&amp;gt;
    &amp;lt;nav class=&amp;quot;main__nav nav&amp;quot;&amp;gt;
      &amp;lt;NavigationListBlock&amp;gt;&amp;lt;/NavigationListBlock&amp;gt;
      &amp;lt;FooterBlock&amp;gt;&amp;lt;/FooterBlock&amp;gt;
    &amp;lt;/nav&amp;gt;
    &amp;lt;article class=&amp;quot;main__content content&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;content__wrapper&amp;quot;&amp;gt;
        &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/article&amp;gt;
  &amp;lt;/main&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Terakhir, kita akan menambahkan component yang digunakan untuk pindah antar Routing ini atau navigasi antar route. Cara membuatnya sama saja dengan bagaimana kita membuat komponen sederhana, saya hanya akan membagikan sepotong kode view nya saja, berikut kode view dari file &lt;code&gt;navigation.component.html&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul class=&amp;quot;nav__wrapper&amp;quot;&amp;gt;
  &amp;lt;li class=&amp;quot;nav__item&amp;quot; routerLink=&amp;quot;/film&amp;quot; routerLinkActive=&amp;quot;nav__item--active&amp;quot;&amp;gt;
    &amp;lt;a routerLink=&amp;quot;/film&amp;quot;&amp;gt;
      &amp;lt;i class=&amp;quot;nav__icon fa fa-film&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Film
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;nav__item&amp;quot; routerLink=&amp;quot;/planet&amp;quot; routerLinkActive=&amp;quot;nav__item--active&amp;quot;&amp;gt;
    &amp;lt;a routerLink=&amp;quot;/planet&amp;quot;&amp;gt;
      &amp;lt;i class=&amp;quot;nav__icon fa fa-globe&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Planet
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;nav__item&amp;quot; routerLink=&amp;quot;/vehicle&amp;quot; routerLinkActive=&amp;quot;nav__item--active&amp;quot;&amp;gt;
    &amp;lt;a routerLink=&amp;quot;/vehicle&amp;quot;&amp;gt;
      &amp;lt;i class=&amp;quot;nav__icon fa fa-car&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Vehicle
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;nav__item&amp;quot; routerLink=&amp;quot;/starship&amp;quot; routerLinkActive=&amp;quot;nav__item--active&amp;quot;&amp;gt;
    &amp;lt;a routerLink=&amp;quot;/starship&amp;quot;&amp;gt;
      &amp;lt;i class=&amp;quot;nav__icon fa fa-space-shuttle&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Starship
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;nav__item&amp;quot; routerLink=&amp;quot;/species&amp;quot; routerLinkActive=&amp;quot;nav__item--active&amp;quot;&amp;gt;
    &amp;lt;a routerLink=&amp;quot;/species&amp;quot;&amp;gt;
      &amp;lt;i class=&amp;quot;nav__icon fa fa-paw&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Species
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;nav__item&amp;quot; routerLink=&amp;quot;/people&amp;quot; routerLinkActive=&amp;quot;nav__item--active&amp;quot;&amp;gt;
    &amp;lt;a routerLink=&amp;quot;/people&amp;quot;&amp;gt;
      &amp;lt;i class=&amp;quot;nav__icon fa fa-users&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; People
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bagian penting dari file ini adalah mengganti &lt;code&gt;href&lt;/code&gt; pada element &lt;code&gt;a&lt;/code&gt; menggunakan &lt;code&gt;routerLink=&amp;quot;/url&amp;quot;&lt;/code&gt;, kita juga bisa men-set class active pada suatu router yang memang sedang aktif dengan menambahkan class di attribut &lt;code&gt;routerLinkActive&lt;/code&gt;. Kode diatas agak aneh karena saya menempelkan class active pada &lt;code&gt;li&lt;/code&gt; bukan pada &lt;code&gt;a&lt;/code&gt;, jadi saya butuh dua &lt;code&gt;routerLink&lt;/code&gt; bertumpuk, ini bisa diubah tergantung kondisi Anda.&lt;/p&gt;
&lt;p&gt;Sekian tulisan dari saya, masih banyak lagi fitur Routing dari Angular yang belum sempat kita ulik bareng-bareng seperti melempar parameter pada router, membuat nested router, membuat router tanpa hash, dll. Router pada Angular versi 2.x kali ini bisa dibilang cukup memuaskan dan bisa bersaing dengan berbagai fremework modern lainnya.&lt;/p&gt;
&lt;p&gt;Kode yang digunakan dalam tutorial ini diambil dari repository &lt;a href=&quot;https://github.com/mazipan/ng2-starwars&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/mazipan/ng2-starwars&lt;/a&gt; dan bisa dilihat demo nya di : &lt;a href=&quot;http://mazipan.github.io/ng2-starwars/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://mazipan.github.io/ng2-starwars/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Silahkan dipelajari source code nya.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana.&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Belajar Angular - Bagian 3 - Membuat Service</title>
      <link>https://mazipan.github.io/blogs/articles/belajar-angular-bagian-3-membuat-service.md/</link>
      <pubDate>Mon, 29 May 2017 13:41:32 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/belajar-angular-bagian-3-membuat-service.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 750px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/belajar-angular-bagian-3-mazipanneh.jpg&quot; alt=&quot;Belajar Angular - Bagian 3 - Membuat Service&quot; width=&quot;750&quot; height=&quot;422&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Belajar Angular - Bagian 3 - Membuat Service&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Belajar Angular - Bagian 3 - Membuat Service&lt;/strong&gt; - Service atau Provider dalam Angular sendiri sudah diperkenalkan sejak AngularJS v.1.x, dimana service menjadi bagian yang &lt;code&gt;Injectable&lt;/code&gt; dari kode Angular sehingga pada prakteknya sering digunakan sebagai pembungkusan (Encapsulation) dari suatu logic. Angular sendiri sudah menggunakan depedency injection (DI) sejak AngularJS versi 1.x sehingga lebih mudah untuk meng-inject atau memasukkan service kedalam komponen yang ingin menggunakannya. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tulisan ini merupakan serial pembahasan mengenai framework &lt;strong&gt;Angular&lt;/strong&gt;, Anda mungkin ingin membaca tulisan lainnya berikut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project&quot;&gt;Bagian 1 - Pengenalan dan Inisialisasi Project&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/05/belajar-angular-bagian-2-membuat-komponen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-2-membuat-komponen&quot;&gt;Bagian 2 - Membuat Komponen&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-3-membuat-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-3-membuat-service&quot;&gt;Bagian 3 - Membuat Service&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-4-membuat-route/&quot; title=&quot;belajar-angular-bagian-4-membuat-route&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 4 - Membuat Route&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-5-membuat-custom-pipe-atau-filter/&quot; title=&quot;belajar-angular-bagian-5-membuat-custom-pipe-atau-filter&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 5 - Membuat Custom Pipe atau Filter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/07/belajar-angular-bagian-6-persiapan-file-production/&quot; title=&quot;belajar-angular-bagian-6-persiapan-file-production&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 6 - Persiapan File Production&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bila kita sudah belajar Angular v.1.x kita biasa melakukan injection service dengan cara kurang lebih seperti ini :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;js&quot;&gt;var irfanCtrl = angular.module('irfan.basic.controller',[]);

irfanCtrl.controller('irfan.ctrl', ['$scope', 'irfanShareObject', irfanCtrlFunc]);

function irfanCtrlFunc($scope, irfanShareObject){
  // no data
}
&lt;/pre&gt;

&lt;p&gt;Bisa dilihat kode diatas adalah bagaimana AngularJS 1.x melakukan depedency injection service &lt;code&gt;irfanShareObject&lt;/code&gt; ke dalam controller, tidak perlu ada instance baru untuk tiap kali penggunaan service dalam controller, cukup mendefinisikan service yang akan digunakan dalam pembuatan controllernya. &lt;/p&gt;
&lt;p&gt;Untuk isi service nya pun, bisa mulai dari wrap logic sederhana sampai logic yang dirasa terlalu berat untuk langsung dibuat di controller sehingga developer memilih untuk membungkusnya dalam suatu service. Berikut contoh kode service dalam AngularJS 1.x :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;js&quot;&gt;var irfanServices = angular.module('irfan.basic.service', []);
irfanServices.factory('irfanShareObject', [irfanServicesFunction]);

function irfanServicesFunction() {

    var fullName= &quot;&quot;;

    return {
        setFullName: function(firtname, lastname) {
            if(typeof firtname !== 'undefined' &amp;&amp; firtname !== '') {

               fullName = firtname;
            }
            if(typeof lastname !== 'undefined' &amp;&amp; lastname !== '') {

               fullName += lastname;
            }

            return fullName;
        },
        getFullName: function() {
            return fullName;
        }
    };
}
&lt;/pre&gt;

&lt;p&gt;Isinya logic sederhana untuk mencari fullname dari sebuah firstname dan lastname.&lt;/p&gt;
&lt;p&gt;Setelah sekilas kita #throwback ke AngularJS 1.x maka kita coba membuat service di Anglular versi 2 keatas, untuk studi kasus sendiri saya akan coba contohkan membuat service yang mem-wrap logic untuk GET data dari suatu public API untuk kemudian memformat sesuai dengan kebutuhan client. Berikut langkah-langkahnya :&lt;/p&gt;
&lt;p&gt;Kita akan menggunakan API dari Starwars API (&lt;a href=&quot;https://swapi.co&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://swapi.co&lt;/a&gt;), dimana saya akan mencontohkan GET data Film dari API tersebut. Url API dari list Film sendiri ada di &lt;a href=&quot;https://swapi.co/api/films/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://swapi.co/api/films/&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Langkah pertama sebelum memulai semua nya, saya akan menyiapkan beberapa class &lt;code&gt;Film&lt;/code&gt; yang akan digunakan sebagai Object untuk menampung data hasil response dari API tersebut. Karena datanya terlalu banyak, dan saya capek untuk menulis semuanya maka saya hanya akan ambil beberapa data saja. Berikut contoh kode class &lt;code&gt;Film&lt;/code&gt; :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;js&quot;&gt;export class Film {
  constructor(
    public title: string,
    public episode_id: number,
    public opening_crawl: string,
    public director: string,
    public producer: string,
    public release_date: string,
  ) { }
}
&lt;/pre&gt;

&lt;p&gt;Ya, seperti itulah penampakannya. Dengan typescript kita bisa mendefinisikan tipe data dari masing-masing properti &lt;code&gt;Film&lt;/code&gt; yang akan kita ambil.&lt;/p&gt;
&lt;p&gt;Setelahnya saya akan membuat beberapa helper class yang akan saya butuhkan nanti (*ini tidak harus dipisah, tapi saya lebih senang menggunakan helper dibandingkan langsung menulis logic ditempat yang sama). &lt;/p&gt;
&lt;p&gt;Saya akan membuat helper &lt;code&gt;UrlCollection&lt;/code&gt; yang isinya :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;js&quot;&gt;export class UrlCollection {
  public static readonly FILM = &quot;https://swapi.co/api/films/&quot;
  public static readonly PEOPLE = &quot;https://swapi.co/api/people/&quot;
  public static readonly PLANET = &quot;https://swapi.co/api/planets/&quot;
  public static readonly SPECIES = &quot;https://swapi.co/api/species/&quot;
  public static readonly STARSHIP = &quot;https://swapi.co/api/starships/&quot;
  public static readonly VEHICLE = &quot;https://swapi.co/api/vehicles/&quot;
}
&lt;/pre&gt;

&lt;p&gt;Ini merupakan list url dari API yang akan di hit nanti, sebenarnya akan lebih baik jika menggunakan &lt;code&gt;enum / enumeration&lt;/code&gt; untuk membuat class semacam ini. Namun karena pada saat menulis artikel ini saya belum pernah menggunakan &lt;code&gt;enum&lt;/code&gt; di Angular maka saya cari yang cepat di kerjakan saja. 🙂 &lt;/p&gt;
&lt;p&gt;Berikutnya saya akan membuat helper class &lt;code&gt;ObjectConverter&lt;/code&gt; yang isinya :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;js&quot;&gt;import { Film }  from '../Film/Film'

export class ObjectConverter {

  public convertResponseToFilm(r:any): Film{

    let film = ({
      title: r.title,
      episode_id: r.episode_id,
      opening_crawl: r.opening_crawl,
      director: r.director,
      producer: r.producer,
      release_date: r.release_date,
    });

    return film
  };

}
&lt;/pre&gt;

&lt;p&gt;Class ini saya gunakan untuk mem-casting data dari tipe &lt;code&gt;any&lt;/code&gt; ke tipe &lt;code&gt;Film&lt;/code&gt;, namun setelah saya baca-baca lagi ternyata Typescript mempunyai syntax yang lebih sederhana dibandingkan cara manual yang saya lakukan. Silahkan baca : &lt;a href=&quot;http://acdcjunior.github.io/typescript-cast-object-to-other-type-or-instanceof.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://acdcjunior.github.io/typescript-cast-object-to-other-type-or-instanceof.html&lt;/a&gt;. Karena pada saat saya membuat artikel ini saya belum sempat baca artiel diatas jadi sudahlah biarkan saja saya membodohi diri sendiri dengan kode diatas ya.&lt;/p&gt;
&lt;p&gt;Berikutnya kita akan membuat Service untuk meng-GET data, berikut kodenya :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;js&quot;&gt;import { Injectable } from '@angular/core'
import { Http, Response} from '@angular/http'
import { Film } from './Film'
import {Observable} from 'rxjs/Rx'

// Import RxJs required methods
import 'rxjs/add/operator/map'
import 'rxjs/add/operator/catch'

import { UrlCollection } from '../Helpers/UrlCollection'
import { ObjectConverter } from '../Helpers/ObjectConverter'

@Injectable()
export class FilmService {
  // Resolve HTTP using the constructor
  constructor (
    private http: Http,
  ) {}

  getFilms() : Observable&amp;lt;Film[]&amp;gt; {
    let objectConverter = new ObjectConverter()

    function mapFilmResponse(response:Response): Film[]{

      return response.json().results.map(objectConverter.convertResponseToFilm)
    }

    return this.http.get(UrlCollection.FILM)
      .map(mapFilmResponse)
      .catch((error:any) =&amp;gt; Observable.throw(error.json().error || 'Server error'))

  }

}
&lt;/pre&gt;

&lt;p&gt;Bisa dilihat kode diatas, pertama kita membutuhkan depedency &lt;code&gt;import { Injectable } from &amp;#39;@angular/core&amp;#39;&lt;/code&gt;, ini merupakan salah satu syarat agar service kita bisa digunakan di component nantinya. Dengan menggunakan depedency ini kita bisa menambahkan decorator &lt;code&gt;@Injectable()&lt;/code&gt; pada saat pembuatan class service ini. &lt;/p&gt;
&lt;p&gt;Kita juga menambahkan depedency &lt;code&gt;import { Http, Response} from &amp;#39;@angular/http&amp;#39;&lt;/code&gt; untuk melakukan getting data dan mendapatkan balikan dalam bentuk Object Response. Oh iya, &lt;code&gt;http&lt;/code&gt; ini mesti di definisikan sebagai &lt;code&gt;constructor&lt;/code&gt; ya. &lt;/p&gt;
&lt;p&gt;Terakhir kita butuh bantuan dari RxJS yakni &lt;code&gt;import {Observable} from &amp;#39;rxjs/Rx&amp;#39;&lt;/code&gt;, &lt;code&gt;import &amp;#39;rxjs/add/operator/map&amp;#39;&lt;/code&gt; dan &lt;code&gt;import &amp;#39;rxjs/add/operator/catch&amp;#39;&lt;/code&gt;. Tapi tenang saja karena by default semuanya sudah menjadi depedency wajib bagi Angular, jadi kita tidak perlu lagi menambahkan di list depedency di package.json kita. &lt;/p&gt;
&lt;p&gt;Untuk sisanya bisa coba dipahami kode diatas.&lt;/p&gt;
&lt;p&gt;Setelah membuat service ini kita perlu menambahkan file ini sebagai provider di file &lt;code&gt;app.module.ts&lt;/code&gt;, berikut kurang lebih kodenya :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;js&quot;&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';

import { AppComponent } from './app.component';
import { HeaderComponent } from './Header/header.component';
import { FilmListComponent } from './Film/film-list.component';


import { FilmService } from './Film/film-list.service';

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,
    FilmListComponent 
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule
  ],
  providers: [
    FilmService
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/pre&gt;

&lt;p&gt;Setelah ini kita akan buat contoh bagaimana memanggil file service ini di sebuah component. Kita membuat component &lt;code&gt;/Film/film-list.component&lt;/code&gt; dengan kode kurang lebih seperti ini :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;js&quot;&gt;import { Component, OnInit } from '@angular/core'

import { FilmService } from './film-list.service'
import { Film } from './Film'

@Component({
  moduleId: module.id,
  selector: 'film-list',
  templateUrl: './film-list.component.html'
})
export class FilmListComponent implements OnInit {

  films: Film[]

  constructor (
    private filmService: FilmService
  ){}

  ngOnInit () {
    this.loadDataFilms()
  }

  loadDataFilms () {
    let self = this
    self.filmService.getFilms()
      .subscribe(
        films =&amp;gt; self.films = films, //Bind to view
        err =&amp;gt; {
          console.log(err)
        })
  }

  trackByEpisodId (index:number, film:Film) {
    return film.episode_id
  }
}
&lt;/pre&gt;

&lt;p&gt;Kita hanya perlu menambahkan &lt;code&gt;FilmService&lt;/code&gt; sebagai constructor di component kita maka dengan begitu kita bisa menggunakan fungsi di dalam service tersebut. Seperti pada kode diatas kita bisa memanggil &lt;code&gt;filmService.getFilms()&lt;/code&gt; dengan mudahnya. &lt;/p&gt;
&lt;p&gt;Saya juga menambahkan fungsi &lt;code&gt;trackByEpisodId(index:number, film:Film)&lt;/code&gt; untuk digunakan di view template karena pada saat saya membuat contoh kode ini saya belum menemukan built-in &lt;code&gt;trackBy&lt;/code&gt; seperti pada AngularJS v.1.x.&lt;/p&gt;
&lt;p&gt;Sedangkan isi html view template dari component ini sebagai berikut :&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;html&quot;&gt;&amp;lt;h2&amp;gt;Films&amp;lt;/h2&amp;gt;
&amp;lt;table class=&quot;table&quot;&amp;gt;
    &amp;lt;thead class=&quot;table__head&quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;#&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Title&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Episode&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Release Date&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody class=&quot;table__body&quot;&amp;gt;
        &amp;lt;tr *ngFor=&quot;let film of films; let i = index; trackBy:trackByEpisodId;&quot;&amp;gt;
            &amp;lt;td&amp;gt;{{ i+1 }}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{ film.title }}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{ film.episode_id }}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{ film.release_date }}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Kode yang digunakan dalam tutorial ini diambil dari repository &lt;a href=&quot;https://github.com/mazipan/ng2-starwars&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/mazipan/ng2-starwars&lt;/a&gt; dan bisa dilihat demo nya di : &lt;a href=&quot;http://mazipan.github.io/ng2-starwars/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://mazipan.github.io/ng2-starwars/&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Silahkan dipelajari source code nya.&lt;/p&gt;
&lt;p&gt;Demikian sekilas pembahasan awal mengenai framework Angular, semoga bermanfaat tulisan yang tidak seberapa ini. &lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana. &lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cara Berkomunikasi Antar Component di Vue.js</title>
      <link>https://mazipan.github.io/blogs/articles/cara-berkomunikasi-antar-component-di-vue-js.md/</link>
      <pubDate>Thu, 25 May 2017 19:24:50 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/cara-berkomunikasi-antar-component-di-vue-js.md/</guid>
      <author></author>
      <description>&lt;section class=&quot;section section--body section--first&quot;&gt;
&lt;div class=&quot;section-content&quot;&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
&lt;p id=&quot;b6b4&quot; class=&quot;graf graf--p graf-after--figure graf--trailing&quot;&gt;Seperti sebelumnya sudah dijelaskan bahwa komponen dalam Vue.js bersifat independen dan saling terisolasi satu sama lain, sehingga memang dibutuhkan beberapa workaround untuk saling berkomunikasi antar komponen tersebut baik ketika ingin saling melempar data, melempar sebuah event dan lainnya.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[caption id=”” align=”aligncenter” width=”800”]&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*QI3qnLMvreIbjNHuNJL7Kw.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;399&quot; /&gt; &lt;em&gt;Komunikasi antar komponen di Vue.js (Sumber : &lt;a href=&quot;https://alligator.io&quot;&gt;https://alligator.io&lt;/a&gt;)&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;section section--body&quot;&gt;
&lt;div class=&quot;section-divider&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;section-content&quot;&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
&lt;h3 id=&quot;7b3e&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;Props&lt;/h3&gt;
&lt;p id=&quot;ec61&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Props merupakan pendekatan paling mudah dan paling diajurkan ketika ingin melempar data dari satu komponen ke komponen lainnya. Pendekatan paling pas menggunakan Props adalah ketika kita ingin melempar data hanya kepada satu komponen lain. Props merupakan one-way data flow sehingga hanya akan berjalan searah yakni dari parent ke child yang menerima Props tersebut, sementara child tidak bisa mengubah nilai Props yang dia terima dan tidak berhak pula melempar data ke parent nya.&lt;/p&gt;
&lt;p id=&quot;a85a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Berikut contoh melemparkan data dengan Props kepada komponen lain :&lt;/p&gt;

&lt;figure id=&quot;6750&quot; class=&quot;graf graf--figure graf-after--p graf--trailing&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder-fill&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&quot; data-image-id=&quot;1*qNA1dleY_kvNtpC0ptqCPA.png&quot; data-width=&quot;874&quot; data-height=&quot;160&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*qNA1dleY_kvNtpC0ptqCPA.png&quot; data-scroll=&quot;native&quot;&gt;&lt;canvas class=&quot;progressiveMedia-canvas js-progressiveMedia-canvas&quot; width=&quot;75&quot; height=&quot;11&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;[caption id=”” align=”aligncenter” width=”720”]&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*qNA1dleY_kvNtpC0ptqCPA.png&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;131&quot; data-src=&quot;https://cdn-images-1.medium.com/max/720/1*qNA1dleY_kvNtpC0ptqCPA.png&quot; /&gt; &lt;em&gt;Contoh Props di &lt;a href=&quot;https://alligator.io&quot;&gt;https://alligator.io&lt;/a&gt;&lt;/em&gt;[/caption]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;section section--body&quot;&gt;
&lt;div class=&quot;section-divider&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;section-content&quot;&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
&lt;h3 id=&quot;55d0&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;Events&lt;/h3&gt;
&lt;p id=&quot;2ba6&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Kadangkala selain melemparkan data, kita diharuskan pula melempar Event kepada komponen lain. Maka untuk mengatasi kebutuhan ini, kita bisa menggunakan Events yang dilemparkan ke komponen lain. Sama seperti Props maka penggunaan Events sangat baik bila dilakukan antar 2 komponen. Events juga merupakan one-way flow sehingga child hanya menerima apa yang sudah diberikan oleh parentnya.&lt;/p&gt;
&lt;p id=&quot;35ab&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Berikut contoh melemparkan Events ke komponen lain :&lt;/p&gt;

&lt;figure id=&quot;eba5&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder-fill&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&quot; data-image-id=&quot;1*3Tth3UmhaHMGm9s2nwcxZQ.png&quot; data-width=&quot;873&quot; data-height=&quot;160&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*3Tth3UmhaHMGm9s2nwcxZQ.png&quot; data-scroll=&quot;native&quot;&gt;&lt;canvas class=&quot;progressiveMedia-canvas js-progressiveMedia-canvas&quot; width=&quot;75&quot; height=&quot;11&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;[caption id=”” align=”alignnone” width=”720”]&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*3Tth3UmhaHMGm9s2nwcxZQ.png&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;131&quot; data-src=&quot;https://cdn-images-1.medium.com/max/720/1*3Tth3UmhaHMGm9s2nwcxZQ.png&quot; /&gt; Contoh Events di &lt;a href=&quot;https://alligator.io%5B/caption%5D&quot;&gt;https://alligator.io[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p id=&quot;2cc5&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Dan untuk menjalankan Events yang dilemparkan parent maka di komponen child kita bisa menggunakan &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;$emit &lt;/em&gt;&lt;/strong&gt;untuk mengeksekusi Events tersebut. Kita juga bisa menyelipkan parameter ketika melakukan Emit terhadap Events.&lt;/p&gt;
&lt;p id=&quot;465e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Berikut contoh melakukan Emit terhadap sebuah events :&lt;/p&gt;

&lt;figure id=&quot;8e36&quot; class=&quot;graf graf--figure graf-after--p graf--trailing&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder-fill&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&quot; data-image-id=&quot;1*AWA5m3-72v8qBw1b092ftQ.png&quot; data-width=&quot;882&quot; data-height=&quot;321&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*AWA5m3-72v8qBw1b092ftQ.png&quot; data-scroll=&quot;native&quot;&gt;&lt;canvas class=&quot;progressiveMedia-canvas js-progressiveMedia-canvas&quot; width=&quot;75&quot; height=&quot;25&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;[caption id=”” align=”aligncenter” width=”720”]&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*AWA5m3-72v8qBw1b092ftQ.png&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;262&quot; data-src=&quot;https://cdn-images-1.medium.com/max/720/1*AWA5m3-72v8qBw1b092ftQ.png&quot; /&gt; Contoh $emit di &lt;a href=&quot;https://alligator.io%5B/caption%5D&quot;&gt;https://alligator.io[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;section section--body&quot;&gt;
&lt;div class=&quot;section-divider&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;section-content&quot;&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
&lt;h3 id=&quot;a6d0&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;Refs&lt;/h3&gt;
&lt;p id=&quot;0d68&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Refs ($refs) memberikan kita akses terhadap methods dari sebuah komponen lain. Hal ini bukan suatu best practice namun terkadang kita membutuhkan akses langsung ke method di dalam suatu komponen child dan disinilah peran Refs dibutuhkan.&lt;/p&gt;
&lt;p id=&quot;064b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Berikut contoh yang diberikan oleh Vue.js dalam menggunakan Refs ini :&lt;/p&gt;

&lt;figure id=&quot;e9f1&quot; class=&quot;graf graf--figure graf-after--p graf--trailing&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder-fill&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&quot; data-image-id=&quot;1*-yqStP8GSvRhA-Z5UQh-Og.png&quot; data-width=&quot;608&quot; data-height=&quot;231&quot; data-scroll=&quot;native&quot;&gt;&lt;canvas class=&quot;progressiveMedia-canvas js-progressiveMedia-canvas&quot; width=&quot;75&quot; height=&quot;27&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;[caption id=”” align=”aligncenter” width=”608”]&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*-yqStP8GSvRhA-Z5UQh-Og.png&quot; alt=&quot;&quot; width=&quot;608&quot; height=&quot;231&quot; data-src=&quot;https://cdn-images-1.medium.com/max/720/1*-yqStP8GSvRhA-Z5UQh-Og.png&quot; /&gt; Contoh menggunakan $refs di &lt;a href=&quot;https://vuejs.org%5B/caption%5D&quot;&gt;https://vuejs.org[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;section section--body&quot;&gt;
&lt;div class=&quot;section-divider&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;section-content&quot;&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
&lt;h3 id=&quot;537e&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;Direct Access&lt;/h3&gt;
&lt;p id=&quot;7f03&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Kita bisa juga melakukan direct akses ke parent maupun child menggunakan &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;this.$parent&lt;/strong&gt; maupun &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;this.$child&lt;/strong&gt;, namun sama dengan $refs yang penggunaanya sebaiknya kita batasi pada hal-hal yang sudah tidak bisa diakali menggunakan cara sehat.&lt;/p&gt;

&lt;figure id=&quot;1703&quot; class=&quot;graf graf--figure graf-after--p graf--trailing&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder-fill&quot;&gt;&lt;/div&gt;

&lt;p&gt;[caption id=”” align=”aligncenter” width=”605”]&lt;img class=&quot;graf-image&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*L3Di5tH1nT1KU-Mwe05y5g.png&quot; alt=&quot;&quot; width=&quot;605&quot; height=&quot;93&quot; data-image-id=&quot;1*L3Di5tH1nT1KU-Mwe05y5g.png&quot; data-width=&quot;605&quot; data-height=&quot;93&quot; /&gt; Peringatan dari Vue.js mengenai direct access (Sumber : &lt;a href=&quot;https://vuejs.org/v2/api/#parent)%5B/caption%5D&quot;&gt;https://vuejs.org/v2/api/#parent)[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;section section--body&quot;&gt;
&lt;div class=&quot;section-divider&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;section-content&quot;&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
&lt;h3 id=&quot;f6de&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;Event Bus&lt;/h3&gt;
&lt;p id=&quot;c69b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Bila Events yang kita jelaskan diatas hanya bisa digunakan untuk komponen yang parent-child maka Event Bus adalah salah satu cara untuk berkomunikasi antar komponen yang tidak terikat dengan parent-child. Event Bus memanfaatkan instance baru dari Vue.js sebagai penampung dan kita akan membuat suatu hook baru ke dalam instance ini, kemudian komponen lain bisa mengeksekusi hook ini dengan melakukan $emit terhadap hook tersebut.&lt;/p&gt;
&lt;p id=&quot;cb7a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Berikut contoh komunikasi yang bukan parent-child di website &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://vuejs.org&quot;&gt;https://vuejs.org&lt;/a&gt; :&lt;/p&gt;

&lt;figure id=&quot;3695&quot; class=&quot;graf graf--figure graf-after--p graf--trailing&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder-fill&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&quot; data-image-id=&quot;1*BlM5TqbJmo4DMQjfY9BZnA.png&quot; data-width=&quot;607&quot; data-height=&quot;317&quot; data-scroll=&quot;native&quot;&gt;&lt;canvas class=&quot;progressiveMedia-canvas js-progressiveMedia-canvas&quot; width=&quot;75&quot; height=&quot;38&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;[caption id=”” align=”aligncenter” width=”607”]&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*BlM5TqbJmo4DMQjfY9BZnA.png&quot; alt=&quot;&quot; width=&quot;607&quot; height=&quot;317&quot; data-src=&quot;https://cdn-images-1.medium.com/max/720/1*BlM5TqbJmo4DMQjfY9BZnA.png&quot; /&gt; Contoh Event Bus (Sumber: &lt;a href=&quot;https://vuejs.org)%5B/caption%5D&quot;&gt;https://vuejs.org)[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;section section--body&quot;&gt;
&lt;div class=&quot;section-divider&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;section-content&quot;&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;
&lt;h3 id=&quot;10f9&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;State Management&lt;/h3&gt;
&lt;p id=&quot;7f76&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;State management memiliki fitur yakni menempatkan berbagai state dari berbagai komponen kedalam satu tempat sehingga mudah untuk digunakan ulang oleh komponen lain. Penggunaan state management atau menempatkan suatu state ke dalam state management paling pas adalah ketika suatu state akan diakses oleh lebih dari 2 komponen dalam satu aplikasi, karena menggunakan Props pasti akan sulit di-&lt;em class=&quot;markup--em markup--p-em&quot;&gt;maintain&lt;/em&gt;kedepannya. Namun menggunakan state management kadangkala juga menjadi terlalu bloated kalau hanya untuk menangani data yang hanya diakses oleh 2 komponen, pada kondisi ini menggunakan Props akan lebih bijak menurut saya.&lt;/p&gt;
&lt;p id=&quot;0a95&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;State management yang bisa digunakan oleh Vue.js sendiri ada banyak, bisa dilihat di &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://github.com/vuejs/awesome-vue#state-management&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/vuejs/awesome-vue#state-management&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;awesome-vue&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;. &lt;/em&gt;Namun kalau rekomendasi dari Vue.js adalah menggunakan &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://github.com/vuejs/vuex&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/vuejs/vuex&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Vuex&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;figure id=&quot;f170&quot; class=&quot;graf graf--figure graf-after--p graf--trailing&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder-fill&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&quot; data-image-id=&quot;1*-Dryjb1LkVIgEEsIWM-bxA.png&quot; data-width=&quot;1280&quot; data-height=&quot;866&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*-Dryjb1LkVIgEEsIWM-bxA.png&quot; data-scroll=&quot;native&quot;&gt;&lt;canvas class=&quot;progressiveMedia-canvas js-progressiveMedia-canvas&quot; width=&quot;75&quot; height=&quot;50&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;[caption id=”” align=”alignnone” width=”720”]&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*-Dryjb1LkVIgEEsIWM-bxA.png&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;487&quot; data-src=&quot;https://cdn-images-1.medium.com/max/720/1*-Dryjb1LkVIgEEsIWM-bxA.png&quot; /&gt; Vuex Data Flow (Sumber : &lt;a href=&quot;https://vuex.vuejs.org/en/intro.html)%5B/caption%5D&quot;&gt;https://vuex.vuejs.org/en/intro.html)[/caption]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;section section--body section--last&quot;&gt;
&lt;div class=&quot;section-divider&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;section-content&quot;&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p id=&quot;3067&quot; class=&quot;graf graf--p graf--leading&quot;&gt;Demikian artikel pendek ini, semoga bisa membantu kalian yang masih bingung bagaimana caranya berkomunikasi antar komponen Vue.js.&lt;/p&gt;
&lt;p id=&quot;683e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Semoga bermanfaat&lt;/strong&gt;&lt;/p&gt;
Artikel ini telah dipublikasikan juga di medium: &lt;a href=&quot;https://medium.com/vuejs-id/cara-berkomunikasi-antar-component-di-vue-js-9544d5059c12&quot;&gt;https://medium.com/vuejs-id/cara-berkomunikasi-antar-component-di-vue-js-9544d5059c12&lt;/a&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p id=&quot;c198&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Sumber referensi dan bacaan :&lt;/p&gt;

&lt;div id=&quot;dbda&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://alligator.io/vuejs/component-communication/&quot; href=&quot;https://alligator.io/vuejs/component-communication/&quot; rel=&quot;nofollow&quot; data-href=&quot;https://alligator.io/vuejs/component-communication/&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Vue.js Component Communication Patterns&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;</description>
    </item>
    <item>
      <title>Belajar Angular - Bagian 2 - Membuat Komponen</title>
      <link>https://mazipan.github.io/blogs/articles/belajar-angular-bagian-2-membuat-komponen.md/</link>
      <pubDate>Wed, 24 May 2017 09:30:22 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/belajar-angular-bagian-2-membuat-komponen.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 750px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/belajar-angular-bagian-2-mazipanneh.jpg&quot; alt=&quot;Belajar Angular - Bagian 2 - Membuat Komponen&quot; width=&quot;750&quot; height=&quot;422&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Belajar Angular - Bagian 2 - Membuat Komponen&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Belajar Angular - Bagian 2 - Membuat Komponen&lt;/strong&gt; - Angular merupakan framework yang memiliki konsep &lt;strong&gt;Component Based&lt;/strong&gt; seperti beberapa framework javascript modern lainnya, jadi salah satu yang perlu kita pelajari adalah bagaimana membuat komponen di Angular. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tulisan ini merupakan serial pembahasan mengenai framework &lt;strong&gt;Angular&lt;/strong&gt;, Anda mungkin ingin membaca tulisan lainnya berikut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project&quot;&gt;Bagian 1 - Pengenalan dan Inisialisasi Project&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/05/belajar-angular-bagian-2-membuat-komponen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-2-membuat-komponen&quot;&gt;Bagian 2 - Membuat Komponen&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-3-membuat-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-3-membuat-service&quot;&gt;Bagian 3 - Membuat Service&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-4-membuat-route/&quot; title=&quot;belajar-angular-bagian-4-membuat-route&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 4 - Membuat Route&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-5-membuat-custom-pipe-atau-filter/&quot; title=&quot;belajar-angular-bagian-5-membuat-custom-pipe-atau-filter&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 5 - Membuat Custom Pipe atau Filter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/07/belajar-angular-bagian-6-persiapan-file-production/&quot; title=&quot;belajar-angular-bagian-6-persiapan-file-production&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 6 - Persiapan File Production&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pertama yang mesti diperhatikan adalah bagaimana cara Angular-CLI membuatkan file Component pertama, seperti disebutkan sebelumnya bahwa Angula-CLI bisa men-generate kan kita skeleton untuk aplikasi Angular termasuk juga dengan component pertama atau component root dari aplikasi Angular. &lt;/p&gt;
&lt;p&gt;Angular-CLI akan men generate file &lt;code&gt;app.module.ts&lt;/code&gt;, &lt;code&gt;app.component.ts&lt;/code&gt;, &lt;code&gt;app.component.html&lt;/code&gt;, &lt;code&gt;app.component.css&lt;/code&gt; dan &lt;code&gt;app.component.spec.ts&lt;/code&gt;. Kita abaikan file terakhir dulu karena ini merupakan file untuk melakukan testing pada component tersebut. kita perhatikan dulu file &lt;code&gt;app.module.ts&lt;/code&gt;, file tersebut berisi kurang lebih :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/964bcce3e29253e8b38e7a2be1572c7d.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;File ini merupakan pendefinisian atau peng-inisialan dari seluruh component, service provider, filter, dan berbagai depedency lainnya yang akan digunakan dalam aplikasi kita. Bisa kita lihat ada line yang meng-inisialisasi component kita yakni &lt;code&gt;import { AppComponent } from &amp;#39;./app.component&amp;#39;;&lt;/code&gt; kemudian di lakukan Bootstrap-ing atau menempelkan kedalam aplikasi dengan &lt;code&gt;bootstrap: [AppComponent]&lt;/code&gt;, Perlu diketahui bahwa cukupp component yang berperan sebagai root yang akan di bootstrap jadi component dibawahnya tidak perlu lagi kita bootstrap lagi. &lt;/p&gt;
&lt;p&gt;Setelah itu kita coba lihat apa isi file &lt;code&gt;app.component.ts&lt;/code&gt;, kurang lebih seperti berikut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/d3f90dd5bf3a7050f46acc33f994acdd.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Yang perlu diperhatikan mungkin bagian &lt;code&gt;selector: &amp;#39;app-root&amp;#39;&lt;/code&gt; yakni id dari DOM yang akan di inject oleh component root ini, setelahnya ada bagian &lt;code&gt;templateUrl: &amp;#39;./app.component.html&amp;#39;&lt;/code&gt; yang merupakan template yang menjadi view dari component kita, dan bagian &lt;code&gt;styleUrls: [&amp;#39;./app.component.css&amp;#39;]&lt;/code&gt; merupakan array css yang diinclude sebagai style dari component.&lt;/p&gt;
&lt;p&gt;Setelah mempelajari file yang digenerate oleh Angular-CLI, maka kita coba buat component kita sendiri berdasarkan contoh yang diberikan oleh Angular-CLI, berikut kurang lebih langkah-langkahnya : &lt;/p&gt;
&lt;p&gt;Pertama kita akan buat file component kita, katakanlah saya ingin membuat component &lt;code&gt;HeaderBlock&lt;/code&gt; dan saya akan membuat file dengan nama &lt;code&gt;header.component.ts&lt;/code&gt; di dalam folder &lt;code&gt;src/app/Header/&lt;/code&gt; yang isinya kurang lebih seperti ini :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/86738b42e9cfbca16902f601d1a015fa.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Dengan file &lt;code&gt;header.component.html&lt;/code&gt; yang isinya kurang lebih :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/0b5c3e1e89d007f060cca55964f53c88.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Karena saya tidak menggunakan CSS yang spesial di component ini, jadi bagian &lt;code&gt;styleUrls :&amp;lt;br /&amp;gt;
 [&amp;#39;./app.component.css&amp;#39;]&lt;/code&gt; saya hilangkan saja. Hampir sama dengan code yang di generate oleh Angular-CLI kan ? nah ayo kita coba buat beda sedikit, kita buat template html nya inline di dalam file component saja karena isinya juga tidak terlalu banyak, jadi bisa kita hilangkan file &lt;code&gt;header.component.html&lt;/code&gt; nantinya. Berikut kurang lebih isi file nya setelah diubah :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/a9cdd3aa653d953550e4bf94af7eeb84.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Kita mengganti &lt;code&gt;tempalateUrl&lt;/code&gt; dengan &lt;code&gt;tempalate&lt;/code&gt; dan mengisinya dengan block html yang diapit dengan backtick &lt;code&gt;`&lt;/code&gt; sebagai inline html.&lt;/p&gt;
&lt;p&gt;Setelah membuat file &lt;code&gt;header.component.ts&lt;/code&gt;, kita akan coba memanggil component tersebut di root component kita dengan mengganti isi template file &lt;code&gt;app.component.html&lt;/code&gt; dengan kode :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;HeaderBlock&amp;gt;&amp;lt;/HeaderBlock&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dan sentuhan terakhir namun paling penting adalah mendaftarkan component ini di &lt;code&gt;app.module.ts&lt;/code&gt; sehingga menjadi seperti berikut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/11606b412d7330b1f478c62003703a55.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Dan selesai lah component yang kita buat. &lt;/p&gt;
&lt;p&gt;Oh iya saya menggunakan external CSS, jadi Anda perlu menambahkan line berikut ini di &lt;code&gt;src/index.html&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/4d00ec5cbe179bc88e3429581f04b706.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Semua langkah diatas sebenarnya sudah di otomatisasi oleh Angular-CLI dengan perintah : &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ng generate component my-new-component
// atau
ng g component my-new-component

&amp;lt;/p&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Kode yang digunakan dalam tutorial ini diambil dari repository &lt;a href=&quot;https://github.com/mazipan/ng2-starwars&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/mazipan/ng2-starwars&lt;/a&gt; dan bisa dilihat demo nya di : &lt;a href=&quot;http://mazipan.github.io/ng2-starwars/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://mazipan.github.io/ng2-starwars/&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Silahkan dipelajari source code nya.&lt;/p&gt;
&lt;p&gt;Demikian sekilas pembahasan awal mengenai framework Angular, semoga bermanfaat tulisan yang tidak seberapa ini. &lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana. &lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Membuat Popup Modal Sederhana</title>
      <link>https://mazipan.github.io/blogs/articles/membuat-popup-modal-sederhana/</link>
      <pubDate>Sat, 20 May 2017 09:47:37 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/membuat-popup-modal-sederhana/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.tutsplus.com/webdesign/uploads/legacy/tuts/316_modal/final.png&quot; alt=&quot;Membuat Popup Modal Sederhana&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Membuat Popup Modal Sederhana&lt;/strong&gt; - Popup Modal adalah jendela sembul yang muncul di sebuah aplikasi baik dengan disengaja ataupun sekarang ini banyak pula yang tanpa dilakukan perintah oleh User namun tiba-tiba muncul Popup Modal tersebut. Dalam sebuah aplikasi ataupun halaman website Popup Modal seringkali digunakan ketika kita ingin memberikan informasi ataupun meminta User melakukan sesuatu namun kita tidak ingin User kita meninggalkan halaman yang sedang dikunjunginya sekarang. Salah satu praktek yang seringkali digunakan adalah untuk membuat form Log-in Register, dimana biasanya menggunakan Popup Modal Sebagai penampung nya.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tentu ada banyak alternatif diluar sana untuk membuat sebuah Popup Modal, dari yang sederhana, yang mainstream, sampai yang kompleks secara fungsi maupun tampilan. Salah satu yang sering kalian gunakan mungkin Bootstrap Modal, ya karena memang framework ini salah satu yang paling mainstream di kalangan web developer. Namun kali ini kita akan coba belajar bagaimana membuat sebuah Popup Modal Sederhana dengan cara yang semoga juga masih mudah untuk kalian ikuti dan pelajari. Bukan berarti &lt;a href=&quot;https://mazipanneh.com/blog/2017/05/sisi-gelap-bootstrap-css/?nonamp=1&quot; target=&quot;_blank&quot;&gt;Saya tidak suka Bootstrap&lt;/a&gt;, saya hanya suka untuk membuat sesuatu lebih sederhana, Kita semua tau lah Bootstrap keren dan mudah digunakan. &lt;/p&gt;
&lt;p&gt;Oke, kita mulai saja Membuat Popup Modal Sederhana nya, silahkan ikuti ya&amp;#8230;&lt;/p&gt;
&lt;p&gt;Pertama kita coba buat &lt;code&gt;block&lt;/code&gt; untuk modal nya, kode ini saya coba ikuti dari bagaimana Bootstrap membuat modal nya namun coba disederhanakan dan pastinya dibuat lebih BEM biar lebih nyaman di hati, berikut contoh kodenya :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;modalPlain&amp;quot; class=&amp;quot;modal&amp;quot; role=&amp;quot;modal&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;modal__content&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;modal__header&amp;quot;&amp;gt;
      &amp;lt;span class=&amp;quot;modal__close&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;
      &amp;lt;h2&amp;gt;Modal Header&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;modal__body&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;Some text in the Modal Body&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;modal__footer&amp;quot;&amp;gt;
      &amp;lt;h3&amp;gt;Modal Footer&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Masih terlihat mudah kan ? kita belum beri CSS pada &lt;code&gt;block&lt;/code&gt; tersebut, tapi mudahnya saya coba jelaskan kita membuat &lt;code&gt;div&lt;/code&gt; dengan id yang didefinisikan tambah class &lt;code&gt;modal&lt;/code&gt; sebagai parent nya, lantas dibawahnya ada class &lt;code&gt;modal__content&lt;/code&gt; yang merupakan penampung dari konten modal kita, dibawahnya ada 3 bagian yakni header, body dan footer yang biasanya ada di setiap Popup Modal terutama Bootstrap. &lt;/p&gt;
&lt;p&gt;Setelah membuat block &lt;code&gt;modal&lt;/code&gt; diatas, waktunya memberikan sentuhan style pada block tersebut agar lebih cantik. Seperti biasa saya prefer menggunakan SCSS syntax, bagi yang masih bingung bisa baca &lt;a href=&quot;https://mazipanneh.com/blog/2017/04/mengenal-dan-belajar-sass-sebagai-css-pre-processor/?nonamp=1&quot; target=&quot;_blank&quot;&gt;Pengenalan SASS&lt;/a&gt; terlebih dahulu. Berikut contoh potongan kodenya : &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.modal
{
    display: none; 
    position: fixed; 
    z-index: 999; 
    left: 0;
    top: 0;
    width: 100%;
    height: 100%; 
    overflow: auto; 
    background-color: rgb(0,0,0); 
    background-color: rgba(0,0,0,0.4);   

    &amp;amp;__header{        
        padding: 2px 16px;      
    }

    &amp;amp;__content {
        position: relative;
        background-color: $white;
        margin: 15% auto;
        padding: 0;
        width: 80%;

        box-shadow : 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19); 

        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
        animation-duration: 0.4s;

    } 

    &amp;amp;__body {
        padding: 2px 16px;
    }

    &amp;amp;__footer {
        padding: 2px 16px;
    }

    &amp;amp;__close {
        float: right;
        font-size: 28px;
        font-weight: bold;
        color: $grey;
        cursor: pointer;
        text-decoration: none;

        &amp;amp;:hover, &amp;amp;:focus {
            text-decoration: none;
        }
    }
}

@-webkit-keyframes animatetop {
    from {top: -300px; opacity: 0} 
    to {top: 0; opacity: 1}
}

@keyframes animatetop {
    from {top: -300px; opacity: 0}
    to {top: 0; opacity: 1}
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dengan kode SASS diatas mungkin kita tidak bisa melihat hasilnya, karena sudah ada rule &lt;code&gt;display: none;&lt;/code&gt; di class &lt;code&gt;.modal&lt;/code&gt;, maka untuk mengetesnya tinggal coba dihapus terlebih dahulu rule tersebut. Pastikan tampilan Popup Modal sudah sesuai dengan yang kalian harapkan. &lt;/p&gt;
&lt;p&gt;Oh iya kode SASS tersebut sudah menggunakan variabel colors punya saya jadi mungkin akan error di tempat Anda, jadi silahkan ganti variabel $white dan $grey dengan hex yang sebenarnya atau gampangnya ganti dengan warna solid white dan grey saja. &lt;/p&gt;
&lt;p&gt;Sampai langkah kedua, kita sebenarnya udah berhasil membuat Popup Modal kita dengan cepat. Langkah selanjutnya yang perlu dipikirkan adalah switch rule di dalam class &lt;code&gt;.modal&lt;/code&gt; yang tadinya &lt;code&gt;display: none;&lt;/code&gt; menjadi &lt;code&gt;display: block;&lt;/code&gt;. Perlu dipikirkan juga bagaimana cara trigger agar membuka modal ini.&lt;/p&gt;
&lt;p&gt;Belajar dari Bootstrap, biasanya untuk mentrigger Modal di Bootstrap Kita bisa menggunakan kode :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary&amp;quot; data-toggle=&amp;quot;modal&amp;quot; data-target=&amp;quot;#exampleModalLong&amp;quot;&amp;gt;
  Launch demo modal
&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bila dilihat, mereka menambahkan attribute &lt;code&gt;data-toggle=&amp;quot;modal&amp;quot;&lt;/code&gt; serta &lt;code&gt;data-target=&amp;quot;modal_id_target&amp;quot;&lt;/code&gt;, kita bisa buat mirip seperti ini, namun dengan cara yang berbeda. Berikut contoh kode nya :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;button class=&amp;quot;button button--blue&amp;quot; data-show=&amp;quot;modal&amp;quot; data-target=&amp;quot;modalPlain&amp;quot;&amp;gt;
  Open Modal 
&amp;lt;/button&amp;gt;
&amp;lt;/p&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dan terakhir yang akan kita buat adalah Javascript function yang akan men-switch class modal agar bisa hide/show dengan lancar serta mencari modal mana yang seharusnya ditampilkan ketika di trigger dari suatu element.&lt;/p&gt;
&lt;p&gt;Berikut contoh kode sederhana nya :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var triggerBtn = $(&amp;#39;[data-show=modal]&amp;#39;).click(function(event){
        var modalId = $(this).attr(&amp;#39;data-target&amp;#39;);        
        $(&amp;#39;#&amp;#39; + modalId).show();
    });

    $(&amp;#39;.modal__close&amp;#39;).click(function(event){        
        $(this).parents(&amp;#39;.modal&amp;#39;).hide();
    });

    $(window).click(function(event){
        if (event.target.className === &amp;#39;modal&amp;#39;) {
            $(event.target).hide();
        }
    });&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setelahnya kita juga perlu menambahkan fungsi sederhana untuk hide/show lewat Javascript, karena siapa tau ada yang ingin trigger tanpa lewat definisi di elemen tersebut kan. Berikut kode sederhananya :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function modalShow(modalId){
    $(&amp;#39;#&amp;#39; + modalId).show();
}

function modalHide(modalId){
    $(&amp;#39;#&amp;#39; + modalId).hide();
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sayangnya fungsi yang kita buat masih jQuery dependent, tapi bila ada masukan mungkin bisa dicoba cara yang lebih sederhana menggunakan VanillaJS saja. Ini saya buat menggunakan jQuery karena saya terlalu malas. &amp;#x1f647;&amp;#x1f647;&amp;#x1f647; &lt;/p&gt;
&lt;p&gt;Semua kode dalam artikel kali ini saya ambil dari framework kesayangan saya &lt;a href=&quot;https://github.com/mazipan/bem-kit&quot; target=&quot;_blank&quot;&gt;BEM-Kit&lt;/a&gt;. Anda bisa melihat cheatsheet mengenai modal pada &lt;a href=&quot;https://github.com/mazipan/bem-kit/wiki/Cheatsheets#modal&quot; target=&quot;_blank&quot;&gt;halaman ini&lt;/a&gt;, kalau penasaran dengan hasilnya bisa juga dilihat dari halaman demo &lt;a href=&quot;https://mazipan.github.io/bem-kit/demo/#modal&quot; target=&quot;_blank&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Demikian sharing Sederhana mengenai membuat Popup Modal Sederhana. Semoga bermanfaat ya. &lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana sambil nemenin anak tidur.&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Belajar Angular - Bagian 1 - Pengenalan dan Inisialisasi Project</title>
      <link>https://mazipan.github.io/blogs/articles/belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project.md/</link>
      <pubDate>Wed, 17 May 2017 09:19:47 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 750px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/belajar-angular-bagian-1-mazipanneh.jpg&quot; alt=&quot;Belajar Angular - Bagian 1 - Pengenalan dan Inisialisasi Project&quot; width=&quot;750&quot; height=&quot;422&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Belajar Angular - Bagian 1 - Pengenalan dan Inisialisasi Project&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Belajar Angular - Bagian 1 - Pengenalan dan Inisialisasi Project&lt;/strong&gt; - Angular merupakan versi upgrade dari AngularJS yang sebelumnya kita kenal. Ya, jika sebelumnya kita menggunakan AngularJS v.1.x maka di versi 2 keatas kita akan menyebut framework yang didukung Google ini dengan nama Angular (*tanpa embel-embel JS dibelakangnya). Jadi jelas juga kalau artikel kali ini kita akan membahas mengenai Angular versi 2 keatas. Pada saat artikel ini ditulis, Angular sendiri sudah mencapai versi 4.2.0.beta dan bisa Anda lihat di &lt;a href=&quot;https://github.com/angular/angular/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;release page&lt;/a&gt; mereka. Kenapa saya sebut versi 2 ke atas ? Karena memang versi 2 adalah versi awal dimana Angular meluncurkan framework ini dengan mengusung perubahan total dari yang sebelumnya versi satu, mengenai versi Angular sendiri memang akan selalu bertambah secara rutin karena memang code nya yang open-source sehingga perbaikan dan penambahan fitur bisa lebih cepat. Bahkan meskipun sekarang sudah mencapai versi 4, Anda tidak perlu khawatir karena pada dasarnya masih sama dengan versi 2 dengan berbagai optimisasi dan perbaikan.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tulisan ini merupakan serial pembahasan mengenai framework &lt;strong&gt;Angular&lt;/strong&gt;, Anda mungkin ingin membaca tulisan lainnya berikut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-1-pengenalan-dan-inisialisasi-project&quot;&gt;Bagian 1 - Pengenalan dan Inisialisasi Project&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/05/belajar-angular-bagian-2-membuat-komponen/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-2-membuat-komponen&quot;&gt;Bagian 2 - Membuat Komponen&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mazipanneh.com/blog/2017/05/belajar-angular-bagian-3-membuat-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;belajar-angular-bagian-3-membuat-service&quot;&gt;Bagian 3 - Membuat Service&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-4-membuat-route/&quot; title=&quot;belajar-angular-bagian-4-membuat-route&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 4 - Membuat Route&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/06/belajar-angular-bagian-5-membuat-custom-pipe-atau-filter/&quot; title=&quot;belajar-angular-bagian-5-membuat-custom-pipe-atau-filter&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 5 - Membuat Custom Pipe atau Filter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mazipanneh.com/blog/2017/07/belajar-angular-bagian-6-persiapan-file-production/&quot; title=&quot;belajar-angular-bagian-6-persiapan-file-production&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bagian 6 - Persiapan File Production&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Library Utama Angular&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pada versi 2 ini, Angular tidak datang sendirian seperti sebelumnya dimana Angular selalu berusaha jadi framework yang super power, apa lo mau gw ada. Angular juga terbilang pintar memilih pendukungnya, karena beberapa yang akan saya sebutkan memang masih memiliki masa depan yang cerah secerah matahari di bukit tabies. Angular mengusung &lt;a href=&quot;https://www.typescriptlang.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Typescript&lt;/a&gt; besutan Microsoft sebagai official language dibandingkan menggunakan javascript native, tentu saja dengan harapan bisa lebih scale dengan dukungan type safe dan berbagai kelebihan lain yang ditawarkan oleh Typescript ini. Selain itu Angular juga menggandeng &lt;a href=&quot;http://reactivex.io/rxjs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RxJS&lt;/a&gt; besutan ReactiveX untuk mendukung reactive programming menggunakan Observable Dan juga berbagai kelebihan yang dimilikinya. Tentu performa yang lebih baik dan kemudahan penanganan asynchronous stack diharapkan bisa lebih bisa ditangani oleh RxJS ini.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Angular-CLI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Menggunakan Typescript serta kebutuhan lainnya tentu membuat kita kesulitan untuk memulai project Angular karena terlalu banyak yang mesti di setup terlebih dahulu seperti webpack dan plugin pendukungnya, melihat hal ini Angular membuat &lt;a href=&quot;https://github.com/angular/angular-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Angular-CLI&lt;/a&gt;, seperti halnya React yang punya create-react-app, Ember dengan Ember-CLI serta VueJs dengan Vue-CLI nya. Angular-CLI dibuat untuk memudahkan kita dalam membuat project Angular untuk pertama kali, dimana kebutuhan dasar seperti run developement, unit test, end to end test, sampai production bundling kesemuanya sudah disediakan sehingga kita tidak perlu repot-repot lagi setup webpack configuration dan bisa langsung fokus mulai belajar menggunakan framework satu ini. &lt;/p&gt;
&lt;p&gt;Untuk instalasi Angular-CLI sendiri bisa dengan :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g @angular/cli&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bila pemasangan berhasil, Anda seharusnya bisa mengecek versi dari Angular-CLI tersebut dengan cara :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ng --version&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Inisialisasi Project dengan Angular-CLI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seperti disebut sebelumnya bahwa kita bisa dengan mudah membuat project Angular dengan bantuan Angular-CLI ini, Anda bisa membuat inisialisasi project Angular dengan perintah :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ng new project_name&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ya, cukup dengan perintah itu maka Angular CLI akan membuatkan kita folder project baru kita beserta semua setup basicnya. Proses generate ini mungkin akan berjalan lumayan lama karena setelah mengenerate folder, Angular-CLI akan menjalankan &lt;code&gt;npm install&lt;/code&gt; di dalam folder tersebut yang berarti mendownload semua depedency yang dibutuhkan dan telah dijelaskan di dalam &lt;code&gt;package.json&lt;/code&gt; nya. Karena saya lebih senang menggunakan perinta &lt;code&gt;yarn install&lt;/code&gt; dibanding npm jadi saya biasanya men-skip ketika proses install via npm sedang berjalan dan manual install lewat yarn agar tidak terlalu lama. &lt;/p&gt;
&lt;p&gt;Selesai proses pemasangan serta download semua depedency, maka project Angular kita sudah bisa langsung dijalankan. Kita bisa masuk ke folder project dengan cara &lt;code&gt;cd project_name&lt;/code&gt;, kemudian jalankan project menggunakan perintah : &lt;code&gt;ng serve&lt;/code&gt; Dan bila semua lancar tanpa hambatan maka project secara default akan dijalankan di browser pada alamat &lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost:4200/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Demikian sekilas pembahasan awal mengenai framework Angular, semoga bermanfaat tulisan yang tidak seberapa ini. &lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana sambil nungguin anaknya tidur. &lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Sisi Gelap Bootstrap CSS</title>
      <link>https://mazipan.github.io/blogs/articles/sisi-gelap-bootstrap-css.md/</link>
      <pubDate>Sun, 14 May 2017 01:13:25 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/sisi-gelap-bootstrap-css.md/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img src=&quot;https://site2img-api.herokuapp.com/parse/files/MqX4RIjBpnVgUg9lRrxmWRsDVmqR5SCOaYmnSpnx/2ba43291aa42c2e1e11e268e780a5e96_img.png&quot; alt=&quot;Bootstrap&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sisi Gelap Bootstrap CSS&lt;/strong&gt; - Bootstrap CSS adalah salah satu Framework CSS terpopuler, terbaik dan terlengkap sampai saat ini. Ada banyak sekali hal yang dipermudah dengan menggunakan Bootstrap dibandingkan kita membuatnya manual menggunakan CSS native. Namun seperti setiap hal di dunia ini yang jika digunakan berlebihan pasti akan berdampak tidak baik, maka Bootstrap dengan segala kepopuleran serta kelebihan yang dimilikinya pun terkadang menjadi hal yang tidak baik untuk digunakan. &lt;/p&gt;
&lt;p&gt;Apa sebabnya ? &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mari kita bicarakan lebih lanjut.&lt;/p&gt;
&lt;p&gt;Sebelum saya lanjutkan tulisan ini perlu saya sampaikan terlebih dahulu bahwa yang saya tulis adalah persepsi atau sudut pandang saya, bisa jadi benar bisa juga salah. Jika Anda tidak setuju atau merasa pandapat saya tidak benar itupun hak Anda, silahkan Anda tetap dengan pendapat Anda atau bisa meninggalkan komentar di bagian bawah siapa tau saya bisa tercerahkan 🙂 dan mau mengikuti pendapat Anda. 🙂&lt;/p&gt;
&lt;p&gt;Cerita berawal ketika saya meng-interview beberapa kandidat yang melamar sebagai Front End Developer di tempat saya bekerja, dan seperti kebiasaan kita orang teknikal yang belum puas kalau belum melihat bagaimana kode seseorang untuk tau bagaimana caranya solve problem, begitupun saya. &lt;/p&gt;
&lt;p&gt;Dan untuk masalah yang berkaitan dengan CSS saya terbiasa menanyakan dan meminta membuat hal sederhana seperti misal saya ingin dibuatkan block kotak-kotak yang berjejer ke samping, dll. Hal-hal yang saya pikir (*seharusnya) bisa di pecahkan secara mudah dengan pengetahuan-pengetahuan dasar yang dimiliki. &lt;/p&gt;
&lt;p&gt;Sayangnya ada beberapa kasus dimana saya menemukan mereka kesulitan untuk menjawab atau membuat kode mereka. &lt;/p&gt;
&lt;p&gt;Kecewa dengan hal semacam ini, saya coba tanyakan kepada kandidat ini apa sebenarnya kesulitan yang dihadapi dan apa pula yang membuat susah mengerjakan soal semacam ini. Dan ada jawaban yang membuat saya &lt;strong&gt;tercengang&lt;/strong&gt;, yakni menurut kandidat ini hal tersebut biasa dia kerjakan menggunakan Bootstrap.&lt;/p&gt;
&lt;p&gt;Ya, Bootstrap yang dimaksud tentu Framework terkenal yang kita sebut diawal. &lt;/p&gt;
&lt;p&gt;Sebagai seseorang yang sama sekali bukan fans berat framework yang satu ini, tentu saya kaget bahwa sebegitu hebatnya framework ini sampai-sampai membuat para developer kita (*terutama fresh graduate) terlalu bergantung padanya. Sebenarnya apa yang terjadi sehingga bisa seperti ini ? Apakah salah dari framework ini ? ataukah para developer kita yang salah ?&lt;/p&gt;
&lt;p&gt;Kesalahan menurut saya jelas tidak pada framework tersebut, karena jelas juga Bootstrap telah sukses membantu jutaan orang diluar sana dalam menyelesaikan project mereka. &lt;/p&gt;
&lt;p&gt;Maka kesalahan saya pindahkan ke &lt;strong&gt;oknum&lt;/strong&gt; tersebut yang mungkin juga menjadi kesalahan beberapa developer kita yang lain. Untuk mengetahui apakah Anda termasuk salah satu dari &lt;strong&gt;oknum&lt;/strong&gt; tersebut mudah saja, coba tanyakan pada diri Anda sendiri apakah Anda bisa menyelesaikan masalah sederhana seperti pada contoh saya diatas tanpa bantuan si framework ? Kalau jawaban Anda tidak bisa, berarti ya. Anda salah satu yang saya sebut oknum pada tulisan kali ini.&lt;/p&gt;
&lt;p&gt;Para oknum ini seenak jidat mereka belajar framework Bootstrap bahkan sebelum mereka belajar dan membaca dasar-dasar CSS di w3school. Ya, oknum ini belajar menggunakan Bootstrap namun lupa belajar mengetahui apa yang sebenarnya Bootstrap lakukan. &lt;/p&gt;
&lt;p&gt;Anda tentu saja berhak menggunakan class &lt;code&gt;row&lt;/code&gt; atau &lt;code&gt;col-md-3&lt;/code&gt; ketika menggunakan Bootstrap karena memang sudah seharusnya begitu, tapi please &lt;strong&gt;tolong&lt;/strong&gt; donk ya paling tidak Anda tau kenapa Anda menggunakan class ini, kapan Anda bisa menggunakan class ini, apa yang dilakukan Bootstrap dengan class ini. Stop jadi oknum yang main copy-copy kode orang tanpa tau apa yang dikerjakan sebenarnya. Stop jadi oknum yang make Bootstrap dengan tidak bertanggung jawab. Stop bikin saya ketawa dengan hal semacam ini. &lt;/p&gt;
&lt;p&gt;Dengan Bootstrap kita bisa membuat hal semacam ini :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-3&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-3&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-3&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tapi masa kalian gak bisa buat pake &lt;code&gt;float&lt;/code&gt; kaya gini :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;


.box{
  float: left;
  width: 33%;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Atau bisa juga kan pake &lt;code&gt;inline-block&lt;/code&gt; seperti ini :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;inline-box&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;inline-box&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;inline-box&amp;quot;&amp;gt;column-3&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;


.inline-box{
  display: inline-block;
  width: 33%;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mungkin saya mesti kasih tau (*lagi) kalau semua framework CSS sebenarnya cuma kumpulan class dkk yang dibuat dari CSS native juga yang diharapkan bisa mempermudah kalian dalam membuat sesuatu. &lt;/p&gt;
&lt;p&gt;Kebayang gak kalau disuruh membuat media query sendiri untuk tiap column yang bisa responsive di berbagai ukuran layar ? Atau kita disuruh membuat button yang bisa dipakai berulang-ulang di banyak page ? Untuk hal-hal seperti inilah kita sangat butuh bantuan framework CSS. Karena mereka sudah menyediakan satu set hal-hal common dan akan sering kita gunakan. &lt;/p&gt;
&lt;p&gt;Jadi biarpun kebutuhan akan framework ini begitu tinggi namun jangan lupakan bahwa kehebatan framework inipun dibangun diatas hal-hal dasar yang seharusnya dipelajari oleh kita. Sudah seharusnya bagi kita untuk belajar hal mendasarnya terlebih dahulu sebelum mempelajari framework nya, jadi akan lebih mudah juga bagi kita untuk mempelajari cara kerja framework tersebut.&lt;/p&gt;
&lt;p&gt;Sisi gelap sebenarnya lebih pantas disematkan pada kita sebagai developer dibandingkan menyematkan pada sebuah teknologi nya. Karena Bootstrap dalam hal inipun tidak salah, kita saja yang salah belajar. Dengan segala kemudahan yang diberikan jangan lantas membuat kita jadi malas buat belajar hal dasarnya. Yang sudah terlanjur basah terlalu bergantung pada framework ini, belum terlambat juga bagi Anda untuk kembali membaca-baca lagi tutorial di w3school untuk mengingatkan bagaimana hal-hal dasar bekerja.&lt;/p&gt;
&lt;p&gt;Setelah tulisan ini di publish maka saya tidak akan tertawa geli lagi bila masih menemui hal yang sama terjadi lagi ketika melakukan interview, bukan hal yang lucu lagi ketika menemukan kesalahan terjadi berulang dan berantai. &lt;/p&gt;
&lt;p&gt;Sudah waktunya kita sebagai yang sudah lebih dulu tau untuk memberi tau kepada mereka yang baru belajar agar tidak salah jalan dan tidak mengulangi kesalahan yang kita sudah buat sebelumnya. &lt;/p&gt;
&lt;p&gt;Dan ayo perbaiki cara kita belajar.&lt;/p&gt;
&lt;p&gt;Semoga tulisan ini bermanfaat terutama bagi para oknum yang saat ini masih berjalan di jalan yang sesat. &lt;/p&gt;
&lt;p&gt;Ditulis pada malam hari dan gelap-gelapan kala itu. &lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Membuat Static Blog Menggunakan Wintersmith</title>
      <link>https://mazipan.github.io/blogs/articles/membuat-static-blog-menggunakan-wintersmith.md/</link>
      <pubDate>Fri, 05 May 2017 10:32:07 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/membuat-static-blog-menggunakan-wintersmith.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 664px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;http://wintersmith.io/images/wintersmith-og.png&quot; alt=&quot;Wintersmith.io Logo&quot; width=&quot;664&quot; height=&quot;456&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;&lt;span style=&quot;color: #808080;&quot;&gt;&lt;em&gt;Wintersmith.io Logo&lt;/em&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Membuat Static Blog Menggunakan Wintersmith&lt;/strong&gt; - Static blog adalah blog yang tidak memiliki data dinamis atau hanya terdiri dari sekumpulan file-file static seperti HTML, CSS, Javascript serta Images. Dan salah satu platform yang paling sering digunakan untuk membuat blog static ini adalah Jekyll. Kepopuleran Jekyll semakin menjadi-jadi setelah menjadi official static site generator yang diusung oleh Github Pages, yang artinya kita tidak perlu melakukan build file di lokal komputer kita baru kemudian commit ke repository namun dari Github Pages bisa langsung melakukan auto build ketika kode kita commit.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Namun pada tulisan kali ini kita tidak akan membahas Jekyll, tentu saja karena memang sudah terlalu populer dan berbagai tutorial bisa ditemukan dengan mudah bahkan banyak yang berbahasa Indonesia. Kali ini kita akan bahas static site generator lain yakni &lt;a href=&quot;http://wintersmith.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;Wintersmith&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wintersmith seperti official website-nya menawarkan &lt;em&gt;Flexible, minimalistic, multi-platform static site generator built on top of node.js&lt;/em&gt; memiliki beberapa keunggulan dibanding Jekyll menurut saya, diantaranya sebagai berikut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Menggunakan Engine NodeJs &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Templating dengan PUG/Jade &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sudah Tersedia Banyak Plugin Standard&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yuk, cusss kita mulai saja belajar membuat Blog Static menggunakan Wintersmith. Silahkan disimak langkah-langkahnya berikut ini :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Instalasi Wintersmith&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wintersmith seperti yang dijelaskan diatas menggunakan engine NodeJS sehingga untuk memasangnya tinggal menggunakan &lt;code&gt;npm&lt;/code&gt; saja.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith -g&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2. Membuat Project Baru&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith new [project_name]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setelahnya akan langsung digenerate hampir semua kebutuhan dasar dalam blog static termasuk dengan beberapa plugin dasar yang dibutuhkan, dan untuk menjalankan project ini Anda bisa menggunakan perintah :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd [project_name]
wintersmith preview&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3. Build File Static&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dan untuk men-generate static file yang nanti bisa kita host dimanapun, termasuk &lt;a href=&quot;http://mazipanneh.com/blog/2017/05/mengenal-github-pages-sebagai-static-hosting/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github Pages &lt;/a&gt;, kita bisa menggunakan perintah :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith build&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;File static akan di generate ke dalam folder &lt;code&gt;build&lt;/code&gt;, kita bisa copykan ke branch berbeda sebagai static blog, contoh yang direkomendasikan menggunakan branch &lt;strong&gt;gh-pages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Memodifikasi Konfigurasi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Konfigurasi dasar dari wintersmith terdapat pada file &lt;code&gt;config.json&lt;/code&gt;, disini terdapat setup dasar seperti title, url, serta plugin yang kita gunakan. Kali ini kita akan coba memodifikasi dan menambahkan beberapa keterangan di &lt;code&gt;config.json&lt;/code&gt; dan berikut adalah contohnya, dimana kita menambahkan beberapa keterangan di &lt;code&gt;locals&lt;/code&gt; sesuai dengan blog yang akan kita buat :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;locals&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;https://ft-umj-4.github.io/story&amp;quot;,
    &amp;quot;logoUrl&amp;quot;: &amp;quot;https://ft-umj-4.github.io/ft-umj-iv.jpg&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;FT UMJ IV&amp;quot;,
    &amp;quot;owner&amp;quot;: &amp;quot;GROUP FT UMJ IV&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Secuil cerita dan dokumentasi kegiatan dari group FT UMJ IV&amp;quot;,
    &amp;quot;sitemap&amp;quot;: &amp;quot;sitemap.xml&amp;quot;,
    &amp;quot;discuss_id&amp;quot;: &amp;quot;ft-umj-4-github-io&amp;quot;
  },
  &amp;quot;plugins&amp;quot;: [
    &amp;quot;./plugins/paginator.coffee&amp;quot;
  ],
  &amp;quot;require&amp;quot;: {
    &amp;quot;moment&amp;quot;: &amp;quot;moment&amp;quot;,
    &amp;quot;_&amp;quot;: &amp;quot;underscore&amp;quot;,
    &amp;quot;typogr&amp;quot;: &amp;quot;typogr&amp;quot;
  },
  &amp;quot;jade&amp;quot;: {
    &amp;quot;pretty&amp;quot;: true
  },
  &amp;quot;markdown&amp;quot;: {
    &amp;quot;smartLists&amp;quot;: true,
    &amp;quot;smartypants&amp;quot;: true
  },
  &amp;quot;paginator&amp;quot;: {
    &amp;quot;perPage&amp;quot;: 3
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;5. Menambahkan Plugin Baru&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wintersmith punya beberapa plugin yang mungkin akan kita butuhkan, daftar lengkapnya bisa dilihat di &lt;a href=&quot;https://github.com/jnordberg/wintersmith/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;wiki plugins&lt;/a&gt; mereka. &lt;/p&gt;
&lt;p&gt;Yang pertama perlu ditambahkan ketika ingin menggunakan plugin adalah depedency di dalam &lt;code&gt;package.json&lt;/code&gt;, kemudian menginstall semua depedency dengan &lt;code&gt;npm install&lt;/code&gt;, dan berikut contoh instalasi beberapa pluginyang saya gunakan juga :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.a. Menambahkan wintersmith-sassify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;wintersmith-sassify merupakan plugin yang digunakan ketika kita ingin menggunakan SASS pre-processor dibandingkan CSS biasa, kita menginstall dengan cara&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith-sassify&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setelahnya akan ada depedency tambahan di &lt;code&gt;package.json&lt;/code&gt; kita, selanjutnya kita akan menambahkan konfigurasi baru di &lt;code&gt;config.json&lt;/code&gt; seperti berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;sassify&amp;quot;: {
    &amp;quot;outputStyle&amp;quot;: &amp;quot;compressed&amp;quot;,
    &amp;quot;sourceComments&amp;quot;: false,
    &amp;quot;sourceMap&amp;quot;: false
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sehingga &lt;code&gt;config.json&lt;/code&gt; kita selengkapnya akan menjadi seperti ini :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;locals&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;https://ft-umj-4.github.io/story&amp;quot;,
    &amp;quot;logoUrl&amp;quot;: &amp;quot;https://ft-umj-4.github.io/ft-umj-iv.jpg&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;FT UMJ IV&amp;quot;,
    &amp;quot;owner&amp;quot;: &amp;quot;GROUP FT UMJ IV&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Secuil cerita dan dokumentasi kegiatan dari group FT UMJ IV&amp;quot;,
    &amp;quot;sitemap&amp;quot;: &amp;quot;sitemap.xml&amp;quot;,
    &amp;quot;discuss_id&amp;quot;: &amp;quot;ft-umj-4-github-io&amp;quot;
  },
  &amp;quot;plugins&amp;quot;: [
    &amp;quot;./plugins/paginator.coffee&amp;quot;,
    &amp;quot;wintersmith-sassify&amp;quot;  
  ],
  &amp;quot;require&amp;quot;: {
    &amp;quot;moment&amp;quot;: &amp;quot;moment&amp;quot;,
    &amp;quot;_&amp;quot;: &amp;quot;underscore&amp;quot;,
    &amp;quot;typogr&amp;quot;: &amp;quot;typogr&amp;quot;
  },
  &amp;quot;jade&amp;quot;: {
    &amp;quot;pretty&amp;quot;: true
  },
  &amp;quot;markdown&amp;quot;: {
    &amp;quot;smartLists&amp;quot;: true,
    &amp;quot;smartypants&amp;quot;: true
  },
  &amp;quot;paginator&amp;quot;: {
    &amp;quot;perPage&amp;quot;: 10
  },
  &amp;quot;sassify&amp;quot;: {
    &amp;quot;outputStyle&amp;quot;: &amp;quot;compressed&amp;quot;,
    &amp;quot;sourceComments&amp;quot;: false,
    &amp;quot;sourceMap&amp;quot;: false
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;5.b. Menambahkan wintersmith-tag&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;wintersmith-tag digunakan untuk menambahkan tag pada artikel yang kita post, instalasinya menggunakan&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith-tag&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setelahnya kita akan mengubah Sehingga &lt;code&gt;config.json&lt;/code&gt; kita seperti ini :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;locals&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;https://ft-umj-4.github.io/story&amp;quot;,
    &amp;quot;logoUrl&amp;quot;: &amp;quot;https://ft-umj-4.github.io/ft-umj-iv.jpg&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;FT UMJ IV&amp;quot;,
    &amp;quot;owner&amp;quot;: &amp;quot;GROUP FT UMJ IV&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Secuil cerita dan dokumentasi kegiatan dari group FT UMJ IV&amp;quot;,
    &amp;quot;sitemap&amp;quot;: &amp;quot;sitemap.xml&amp;quot;,
    &amp;quot;discuss_id&amp;quot;: &amp;quot;ft-umj-4-github-io&amp;quot;
  },
  &amp;quot;plugins&amp;quot;: [
    &amp;quot;./plugins/paginator.coffee&amp;quot;,
    &amp;quot;wintersmith-sassify&amp;quot;,
    &amp;quot;wintersmith-tag&amp;quot;     
  ],
  &amp;quot;require&amp;quot;: {
    &amp;quot;moment&amp;quot;: &amp;quot;moment&amp;quot;,
    &amp;quot;_&amp;quot;: &amp;quot;underscore&amp;quot;,
    &amp;quot;typogr&amp;quot;: &amp;quot;typogr&amp;quot;
  },
  &amp;quot;jade&amp;quot;: {
    &amp;quot;pretty&amp;quot;: true
  },
  &amp;quot;markdown&amp;quot;: {
    &amp;quot;smartLists&amp;quot;: true,
    &amp;quot;smartypants&amp;quot;: true
  },
  &amp;quot;paginator&amp;quot;: {
    &amp;quot;perPage&amp;quot;: 10
  },
  &amp;quot;tag&amp;quot;: {
    &amp;quot;perPage&amp;quot;: 10
  },
  &amp;quot;sassify&amp;quot;: {
    &amp;quot;outputStyle&amp;quot;: &amp;quot;compressed&amp;quot;,
    &amp;quot;sourceComments&amp;quot;: false,
    &amp;quot;sourceMap&amp;quot;: false
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dan untuk menggunakannya, kita hanya perlu menambah tags ditiap atikel markdown yang kita buat, seperti contoh :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Daftar Anggota FT UMJ IV
author: ft-umj-iv
date: 2009-12-12
template: article.jade
tags: people
---&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;5.b. Menambahkan wintersmith-sitemap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;wintersmith-sitemap digunakan untuk men-generate file &lt;code&gt;sitemap.xml&lt;/code&gt; yang bisa kita submit ke webmaster search engine nantinya, untuk instalasinya kita juga harus menambahakan plugin lainnya yang juga menjadi depedency dari wintersmith-sitemap, seperti berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith-sitemap wintersmith-contents&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setelahnya kita akan menambahkan di &lt;code&gt;config.json&lt;/code&gt; pada bagian plugins&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;plugins&amp;quot;: [
    &amp;quot;./plugins/paginator.coffee&amp;quot;,
    &amp;quot;wintersmith-sassify&amp;quot;,
    &amp;quot;wintersmith-tag&amp;quot;,  
    &amp;quot;wintersmith-contents&amp;quot;,
    &amp;quot;wintersmith-sitemap&amp;quot;,
    &amp;quot;wintersmith-tag&amp;quot;        
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Plugin ini akan menghasilkan file &lt;code&gt;sitemap.xml&lt;/code&gt; pada saat kita build.&lt;/p&gt;
&lt;p&gt;Salah satu contoh blog static yang sudah live dibuat menggunakan wintersmith bisa dilihat di &lt;a href=&quot;https://ft-umj-4.github.io/story/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://ft-umj-4.github.io/story/&lt;/a&gt; dimana kodenya juga bisa dilihat dan dipelajari secara gratis di github &lt;a href=&quot;https://github.com/ft-umj-4/story&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/ft-umj-4/story&lt;/a&gt;, atau lebih lengkap silahkan kunjungi showcase mereka &lt;a href=&quot;https://github.com/jnordberg/wintersmith/wiki/Showcase&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Demikian panduan membuat blog static menggunakan wintersmith dari saya.&lt;/p&gt;
&lt;p&gt;Semoga bermanfaat, &lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana di siang hari.&lt;/p&gt;
&lt;p&gt;Salam&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Mengenal Github Pages Sebagai Static Hosting</title>
      <link>https://mazipan.github.io/blogs/articles/mengenal-github-pages-sebagai-static-hosting.md/</link>
      <pubDate>Mon, 01 May 2017 04:24:15 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/mengenal-github-pages-sebagai-static-hosting.md/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img src=&quot;https://s-media-cache-ak0.pinimg.com/originals/89/90/1d/89901d0db4f147c4ce11fd97fd6d241c.jpg&quot; alt=&quot;Mengenal Github Pages&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mengenal Github Pages Sebagai Static Hosting&lt;/strong&gt; - Siapa developer/programmer yang tidak kenal github ? Salah satu sosial coding yang menyediakan platform penyimpanan project kita baik private ataupun open ke publik dengan menggunakan GIT sebagai versioning control nya. Pada perkembangannya github tidak hanya dikenal sebagai layanan penyedia penyimpanan kode melainkan juga memiliki banyak fitur yang sangat mendukung lingkungan developer dalam mengembangkan aplikasi mereka, seperti project issue tracking, kanban board, forking, dll. &lt;/p&gt;
&lt;p&gt;Github kini menjelma layaknya sosial media bagi para programmer di seluruh dunia untuk berbagi ide, kode dan project. Ada banyak sekali project open-souce besar yang lahir dari hasil kolaborasi para developer diatas platform Github ini. Dengan makin dekatnya github dengan lingkungan developer maka kita sebagai developer juga mesti lebih bisa memanfaatkan berbagai fitur yang sebenarnya sudah disediakan oleh Github, dan salah satu yang akan kita bahas kali ini adalah Github Pages. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com&quot; target=&quot;_blank&quot;&gt;Github Pages&lt;/a&gt; merupakan hosting static file gratis yang disediakan oleh Github untuk para developer. Static file disini ialah seperti HTML, CSS, Javascript, Images, dll, yakni kode-kode client-side sebuah website yang tidak lagi memerlukan compile, transpile ataupun webserver untuk menjalankannya. Dalam bahasa bodohnya kita tidak bisa meng-hosting file yang akan generate dinamyc content dari database seperti yang biasa kita lakukan dari kode backend kita. Jadi kode wordpress tidak bisa ya di host di Github Pages, karena wordpress kan akan generate dinamyc konten dari Database lewat kode PHP. &lt;/p&gt;
&lt;p&gt;Ah, static file seperti itu apa berguna buat kita para developer ? Bukankah kode kita banyak yang dinamyc content ? Tentu saja karena dunia nyata kita banyak bergelut dg data yang dinamis. Namun tentu juga feature ini tidak dibuat jika tidak membantu developer itu sendiri. Karena pada perkembangannya kita bisa membuat banyak konten menarik dan berguna hanya menggunakan static file konten ini. &lt;/p&gt;
&lt;p&gt;Salah satu hal yang sering dibutuhkan oleh para developer adalah homepage atau halaman demo untuk project yang dia buat dan ini sangat terbantu dengan adanya Github Pages ini, karena kita kini bisa buat halaman homepage/demo dari project kita tanpa harus bayar hosting lagi.&lt;/p&gt;
&lt;p&gt;Kita bahkan bisa membuat sebuah Blog hanya dari sebuah static konten, dimana biasanya sebuah Blog seringkali di generate dari dinamyc konten. Adanya berbagai tools static file generator seperti Jekyll, winterrsmith dll yang nanti akan dijelaskan di artikel terpisah membuat kita mampu membuat Blog hanya bermodalkan static konten dan bisa di host di Github Pages. &lt;/p&gt;
&lt;p&gt;Kalau sudah tau manfaat dari static file hosting dari Github Pages ini, lantas bagaimana kalau saya ingin mulai membuat Github Pages ini ? Apa saja yang mesti dibuat ? &lt;/p&gt;
&lt;p&gt;Pada dasarnya semuanya sudah dijelaskan dengan mudah di official website nya di &lt;a href=&quot;https://pages.github.com&quot; target=&quot;_blank&quot;&gt;https://pages.github.com&lt;/a&gt;, namun saya akan coba jelaskan ulang langkah-langkahnya dalam bahasa Indonesia, semoga tidak ada yang terlewat. Berikut cara membuat Github Pages :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pastinya kalian perlu membuat akun Github, karena github page adalah fitur yang hanya kalian bisa rasakan kalau kalian pengguna github.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Buat repository dengan nama yang sama dengan nama username Github kalian dengan ditambahkan &lt;strong&gt;github.io&lt;/strong&gt; dibelakangnya. Jadi bila username Github saya adalah &lt;strong&gt;mazipan&lt;/strong&gt; maka saya akan membuat repository dengan nama &lt;strong&gt;mazipan.github.io&lt;/strong&gt;, Github akan dengan otomatis membaca branch master dari repository ini sebagai static file yang akan dibuat Github Pages nantinya.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Buat file index.html di dalamnya dan seperti biasa tambahkan kata legendaris &lt;strong&gt;Hello World&lt;/strong&gt; didalamnya untuk mengetahui apakah Github Pages kita telah bisa mengakses repository yang benar.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Akses github Pages di https://&lt;strong&gt;username&lt;/strong&gt;.github.io, seperti contoh punya saya di mazipan.github.io&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Tarammmmm, Github page sudah jadi dan bisa digunakan.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Seeingkali kita membuat banyak repository yang membutuhkan homepage/halaman demo dan ini akan menyusahkan kalau semuanya harus membuat homepage/halaman demonya di dalam repository &lt;strong&gt;username&lt;/strong&gt;.github.io ini. Akan lebih mudah jika kita bisa langsung menambahkan page baru dari repository yang bersangkutan dan tidak perlu copy static file ke repo &lt;strong&gt;username&lt;/strong&gt;.github.io.&lt;/p&gt;
&lt;p&gt;Untuk kebutuhan ini github Pages juga sudah menyediakan fiturnya, jadi setelah kita mempunyai repository &lt;strong&gt;username&lt;/strong&gt;.github.io Sebagai halaman utama dari github Pages kita, kita juga bisa menambahkan page baru langsung dari repository lain.&lt;/p&gt;
&lt;p&gt;Untuk bisa menggunakan fitur ini ada beberapa alternatif yang bisa kita coba, beberapa diantaranya adalah dengan cara berikut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kita bisa membuat branch &lt;strong&gt;gh-pages&lt;/strong&gt; di repository lain yang ingin kita buat homepage/halaman demonya, github Pages akan secara otomatis menganggap branch ini sebagai page baru di github Pages kita sehingga nantinya bisa kita akses di &lt;strong&gt;username&lt;/strong&gt;.github.io/&lt;strong&gt;nama_repository&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Namun perlu diingat bahwa hanya static file yang bisa dibaca oleh Github Pages.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Kita bisa juga tidak harus membuat branch gh-pages namun langsung menggunakan branch master kita sebagai page baru namun diperlukan sedikit perubahan konfigurasi di setting repository kita, dengan cara :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Masuk ke repository kita, misal &lt;a href=&quot;https://github.com/mazipan/bem-kit&quot;&gt;https://github.com/mazipan/bem-kit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Masuk ke tab setting, misal &lt;a href=&quot;https://github.com/mazipan/bem-kit/settings&quot;&gt;https://github.com/mazipan/bem-kit/settings&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scroll kebawah dan cari setting Github Pages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pada pilihan &lt;strong&gt;Source&lt;/strong&gt;, kita bisa ganti menggunakan branch yang kita mau, misalkan master.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Page baru berhasil dibuat. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Baca juga berbagai &lt;a href=&quot;https://mazipanneh.com/blog/open-source-project/&quot; target=&quot;_blank&quot;&gt;open source repository&lt;/a&gt; yang saya buat.&lt;/p&gt;
&lt;p&gt;Demikian sedikit pengenalan Github Pages dari saya, semoga bermanfaat.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana di pagi hari kalau itu.&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Mengenal BEM CSS</title>
      <link>https://mazipan.github.io/blogs/articles/mengenal-bem-css.md/</link>
      <pubDate>Mon, 17 Apr 2017 13:46:26 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/mengenal-bem-css.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 397px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://mazipan.github.io/wp-contents/images/bem-css-mazipanneh.com.jpg&quot; alt=&quot;Mengenal BEM CSS&quot; width=&quot;397&quot; height=&quot;180&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&lt;em&gt;&lt;span style=&quot;color: #808080; text-align: center;&quot;&gt;Bem CSS (Block &amp;#8212; Element &amp;#8212; Modifier) &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Mengenal BEM CSS&lt;/strong&gt; - Setelah beberapa kali menulis dan menjelaskan soal &lt;a href=&quot;http://getbem.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;BEM CSS&lt;/a&gt;, kali ini saya coba kembali menuliskan di blog ini dan berusaha menjelaskan mengenai BEM CSS dalam bahasa Indonesia yang semoga bisa dan masih mudah dipahami.&lt;/p&gt;
&lt;p&gt;Pada dasarnya sudah banyak artikel diluar sana yang juga menjelaskan hal yang sama mengenai BEM CSS, namun memang sumber yang berbahasa Indonesia memang masih minim atau bahkan sangat sulit untuk ditemukan. Berangkat dari hal tersebut juga saya berusaha konsisten menulis di blog ini dalam bahasa Indonesia.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;BEM CSS sendiri mungkin terdengar asing bagi sebagian kita, bahkan bagi kalangan Frontend Developer pun BEM CSS bukanlah hal yang jamak didengar dan diperbincangkan apalagi diimplementasikan. Hal ini memang sejalan dengan tidak banyaknya juga developer yang mau mengimplementasikan BEM CSS kedalam kode mereka, tentunya bukan karena tidak mau namun lebih kepada karena mereka belum merasakan manfaatnya langsung setelah implementasi BEM CSS.&lt;/p&gt;
&lt;p&gt;Sebelum​ membahas BEM CSS, saya akan coba membahas beberapa masalah yang menjadikan BEM CSS sebagai solusi yang lebih baik bagi kode CSS Anda. Sebagai Frontend Developer sering kali kita tidak bekerja sendiri atau dalam posisi saya sendiri saya harus bekerja dalam team dengan Frontend Developer yang berjumlah lebih dari 6 orang. Pada saat ini kejelasan  menjadi penting karena faktanya masing-masing Frontend Developer punya gaya masing-masing termasuk dalam penamaan &lt;em&gt;class&lt;/em&gt; dan penempatan suatu &lt;em&gt;class&lt;/em&gt; dalam suatu file. Masalah mulai terjadi ketika kita diharuskan mengubah, menambahkan, menghapus pekerjaan orang lain terutama kode CSS karena pertama kita tidak tau satu class ada di file mana, kedua kita tidak pernah tau juga class tersebut digunakan oleh halaman mana dan bagian mana saja. Pada akhirnya yang sering dilakukan adalah kita menambahkan &lt;em&gt;class&lt;/em&gt; baru tanpa mengubah atau menghilangkan &lt;em&gt;class&lt;/em&gt; yang lama, semakin menjadi ruwet lagi bila makin hari jumlah file, line of code, serta kompleksitas kode CSS kita semakin meningkat. Semua hal ini tentu saja bukan sebuah masalah ketika kita bekerja sendiri apalagi dengan level kompleksitas yang masih rendah, namun tidak ada salahnya belajar dari kesalahan arsitektur orang lain karena kita tidak pernah tau akan seberapa besar berkembang​nya kode kita nantinya.&lt;/p&gt;
&lt;p&gt;Setelah membahas masalah yang ada, kita coba pelajari BEM CSS dan hal apa yang ditawarkan oleh BEM CSS. BEM CSS sendiri bukanlah suatu teknologi melainkan hanya sebuah pendekatan yang berusaha mengatur cara kita melihat, membangun dan menuliskan kode CSS yang berimbas juga pada kode HTML kita dengan tujuan memberikan optimisme dalam melakukan perubahan terhadap satu &lt;em&gt;Style&lt;/em&gt; di CSS. BEM CSS menawarkan independensi atau _scope_-ing, dimana satu block scope style hanya digunakan pada komponen dengan scope tertentu sehingga mudah untuk menebak satu class digunakan oleh siapa pun sebaliknya mudah menebak satu class berada di file mana. Dengan independensi block scope ini tentu saja menambahkan optimisme kepada Frontend Developer ketika diharuskan melakukan perubahan pada suatu Style CSS karena mudahnya memprediksi side effects dari perubahan yang dia lakukan.&lt;/p&gt;
&lt;p&gt;BEM CSS merupakan kependekan dari Block-Element-Modifier yang merupakan susunan-susunan yang membentuk aturan dalam BEM CSS tersebut. BEM CSS membagi caranya memandang sebuah HTML element kedalam tiga hal tersebut yang nanti direfleksikan juga terhadap cara kita membuat kode CSS kita. Kita akan bahas satu persatu.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Block&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Block merupakan satu scope HTML element yang berdiri secara independen dan tidak memiliki ketergantungan. Saya sendiri biasa mendefinisikan elemen HTML sebagai Block bila dia merupakan sekumpulan elemen dalam satu scope yang memiliki satu fungsi yang jelas dan bisa didefinisikan dengan mudah. Katakanlah saya punya Block &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;menu&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, dll. Dalam BEM CSS tidak ada aturan untuk penanaman dan penulisan Block cukup tulis seperti biasa kita menuliskan CSS class kita, usahakan saja nama Block tetap sederhana, bermakna, merefleksikan fungsinya ataupun posisinya didalam halaman web.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Element&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Element merupakan anak dari Block, element adalah hal yang bergantung pada &lt;em&gt;parent_-nya, posisinya selalu ada di dalam sebuah Block dan tidak​ dapat berdiri sendiri tanpa ada Block _parent_-nya. Katakanlah saya punya Block &lt;code&gt;menu&lt;/code&gt; yang punya elemen dibawahnya yakni &lt;code&gt;menu item&lt;/code&gt; maka sudah seharusnya &lt;code&gt;menu item&lt;/code&gt; itu ada didalam &lt;code&gt;menu&lt;/code&gt; dan tidak seharusnya &lt;code&gt;menu item&lt;/code&gt; berdiri sendiri tanpa adanya &lt;code&gt;menu&lt;/code&gt; diatasnya. Di dalam BEM CSS Element memiliki aturan penulisan yakni dengan selalu menambahkan nama Block parent-nya sebagai _prefix&lt;/em&gt; dan diikuti &lt;strong&gt;&lt;em&gt;double underscore&lt;/em&gt;&lt;/strong&gt; (&lt;strong&gt;__&lt;/strong&gt;) baru nama elemen tersebut. Jadi pada contoh kasus menu maka kita akan menulis Element menu item sebagai berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.menu{}
.menu__item{}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hal ini dikarenakan untuk memudahkan mendeteksi Element​ tersebut berada di Block mana dan membatasi penggunaan suatu elemen yang hanya boleh didalam Block parent-nya.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Modifier&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Modifier dalam BEM CSS merupakan tanda yang menunjukkan suatu perubahan baik kelakuan, kondisi, maupun tampilan dari suatu Element ataupun Block, seperti contoh state &lt;code&gt;active&lt;/code&gt;, &lt;code&gt;selected&lt;/code&gt;, &lt;code&gt;disabled&lt;/code&gt;, dsb atapun perubahan tampilan seperti &lt;code&gt;large&lt;/code&gt;, &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;primary&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, dsb. Penulisan dalam BEM sendiri diatur dengan menambahkan nama Block ataupun Element yang akan diubah diikuti &lt;strong&gt;&lt;em&gt;double dash&lt;/em&gt;&lt;/strong&gt; (&lt;strong&gt;&amp;#8212;&lt;/strong&gt;) baru nama modifier yang kita buat. Jadi kalau dari contoh kasus menu diatas dan kita akan menambahkan satu state &lt;em&gt;selected&lt;/em&gt; kedalam salah satu menu item-nya, maka kita bisa menuliskan sebagai berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.menu{}
.menu__item{}
.menu__item--selected{}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Beberapa orang sering menanyakan pada saya kenapa memilih BEM CSS padahal syntax atau aturan yang ditawarkan jelas tidak biasa bagi kita yang terbiasa menggunakan framework yang ada sekarang ini. Dan buat saya kalau pertanyaannya soal &lt;em&gt;syntax_, entahlah sepertinya justru hal ini yang membuat saya langsung klik dengan aturan yang dibawa oleh BEM CSS. Buat saya _syntax&lt;/em&gt; BEM CSS justru &lt;em&gt;cantik&lt;/em&gt; dalam artian mudah dipahami apalagi saya selalu berpikir bahwa suatu kode itu mesti mudah di track ketika terjadi kesalahan, mudah diperbarui, mudah di refactor pada masa depan tanpa takut menimbulkan efek samping terhadap perubahan tersebut. Memahami BEM CSS beserta semua aturan di dalamnya akan lebih mudah bila kita juga paham tujuan dan apa yang ingin dicapai dengan penerapan BEM CSS terhadap kode kita, pada akhirnya BEM CSS bukanlah aturan yang mengikat dan kita bisa mengadopsinya dengan berbagai modifikasi lagi agar lebih sesuai dengan gaya penulisan masing-masing namun tetap dengan tujuan yang sama yakni independensi pada Block.&lt;/p&gt;
&lt;p&gt;Demikianlah sedikit penjelasan mengenai BEM CSS,semoga bisa memberikan satu pengetahuan baru.&lt;/p&gt;
&lt;p&gt;Bila Anda tertarik untuk belajar lebih lanjut mengenai BEM CSS silahkan baca di &lt;a href=&quot;http://getbem.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://getbem.com/&lt;/a&gt; yang merupakan official website dari para pengguna BEM CSS, disana sudah ada banyak &lt;a href=&quot;http://getbem.com/faq/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;FAQ &lt;/a&gt;juga yang bisa dibaca terlebih dahulu. Baca juga presentasi saya mengenai BEM CSS &lt;a href=&quot;https://www.slideshare.net/IrfanMaulana21/bliblidotcom-reintroduction-bem-css&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;disini&lt;/a&gt;. Saya juga telah membuat framework CSS sederhana yang dibangun menggunakan BEM CSS dengan nama &lt;a href=&quot;https://mazipan.github.io/bem-kit/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BEM-Kit&lt;/a&gt;, semua kodenya saya buat secara open-source karenanya silahkan dipelajari dan dikembangkan sendiri  sesuai kebutuhan. Kodenya bisa diambil di &lt;a href=&quot;https://github.com/mazipan/bem-kit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana ditengah insomnia nya.&lt;/p&gt;
&lt;p&gt;Salam,&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Membuat Variasi Button Menggunakan SASS</title>
      <link>https://mazipan.github.io/blogs/articles/membuat-variasi-button-menggunakan-sass.md/</link>
      <pubDate>Mon, 17 Apr 2017 12:52:05 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/membuat-variasi-button-menggunakan-sass.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 655px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/TdX9B.jpg&quot; alt=&quot;Variasi Button Menggunakan SASS&quot; width=&quot;655&quot; height=&quot;222&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;&lt;span style=&quot;color: #999999; font-size: 10pt;&quot;&gt;&lt;em&gt;Contoh Variasi Button dalam Bootstrap (source : https://i.stack.imgur.com/TdX9B.jpg)&lt;/em&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Membuat Button dengan SASS&lt;/strong&gt; - Button merupakan salah satu kompoenen web yang sering digunakan karena fungsinya yang menunjukkan sebuah aksi yang bisa dieksekusi setelah di klik. Button diluar sana terdapat banyak sekali variasinya tergantung dari faktor kebutuhan, estetika, maupun kesenangan pengguna maupun pengembang web.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dalam sebuah framework CSS sendiri biasanya mereka akan membawa satu gaya yang konsisten untuk masing-masing variasi button yang disediakan, seperti yang ditampilkan pada gambar diatas adalah variasi button yang dibawa oleh framework bootstrap sebelum dimodifikasi lewat custom-theme. Ada pula yang membawa gaya flat, material, emboss dan lain-lain.&lt;/p&gt;
&lt;p&gt;Kita sendiri setelah belajar &lt;a href=&quot;https://mazipanneh.com/blog/2017/04/mengenal-dan-belajar-sass-sebagai-css-pre-processor/&quot; target=&quot;_blank&quot;&gt;SASS sebagai CSS Pre-processor&lt;/a&gt;, kita menjadi tahu bahwa kita bisa melakukan banyak hal dengan keunggulan pre-processor ini, termasuk juga dengan hal-hal yang tadinya susah untuk dibuat menggunakan CSS biasa.Salah satunya seperti yang akan kita buat dimana kita akan membuat beberapa variasi button dengan satu gaya yang konsisten yang tentu saja jika dibuat menggunakan CSS biasa maka akan menyusahkan kita karena harus berulang-ulang membuat hal yang sama karenanya SASS adalah tools wajib kita buat mengerjakan contoh yang akan kita kerjakan berikut.&lt;/p&gt;
&lt;p&gt;Adapun kurang lebih langkah-langkahnya adalah :&lt;/p&gt;
&lt;p&gt;Pertama kita akan definisikan beberapa variasi warna dari button yang kita buat, variasi warna ini juga termasuk ketika di hover dan juga warna dari font button tersebut. Katakanlah kita akan buat 6 variasi warna button maka kurang lebih seperti ini :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$white         : #fff !default;
$black         : #000 !default;
$grey           : #999 !default;
$greenLight    : lighten($green,10%) !default;
$red        : #F8011E !default;
$redLight     : lighten($red,10%) !default;
$green        : #00B35E !default;
$greenLight    : lighten($green,10%) !default;
$blue         : #0096D9 !default;
$blueLight    : lighten($blue,10%) !default;
$orange        : #F7931E !default;
$orangeLight    : lighten($orange,10%) !default;

$buttonVariansName  : green, red, blue, orange, gray, white;
$buttonVariansHex   : $green, $red, $blue, $orange, $grey, $white;
$buttonVariansHover : $greenLight, $redLight, $blueLight, $orangeLight, $greyLight, $white;
$buttonVariansFont  : $white, $white, $white, $white, $black, $black;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Berikutnya, kita akan membuat style sederhana untuk button kita sebelum diberikan warna seperti yang sudah kita definisikan di awal, berikut kodenya :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.button
{

    display: inline-block;
    padding: 13px 20px;
    outline: none;
    border: none;
    text-align: center;
    text-decoration: none;
    cursor: pointer;

    @include appearance(none);

    &amp;amp;:hover, &amp;amp;:focus, &amp;amp;:active
    {
        text-decoration: none;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Kalau ada yang bingung kode &lt;code&gt;@include appearance(none);&lt;/code&gt; ada dimana, itu adalah mixin yang bisa kalian lihat kodenya di &lt;a href=&quot;https://github.com/mazipan/bem-kit/blob/master/src/_scss/mixins/_appearance.scss&quot; target=&quot;_blank&quot;&gt;repository bem-kit.&lt;/a&gt; Saya juga menambahkan &lt;code&gt;:hover, :focus, :active&lt;/code&gt; agar ketika digunakan oleh link tag seperti `` tidak membawa garis bawah yang biasanya menjadi bawaan sebuah link.&lt;/p&gt;
&lt;p&gt;Setelah kita membuat style standar-nya kini saatnya memberikan warna pada button tersebut sesuai dengan variasi yang kita buat diawal. Dan tentu saja kita memanfaatkan looping dari &lt;a href=&quot;https://mazipanneh.com/blog/2017/04/mengenal-dan-belajar-sass-sebagai-css-pre-processor/&quot; target=&quot;_blank&quot;&gt;SASS&lt;/a&gt; agar lebih mudah, berikut contoh kodenya :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @for $i from 1 through length($buttonVariansName) {  
    &amp;amp;--#{nth($buttonVariansName, $i)} {
        background: nth($buttonVariansHex, $i);
        color: nth($buttonVariansFont, $i);

        &amp;amp;:hover
        {
            background: nth($buttonVariansHover, $i);
            color: nth($buttonVariansFont, $i);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Kode diatas diletakkan di dalam selector &lt;code&gt;.button&lt;/code&gt; sehingga ketika kita menggunakan symbol &lt;code&gt;&amp;amp;--&lt;/code&gt; dibawahnya berarti kita akan membawa nama parent-nya sebagai prefix.&lt;/p&gt;
&lt;p&gt;Dari contoh kode looping tersebut akan menghasilkan kurang lebih seperti ini :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.button--green { background: #00B35E; color: #fff; }
.button--green:hover { background: #00e679; color: #fff; }
.button--red { background: #F8011E; color: #fff; }
.button--red:hover { background: #fe2e46; color: #fff; }
.button--blue { background: #0096D9; color: #fff; }
.button--blue:hover { background: #0db4ff; color: #fff; }
.button--orange { background: #F7931E; color: #fff; }
.button--orange:hover { background: #f9ab4f; color: #fff; }
.button--gray { background: #999; color: #000; }
.button--gray:hover { background: #CCC; color: #000; }
.button--white { background: #fff; color: #000; }
.button--white:hover { background: #fff; color: #000; }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sampai disini sebenarnya kita telah berhasil membuat variasi button kita yang bisa kita gunakan kurang lebih seperti berikut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;button class=&amp;quot;button button--green&amp;quot;&amp;gt;button button--green&amp;lt;/button&amp;gt;
&amp;lt;button class=&amp;quot;button button--red&amp;quot;&amp;gt;button button--red&amp;lt;/button&amp;gt;
&amp;lt;button class=&amp;quot;button button--blue&amp;quot;&amp;gt;button button--blue&amp;lt;/button&amp;gt;
&amp;lt;button class=&amp;quot;button button--orange&amp;quot;&amp;gt;button button--orange&amp;lt;/button&amp;gt;
&amp;lt;button class=&amp;quot;button button--gray&amp;quot;&amp;gt;button button--gray&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Untuk lebih lanjutnya, dengan cara yang sama kita bisa membuat varian button dengan style yang berbeda, misalkan kita ingin membuat varian button-outline, material, emboss atau lainnya. Silahkan berkreasi dengan ide nya masing-masing ya karena saya hanya membahas dasar bagaimana cara membuat button memanfaatkan kelebihan SASS saja. &lt;/p&gt;
&lt;p&gt;Untuk hasil tampilan dari kode yang kita buat bisa dilihat &lt;a href=&quot;https://mazipan.github.io/bem-kit/demo/#buttons&quot; target=&quot;_blank&quot;&gt;disini&lt;/a&gt;, dan Anda bisa lihat kode lengkapnya di github saya &lt;a href=&quot;https://github.com/mazipan/bem-kit&quot; target=&quot;_blank&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download juga &lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot; target=&quot;_blank&quot;&gt;Ebook Mengembangkan CSS Framework Sendiri&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Semoga bermanfaat,&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana di jam istirahat kerja.&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Membuat CSS Grid Sederhana dengan SASS</title>
      <link>https://mazipan.github.io/blogs/articles/membuat-css-grid-sederhana-dengan-sass.md/</link>
      <pubDate>Sat, 08 Apr 2017 11:51:58 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/membuat-css-grid-sederhana-dengan-sass.md/</guid>
      <author></author>
      <description>&lt;figure style=&quot;width: 480px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/F4cBF.jpg&quot; alt=&quot;Membuat CSS Grid Sederhana dengan SASS&quot; width=&quot;480&quot; height=&quot;307&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;&lt;span style=&quot;color: #999999;&quot;&gt;&lt;em&gt;Gambaran grid layout pada sebuah halaman web&lt;/em&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt; 

&lt;p&gt;&lt;strong&gt;Membuat CSS Grid&lt;/strong&gt; - CSS Grid merupakan layout kumpulan class CSS yang digunakan untuk mengatur layout sebuah halaman website. Pada framework-framework CSS populer di luar sana, hampir semuanya mengakomodir kebutuhan CSS Grid dengan pendekatannya masing-masing.&lt;/p&gt;
&lt;p&gt;CSS Grid biasanya membagi layout ke dalam konsep &lt;code&gt;row&lt;/code&gt; dan &lt;code&gt;column&lt;/code&gt;. Dimana &lt;code&gt;row&lt;/code&gt; akan berfungsi seperti &lt;code&gt;tr&lt;/code&gt; pada &lt;em&gt;table&lt;/em&gt; HTML, sedangkan &lt;code&gt;column&lt;/code&gt; akan berfungsi layaknya &lt;code&gt;td&lt;/code&gt; pada &lt;em&gt;table&lt;/em&gt; HTML.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Pada tutorial kali ini kita akan coba membuat CSS Grid sendiri dengan sedikit mencontoh pada apa yang dilakukan oleh beberapa framework populer diluar sana dengan bantuan &lt;a href=&quot;https://mazipanneh.com/blog/2017/04/mengenal-dan-belajar-sass-sebagai-css-pre-processor/&quot;&gt;CSS Pre-Processor SASS&lt;/a&gt; agar mempermudah kita dalam membuatnya, bila Anda belum familiar dengan SASS mungkin Anda perlu membaca artikel &lt;a href=&quot;https://www.codepolitan.com/setup-sass-dengan-nodejs-dan-gulp-58e1e72eb3ded&quot; target=&quot;_blank&quot;&gt;Setup SASS dengan Node.js dan Gulp&lt;/a&gt; terlebih dahulu, atau bila Anda lebih familiar dengan Grunt sebagai task Runner silahkan download &lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot;&gt;Ebook membuat Framework CSS sendiri&lt;/a&gt;&amp;nbsp;karena di dalamnya terdapat langkah-langkah setup SASS dengan Grunt.&lt;/p&gt;
&lt;p&gt;Pertama kita akan buat class &lt;code&gt;.row&lt;/code&gt; kita, namun sebelumnya kita akan men-&lt;em&gt;define&lt;/em&gt; &lt;strong&gt;mixin&amp;nbsp;&lt;/strong&gt;&lt;code&gt;clearfix&lt;/code&gt; yang akan kita pakai di class &lt;code&gt;.row&lt;/code&gt; kita, sebagai berikut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/9a58bd1a8bda0a8a5b4bb2daf2a5ddb8.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Mixin &lt;code&gt;clearfix&lt;/code&gt; ini digunakan agar antar class &lt;code&gt;row&lt;/code&gt; tidak terjadi tumpang tindih karena di dalamnya biasanya akan banyak menggunakan &lt;em&gt;rule&lt;/em&gt; &lt;code&gt;float: something&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Setelah membuat &lt;strong&gt;mixin&lt;/strong&gt; tersebut, kita akan membuat class &lt;code&gt;.row&lt;/code&gt;-nya sedikit mengikuti dengan apa yang dibuat oleh framework foundation dalam menetapkan max-width nya agar ketika ditampilkan dilayar yang terlalu lebar tidak sampai &lt;em&gt;fullscreen&lt;/em&gt; , berikut kodenya:&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/1d89fdcae5d021382de10a550c46d437.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Setelah berhasil membuat row, kita akan membuat class &lt;code&gt;.column&lt;/code&gt; kita, dan mengikuti dari beberapa framework populer yang membagi column mereka kedalam 12 bagian maka kita juga akan membaginya kedalam 12 bagian, dimana kita akan memberikan nama class sesuai dengan urutan angka dari &lt;code&gt;column-1&lt;/code&gt;&amp;nbsp;sampai &lt;code&gt;column-12&lt;/code&gt; yang masing-masing memiliki lebar yang jika dijumlahkan akan menjadi 100% width. Untuk implementasi kodenya, kurang lebih seperti berikut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/a03e39916e1aaa6d8fe7d456a5d63313.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Dan kebutuhan dasar CSS Grid kita telah selesai dibuat dengan cepat, sederhana namun tetap memenuhi kaidah Grid Layout. Anda bisa memodifikasi, menambahkan ataupun mengurangi sesuai dengan kebutuhan masing-masing karena artikel ini memang dibuat untuk kebutuhan belajar dasar-dasarnya saja.&lt;/p&gt;
&lt;p&gt;Untuk menggunakan class tersebut bisa lihat contoh kode berikut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/ce3041dc41e44c341e50300dd39b5180.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Anda bisa melihat hasil tampilan kode tersebut di halaman demo &lt;a href=&quot;https://mazipan.github.io/bem-kit/demo/#grids&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;bem-kit&lt;/a&gt;&amp;nbsp;ini.&lt;/p&gt;
&lt;p&gt;Untuk full source code pembuatan Grid CSS Anda bisa coba lihat di github repo saya &lt;a href=&quot;https://github.com/mazipan/bem-kit&quot; target=&quot;_blank&quot;&gt;disini&lt;/a&gt;, disitu sudah terdapat cara saya membuat Grid CSS beserta beberapa tambahan kebutuhan lainnya seperti &lt;code&gt;offset&lt;/code&gt; dan lain-lain yang bisa Anda lihat &lt;a href=&quot;https://github.com/mazipan/bem-kit/blob/master/src/_scss/rules/_grids.scss&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;disini&lt;/a&gt;. Anda bisa juga melihat artikel saya mengenai CSS, SASS dan teknologi terkait lainnya &lt;a href=&quot;http://mazipanneh.com/blog/tag/css/&quot; target=&quot;_blank&quot;&gt;disini&lt;/a&gt;&amp;nbsp;. Artikel ini telah di publikasikan juga di &lt;a href=&quot;https://www.codepolitan.com/panduan-membuat-css-grid-sederhana-dengan-sass-58e20d5ecc48f&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;codepolitan.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download Ebook Programming&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Terima kasih dan semoga bermanfaat.&lt;/p&gt;
&lt;p&gt;Ditulis oleh &lt;a href=&quot;https://mazipanneh.com/blog/&quot; target=&quot;_blank&quot;&gt;Irfan Maulana&lt;/a&gt; di sore hari yang mendung kala itu. 🙂&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Styling checkbox menggunakan SASS</title>
      <link>https://mazipan.github.io/blogs/articles/styling-checkbox-menggunakan-sass/</link>
      <pubDate>Thu, 06 Apr 2017 13:22:40 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/styling-checkbox-menggunakan-sass/</guid>
      <author></author>
      <description>&lt;img width=&quot;469&quot; height=&quot;313&quot; alt=&quot;Styling checkbox menggunakan SASS&quot; src=&quot;http://www.telerik.com/clientsfiles/a4289618-7f81-403e-977c-60d07326b9a5_checkbox.png?sfvrsn=0&quot; title=&quot;&quot; class=&quot;aligncenter size-custom&quot; /&gt;

&lt;p&gt;&lt;strong&gt;Membuat Checkbox dengan SASS&lt;/strong&gt; - Bila pada tulisan sebelumnya&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/2017/03/memberi-style-css-sederhana-pada-radio-button/&quot;&gt;disini&lt;/a&gt;&amp;nbsp;kita sudah&amp;nbsp;bahas mengenai sedikit eksperimen kita dalam memberikan Style pada komponen input radio, maka kali ini kita akan coba ber-eksperimen lagi dengan komponen lainnya dan saya memilih komponen input dengan type checbox atau kita sebut saja sebagai checkbox.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Bosan ? semestinya sih kalau lagi dalam tahap belajar tidak boleh bosan ya, karena learning by doing masih jadi cara yang paling baik buat belajar koding. Jadi ya, sabar ya dan silahkan disimak langkah-langkahnya sebagai berikut :&lt;/p&gt;
&lt;p&gt;Pertama, kita akan siapkan seperti biasa HTML dasar yang nantinya akan kita beri style. Sederhana saja cuma definisikan input dengan &lt;em&gt;type=”checkbox”_, kita buat saja 3 varian seperti sebelumnya dengan 1 kita buat sebagai input yang _disable&lt;/em&gt; atau tidak dapat dipilih oleh pengguna. Berikut kurang lebih kode HTML yang kita buat :&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/bb27779c9ec0774359a94312d8afc806.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Bila Anda merasa kurang bisa memahami kode HTML tersebut, maka silahkan baca artikel&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/2017/03/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-1-mengenal-html/&quot;&gt;Perjalanan menjadi Frontend Developer bagi pemula Seri-1 Mengenal HTML&lt;/a&gt;&amp;nbsp;terlebih dahulu ya&amp;nbsp;:-).&lt;/p&gt;
&lt;p&gt;Sebelum saya teruskan, pastikan sudah baca artikel ini&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/2017/03/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-2-mengenal-css/&quot;&gt;Perjalanan Menjadi Frontend Developer Bagi Pemula – Seri 2 – Mengenal CSS&lt;/a&gt;&amp;nbsp;karena kita akan bahas beberapa istilah dalam CSS yang &amp;nbsp;akan terdengar asing bagi yang belum paham.&lt;/p&gt;
&lt;p&gt;Setelah membuat HTML, kita akan membuat class &lt;strong&gt;.checkbox&lt;/strong&gt; yang akan kita beri style menggunakan SASS, kita akan memberi style pada label kemudian &lt;em&gt;:before&lt;/em&gt; dan &lt;em&gt;:after&lt;/em&gt; dari label tersebut. &lt;em&gt;:before&lt;/em&gt; akan kita gunakan sebagai kotak sebelum checkbox tersebut dipilih, dan &lt;em&gt;:after&lt;/em&gt; akan kita gunakan sebagai tanda bahwa checkbox tersebut dalam keadaan terpilih oleh pengguna. Karena kita akan inisialisasi dalam keadaan state yang belum di definisikan maka kita buat saja &lt;em&gt;:after&lt;/em&gt; dalam keadaan tidak terlebih dahulu, dalam hal ini kita set &lt;em&gt;width:0&lt;/em&gt; dan _height:0_, berikut kurang lebih kode yang telah kita buat untuk membuat checbox yang berada dalam keadaaan tidak terpilih sama sekali :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/e849ef381c0ade0244c3c93a80a794df.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Setelahnya kita akan mendefinisikan saat checkbox yang kita buat dalam keadaan terpilih yang artinya kita mesti membuat &lt;em&gt;:after&lt;/em&gt; dari label kita memiliki warna background seperti variable &lt;em&gt;$theme&lt;/em&gt; yang sudah kita buat dan juga memiliki tanda &lt;em&gt;tick-mark&lt;/em&gt; atau &lt;em&gt;contreng&lt;/em&gt; yang menunjukkan bahwa sedang terpilih. Kita bisa saja menggunakan image sebaga &lt;em&gt;background-image&lt;/em&gt; untuk membuat &lt;em&gt;tick-mark&lt;/em&gt; tersebut, tapi saya lebih memilih membuat manual menggunakan SASS dengan memodifikasi &lt;em&gt;border&lt;/em&gt; dan _rotate_, berikut kurang lebih kode yang kita buat untuk membuat checkbox dalam keadaan terpilih :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/90d1aa07bda87ac435108820644b2209.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Terakhir kita akan buat satu &lt;em&gt;state&lt;/em&gt; lagi yakni ketika checkbox tersebut dalam keadaan &lt;em&gt;disable&lt;/em&gt; atau tidak dapat dipilih oleh pengguna, karena secara UI pengguna juga mesti sadar bahwa satu input memang dalam keadaan yang tidak dapat dia pilih. Untuk ini kita akan memberi background-color abu-abu agar terkesan &lt;em&gt;greyscale&lt;/em&gt; dan memberikan &lt;em&gt;border&lt;/em&gt; abu-abu dengan &lt;em&gt;pallete&lt;/em&gt; 1 tingkat lebih gelap diatasnya. berikut kurang lebih kode yang kita buat :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/7e5d072ab3112461de40b0ebd0db00ad.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Pada akhirnya checkbox kita ini akan menghasilkan tampilan seperti gambar berikut :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*jnGnWowxbghHD_DZSOuVaQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Berikut adalah kode SASS yang telah kita gabungkan kedalam satu file, kurang lebih seperti berikut ini :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/7d62010ec91a4d443e04da85aaaa46a8.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Demikian panduan sederhana dalam memberikan style pada checkbox yang dipadukan dengan kekuatan SASS, bila Anda ingin kesulitan memahami syntax SASS diatas mungkin Anda perlu membaca artikel&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/2017/04/mengenal-dan-belajar-sass-sebagai-css-pre-processor/&quot;&gt;Mengenal dan Belajar SASS Sebagai CSS Pre-Processor&lt;/a&gt;&amp;nbsp;terlebih dahulu. Anda&amp;nbsp;juga bisa melihat Live preview dari kode diatas&amp;nbsp;&lt;a href=&quot;http://codepen.io/mazipan/pen/yMrpXK&quot;&gt;disini&lt;/a&gt;. Artikel ini juga telah di publikasikan di medium&amp;nbsp;&lt;a href=&quot;https://medium.com/@mazipanneh/styling-checkbox-dengan-sass-f111a09ca321&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download Ebook Programming&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Semoga bermanfaat bagi mereka yang masih belajar ya :-).&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana di siang hari jam makan siang saat itu.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Mengenal dan Belajar SASS Sebagai CSS Pre-Processor</title>
      <link>https://mazipan.github.io/blogs/articles/mengenal-dan-belajar-sass-sebagai-css-pre-processor/</link>
      <pubDate>Wed, 05 Apr 2017 11:56:36 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/mengenal-dan-belajar-sass-sebagai-css-pre-processor/</guid>
      <author></author>
      <description>&lt;img class=&quot;aligncenter&quot; src=&quot;http://wiseheartdesign.com/images/articles/sass-lang.png&quot; alt=&quot;Mengenal dan Belajar SASS Sebagai CSS Pre-Processor&quot; /&gt;

&lt;p&gt;&lt;strong&gt;Mengenal SASS&lt;/strong&gt;, &lt;strong&gt;Belajar SASS&lt;/strong&gt; - Sudah tau &lt;strong&gt;SASS&lt;/strong&gt; ? Yap hari ini kita akan belajar dan mengenal SASS sebagai salah satu vendor CSS Pre-processor yang tersedia di pasaran. Artikel ini ditujukan untuk yang sudah paham dengan CSS, bila Anda merasa masih terlalu awam dengan CSS mungkin &lt;a href=&quot;https://mazipanneh.com/blog/2017/03/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-2-mengenal-css/&quot;&gt;artikel ini&lt;/a&gt; akan membantu Anda memahami CSS.&lt;/p&gt;
&lt;p&gt;Pre-processor sendiri merupakan extend dari CSS, dimana ketika kita ngoding CSS kita biasa berkutat dengan bahasa yang sudah harus matang dan tidak boleh ada proses lagi bagi browser untuk memahami nya, ini yang membuat kita tidak bisa menanamkan &lt;em&gt;logic&lt;/em&gt; seperti perulangan, peng-kondisian, ataupun pemakaian kembali kode yang ada. Dari sinilah lahir berbagai pre-processor untuk CSS, termasuk SASS itu sendiri.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Jadi dengan SASS kita bisa melakukan banyak hal yang sebelumnya tidak mungkin dilakukan oleh CSS dengan hasil akhir yang sama yakni file dengan ekstensi CSS. Tentunya pre-processor semacam SASS ini sudah menjadi kebutuhan umum bagi project yang lumayan besar, dikerjakan banyak orang, dan memiliki tingkat kompleksitas tinggi terutama di kode CSS nya. Jadi ayo belajar mengenai SASS !&lt;/p&gt;
&lt;p&gt;SASS merupakan pre-processor yang dikembangkan diatas Ruby sebagai &lt;em&gt;Engine&lt;/em&gt; nya, yang berarti kita juga butuh Ruby untuk menjalankannya atau sekedar ingin belajar dan mencobanya. Syukurlah sekarang ini sudah dikembangkan library untuk &lt;em&gt;porting&lt;/em&gt; ke berbagai bahasa termasuk NodeJS yang memang favorit bagi banyak &lt;em&gt;Frontend Developer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Saya pernah menulis di codepolitan mengenai instalasi minimal untuk SASS di NodeJS menggunakan Gulp sebagai compiler runner nya, Anda bisa baca &lt;a href=&quot;https://www.codepolitan.com/setup-sass-dengan-nodejs-dan-gulp-58e1e72eb3ded&quot;&gt;disini&lt;/a&gt;, Saya juga pernah menulis &lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot;&gt;Ebook membuat Framework CSS sendiri&lt;/a&gt; yang berisi juga langkah-langkah untuk setup SASS di NodeJS menggunakan Grunt, Anda bisa baca jika belum mengetahui kedua hal tersebut.&lt;/p&gt;
&lt;p&gt;SASS memiliki 2 jenis syntax yakni SASS native dan SCSS syntax, Saya sendiri rekomendasi menggunakan SCSS syntax karena lebih mudah untuk dipelajari kita juga hanya akan membahas syntax SCSS di tulisan kali ini.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variabel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pertama kita akan bahas mengenai penggunaan variabel dalam SASS, yang memiliki fungsi seperti variabel dalam bahasa pemrograman lain, bisa digunakan berulang dan oleh fungsi-fungsi lain. Variable pada SASS ditandai dengan &lt;strong&gt;$&lt;/strong&gt; sebagai prefixnya, berikut contoh penggunaan variabel dalam SASS :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/0114631c2bec4e15a2f50743fd5f6d59.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nesting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seringkali di CSS kita harus berulang-ulang menulis selector yang sama dan di dengan SASS kita tidak perlu melakukannya, contoh saja bila biasanya kita di CSS harus menuliskan :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/05e0c60250f4699a5651f10a82e46666.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Maka di SASS kita dipermudah dengan cukup mengetikkan :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/a4bd0e2c50bc2a11340e6098fefbe422.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Selain itu kita bisa juga menambahkan tanda &lt;strong&gt;&amp;amp;&lt;/strong&gt; yang berarti kita ingin menyertakan parent nya sebagai prefix di output nya nanti, seperti contoh berikut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/ca8f21dc452082e19c82f3e600bca20e.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Import&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Salah satu keunggulan SASS dibandingkan CSS biasa adalah bahwa SASS bisa memecah satu file CSS kedalam beberapa file SASS kecil yang bisa tetap di compile jadi satu file CSS, ini sangat berguna untuk tetap menjaga kode kita mudah dibaca dengan mengurangi line of code dalam satu file. Kita bisa menggunakan fitur &lt;strong&gt;@import&lt;/strong&gt; dari SASS ini. Kita bisa memberi nama file SASS dengan diawali underscore (_) yang berarti file tersebut tidak akan di produksi menjadi file CSS melainkan hanya digunakan sebagai modul yang nantinya akan di import oleh file lain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mixin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sebagai developer seringkali kita tidak ingin mengetik hal yang sama berulang kali, mixin salah satu yang mengakomodir keinginan kita tersebut. Dengan mixin kita seperti membuat satu fungsi yang nantinya akan kita pakai di tempat lain. Berikut adalah contoh mixin yang bisa dilihat di gist dibawah :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/9a58bd1a8bda0a8a5b4bb2daf2a5ddb8.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Dan berikut adalah gist untuk contoh penggunaan mixin tersebut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/1d89fdcae5d021382de10a550c46d437.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Extend&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seperti pada OOP extend juga digunakan untuk mewarisi apa yang dipunyai oleh parent yang di extend sehingga tidak perlu lagi mengetik hal yang sama. Berikut contoh penggunaan @extend ini :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/a5afb2c80b9979af316d855ad9222b1e.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SASS bisa melakukan berbagai perhitungan matematis untuk membantu kita, seperti dalam contoh kode berikut dimana saya melakukan perhitungan width class column :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/a03e39916e1aaa6d8fe7d456a5d63313.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Kondisional&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SASS bisa melakukan kondisional berdasarkan variabel yang di assign, contoh sederhananya seperti kode berikut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/70787b375f2156086b041af1b88840ef.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Perulangan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Untuk melakukan perulangan SASS bisa menggunakan for maupun while, berikut contoh kode looping menggunakan @for :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/a03e39916e1aaa6d8fe7d456a5d63313.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Sedangkan contoh menggunakan @while bisa dilihat disini :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/7fb031dec1395802f516a71245ca4d34.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;SASS bisa juga melakukan perulangan menggunakan @each, yang ini silahkan baca di &lt;a href=&quot;http://sass-lang.com/documentation/file.SASS_REFERENCE.html&quot;&gt;official website&lt;/a&gt; nya ya.&lt;/p&gt;
&lt;p&gt;Demikian penjelasan singkat dari saya mengenai SASS sebagai CSS Pre-processor.&lt;/p&gt;
&lt;p&gt;Saya juga pernah membuat presentasi mengenai pengenalan SASS ini, silahkan dilihat &lt;a href=&quot;https://www.slideshare.net/IrfanMaulana21/bliblidotcom-sass-introduction&quot;&gt;disini&lt;/a&gt; atau &lt;a href=&quot;https://speakerdeck.com/mazipan/sass-css-preprocesoor-introduction&quot;&gt;disini&lt;/a&gt;. Baca juga artikel saya lainnya mengenai CSS, SASS dan hak terkait &lt;a href=&quot;https://mazipanneh.com/blog/tag/css/&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download Ebook Programming &lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Semoga bermanfaat bagi yang baru belajar mengenai SASS ya.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana di jam istirahat kerja.&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Memberi style CSS sederhana pada Radio Button</title>
      <link>https://mazipan.github.io/blogs/articles/memberi-style-css-sederhana-pada-radio-button/</link>
      <pubDate>Fri, 31 Mar 2017 10:24:37 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/memberi-style-css-sederhana-pada-radio-button/</guid>
      <author></author>
      <description>&lt;img width=&quot;469&quot; height=&quot;313&quot; alt=&quot;Memberi style CSS sederhana pada Radio Button&quot; src=&quot;https://i.stack.imgur.com/Ngv2E.png&quot; title=&quot;&quot; class=&quot;aligncenter size-custom&quot; /&gt;

&lt;p&gt;Pernahkan Anda melihat komponen input dengan tipe Radio standard yang di sajikan oleh HTML ? Betapa tidak enaknya dipandang mata bukan ? Maka sekarang kita akan coba memberikan sentuhan sederhana kita agar tampilan input dengan tipe Radio ini lebih nyaman untuk dilihat mata.&lt;/p&gt;
&lt;p&gt;Pertama, kita akan coba buat elemen HTML radio kita dan coba saja kita lihat apa yang ditampilkan oleh browser kita apabila tidak ada satupun style yang berada disana, berikut potongan kode HTML nya :&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/064088c71371de3ed8e7150e611b0b1b.json&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Dengan kode tersebut, akan menghasilkan tampilan seperti berikut :&lt;/p&gt;
&lt;figure style=&quot;width: 191px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*uyIFVh7aFFk0WHsg8nXEbA.png&quot; alt=&quot;Radio Button Standard&quot; width=&quot;191&quot; height=&quot;24&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;&lt;span style=&quot;color: #999999;&quot;&gt;&lt;em&gt;Radio Button Standard&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/span&gt;

&lt;p&gt;Bila Anda kesulitan memahami kode HTML tersebut Anda mungkin perlu membaca tulisan ini dahulu&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/2017/03/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-1-mengenal-html/&quot;&gt;Perjalanan Menjadi Frontend Developer Bagi Pemula – Seri 1 – Mengenal HTML&lt;/a&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Untuk memberikan sentuhan baru pada komponen ini, maka kita perlu menambahkan beberapa rule CSS kepada potongan kode HTML tersebut. Namun karena kita kan banyak mengulang kata-kata class utama yang akan kita beri style jadi saya memilih menggunakan pre-processor SASS agar membantu memudahkan dalam menulis style tersebut, bila Anda belum tau apa itu SASS silahkan baca dulu artikel berikut&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/2017/04/mengenal-dan-belajar-sass-sebagai-css-pre-processor/&quot;&gt;Mengenal&amp;nbsp;dan Belajar SASS Sebagai CSS Pre-Processor.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Langsung saja, saya telah membuat gist untuk kode SASS yang akan memberikan style pada elemen HTML kita diatas. Silahkan dibaca, dipelajari dan dimodifikasi seenak Anda sesuai dengan kebutuhan masing-masing. Anda bisa temui kodenya seperti berikut :&lt;/p&gt;
&lt;div class=&quot;gist-oembed&quot; data-gist=&quot;mazipan/b13a1add0b1983c6357092e360ed8f5f.json?file=simple-styling-radios.scss&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Tampilan dari kode diatas akan menghasilkan tampilan yang kurang lebih seperti gambar berikut :&lt;/p&gt;
&lt;figure style=&quot;width: 275px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*RMQD11Vh2eqfTe3hP94gUw.png&quot; alt=&quot;Radio Button Setelah diberi CSS&quot; width=&quot;275&quot; height=&quot;32&quot; /&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;&lt;span style=&quot;color: #999999;&quot;&gt;&lt;em&gt;Radio Button Setelah diberi CSS&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/span&gt;

&lt;p&gt;Pada intinya kita memanipulasi psedo element &lt;strong&gt;:before&lt;/strong&gt; dan &lt;strong&gt;:after&lt;/strong&gt; dari label input Radio tersebut dan menggantinya dengan border solid 1px yang ditambah border radius 50% agar menjadi lingkaran, kita juga menambahkan state di psedo class &lt;strong&gt;:checked&lt;/strong&gt; untuk membedakan ketika radio tersebut sedang dalam keadaan terpilih dan tidak.&lt;/p&gt;
&lt;p&gt;Selamat belajar ya, bila Anda pemula dan susah memahami beberapa istilah yang saya sebutkan diatas Anda mungkin perlu membaca tulisan ini terlebih dahulu&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/2017/03/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-2-mengenal-css/&quot;&gt;Perjalanan Menjadi Frontend Developer Bagi Pemula – Seri 2 – Mengenal CSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anda juga bisa melihat live preview dari pekerjaan tersebut &lt;a href=&quot;https://codepen.io/mazipan/pen/ryQZON&quot; target=&quot;_blank&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Telah di posting juga di medium saya &lt;a href=&quot;https://medium.com/@mazipanneh/sass-untuk-styling-sederhana-radio-1aaef180f62c&quot; target=&quot;_blank&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download Ebook Programming&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Terima kasih,&lt;/p&gt;
&lt;p&gt;Ditulis sesaat sebelum pulang kerja oleh Irfan Maulana&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Perjalanan Menjadi Frontend Developer Bagi Pemula - Seri 2 - Mengenal CSS</title>
      <link>https://mazipan.github.io/blogs/articles/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-2-mengenal-css/</link>
      <pubDate>Mon, 13 Mar 2017 22:12:36 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-2-mengenal-css/</guid>
      <author></author>
      <description>&lt;img class=&quot;aligncenter&quot; src=&quot;https://4.bp.blogspot.com/-bSC70QFZkuI/Vuww_pDfYWI/AAAAAAAAG9E/qyILtW2DIQQNAL6perYoxoMsU1bYnMSFQ/s640/css-introduction.png&quot; alt=&quot;Mengenal CSS&quot; /&gt;

&lt;p&gt;&lt;strong&gt;Mengenal CSS&lt;/strong&gt; - Setelah seri 1 &lt;a href=&quot;https://mazipanneh.com/blog/2017/03/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-1-mengenal-html/&quot;&gt;membahas HTML&lt;/a&gt;, pada seri kedua kali ini saya akan membahas mengenai CSS dasar.&lt;/p&gt;
&lt;p&gt;Sekali lagi saya mengingatkan bahwa tulisan ini adalah rangkaian untuk memberikan pengetahuan dasar bagi mereka yang pemula yang ingin belajar dan mengetahui dasar untuk menjadi Frontend Developer.&lt;/p&gt;
&lt;p&gt;Berikut bahasan mengenai CSS, silahkan disimak.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apa itu CSS ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS merupakan kependekan dari &lt;em&gt;Cascading Style Sheet&lt;/em&gt;. Beberapa orang menyebut CSS merupakan kosmetik dari sebuah halaman web namun pada penerapannya CSS seringkali mempunyai peran yang lebih vital dari hanya sebuah kosmetik. CSS memberikan layout, posisi, eksistensi dan variasi pada sebuah elemen HTML, CSS juga menentukan bagaimana satu elemen HTML ditampilkan disebuah website. CSS menghapuskan penggunaan HTML attribute sebagai style formatting dan memindahkan ke dalam CSS.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bagaimana memulai CSS ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS datang bersamaan dengan HTML tag&lt;/p&gt;
&lt;pre&gt;&amp;lt;style&amp;gt;
    body{something}
&amp;lt;/style&amp;gt;&amp;nbsp;
&lt;/pre&gt;

&lt;p&gt;di dalam &lt;em&gt;head&lt;/em&gt; block dari sebuah HTML, saya biasa menyebut CSS seperti ini sebagai &lt;strong&gt;internal CSS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;CSS juga bisa datang bersamaan dengan HTML elemen dengan langsung menambahkan attribut&lt;/p&gt;
&lt;pre&gt;&amp;lt;div style=&quot;...&quot;&amp;nbsp;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;pada elemen tersebut, saya sendiri menyebut CSS seperti ini sebagai &lt;strong&gt;inline CSS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Selain itu CSS juga bisa di definikan di file tersendiri yang artinya terpisah dari file HTML nya yakni menggunakan file dengan ekstensi .css. Untuk memanggilnya sendiri menggunakan tag &lt;em&gt;link&lt;/em&gt; didalam head block juga, namun dengan pendefinisian url path dari file tersebut, misal&lt;/p&gt;
&lt;pre&gt;&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;pathFileCSS&quot; /&amp;gt;&amp;nbsp;
&lt;/pre&gt;

&lt;p&gt;CSS seperti ini saya sebut sebagai &lt;strong&gt;eksternal CSS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;CSS memiliki urutan prioritas tersendiri bila ada hal yang sama didefinisikan namun dengan tipe CSS yang berbeda-beda, berikut adalah urutan prioritas tersebut :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inline CSS langsung pada attribute HTML.&lt;/li&gt;
&lt;li&gt;Internal CSS dan kemudian Eksternal CSS yang terdefinikan di head.&lt;/li&gt;
&lt;li&gt;User Agent CSS atau CSS standard bawaan dari masing-masing browser.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS Syntax&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Syntax css ditulis menggunakan key-value dengan colon atau titik dua (:) sebagai pembatas antara key dan value ini, sementara untuk pembatas antara rule menggunakan semicolon atau titik koma (;).&lt;/p&gt;
&lt;p&gt;Misal :&lt;/p&gt;
&lt;pre&gt;font-size: 14px;
color: red;
&lt;/pre&gt;

&lt;p&gt;Jika menggunakan internal maupun eksternal CSS maka masing-masing rule dibuka dan tutup menggunakab curly bracket ({}), misal :&lt;/p&gt;
&lt;pre&gt;.font-red{
    font-size: 14px;
    color: red;
}
.font-blue{
    font-size: 14px;
    color: blue;
}
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS Selector Dasar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS Selector digunakan untuk mencari element HTML yang akan diberikan style. CSS akan memberikan style kepada elemen HTML yang didefinisikan di dalam selector seperti berdasarkan attribut id, class atau yang lainnya. Selector ID digunakan untuk mencari elemen yang unik yang memiliki attribute ID seperti yang dituliskan dan hanya satu di suatu halaman web. Selector ID ditulis menggunakan awalan tagar (#) kemudian nama ID dari elemen tersebut, contoh :&lt;/p&gt;
&lt;pre&gt;#font-red{
    font-size: 14px;
    color: red;
}
&lt;/pre&gt;

&lt;p&gt;Selector class akan memberikan style kepada semua elemen HTML yang memiliki attribute class dengan nilai seperti yang tersebut. Class ini tidak unik seperti ID dan tujuannya memang agar bisa digunakan berulang-ulang. Selector class ini ditulis dengan awalan titik (.), contoh :&lt;/p&gt;
&lt;pre&gt;.font-red{
    font-size: 14px;
    color: red;
}
&lt;/pre&gt;

&lt;p&gt;Kita bisa juga menggunakan selector langsung berupa element HTML nya yang mana akan berefek ke semua elemen yang di definisikan, contoh :&lt;/p&gt;
&lt;pre&gt;input{
    font-size: 14px;
    color: red;
}
a{
    color: blue;
}
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS Selector Kombinasi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Selector bisa juga dikombinasikan lebih dari satu, tujuannya biasanya untuk lebih mendetailkan pencarian suatu elemen. Selector kombinasi ini bisa dibagi menjadi dua berdasarkan funsinya.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bersarang (Nested)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Digunakan untuk mencari anak dari suatu elemen HTML berdasarkan parent nya, contoh :&lt;/p&gt;
&lt;pre&gt;.class1 p{
    color: red;
}
.class1 &amp;gt; p{
    color: blue;
}
&lt;/pre&gt;

&lt;p&gt;Kita bisa menggunakan spasi maupun tanda panah kekanan (&amp;gt;), dimana spasi akan mengambil semua anak dari parent nya sedangkan tanda &amp;gt; hanya akan mengambil anak yang tepat berada dibawah parentnya.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Bersebelahan (Sibling)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Untuk mencari sibling dari suatu elemen kita bisa menggunakan tanda (+) maupun tanda (&lt;del&gt;), dimana tanda (+) akan mencari yang tepat dan terdekat berada di sebelah (bukan sebagai anaknya) suatu elemen sedangkan tanda (&lt;/del&gt;) akan mencari semua yang ada disebelah elemen tersebut, contoh :&lt;/p&gt;
&lt;pre&gt;.class1 + p{
    color: red;
}
.class1 ~ p{
    color: blue;
}
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS Selector Lanjutan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kita bisa juga memilih suatu elemen yang mengandung suatu kata, misal :&lt;/p&gt;
&lt;pre&gt;[class*=&quot;bli-&quot;]{
    color: red;
}
&lt;/pre&gt;

&lt;p&gt;Yang artinya kita ingin mendapatkan semua elemen yang mempunyai class dengan awalan bli-.&lt;/p&gt;
&lt;p&gt;Lebih lanjut soal selector CSS bisa dibaca &lt;a href=&quot;https://www.w3schools.com/cssref/css_selectors.asp&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudo Class&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Digunakan untuk mendefinisikan beberapa spesial state dari suatu elemen HTML seperti ketika di hover, ketika aktif, ketika di disable dan state lainnya. Syntaxnya menggunakan titik dua (:) setelah selectornya, misal :&lt;/p&gt;
&lt;pre&gt;.link:hover{
    color: red;
}
.link:focus{
    color: red;
}
.link:active{
    color: red;
}

&lt;/pre&gt;

&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudo Element&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Digunakan untuk memberikan style pada suatu bagian tertentu di dalam element HTML. Syntaxnya menggunakan dua kali titik dua (::) setelah selectornya, misal :&lt;/p&gt;
&lt;pre&gt;.link::before{
    color: red;
}
.link::after{
    color: red;
}
ul li::last-child{
    color: red;
}

&lt;/pre&gt;

&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Menggabungkan Rule&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kita bisa menggabungkan beberapa rule yang memiliki spesifikasi sama kedalam satu inisialisasi. Syntaxnya menggunakan koma (,), misal :&lt;/p&gt;
&lt;pre&gt;.link, a, .ref{
    color: red;
}

&lt;/pre&gt;

&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Catatan tambahan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Materi ini juga pernah saya bawakan di beberapa forum, berikut sumber materi nya :&lt;/p&gt;
&lt;p&gt;Slide presentasi :&amp;nbsp;&lt;a href=&quot;https://www.slideshare.net/IrfanMaulana21/journey-to-the-front-end-world-part2-the-cosmetic&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Contoh kode :&amp;nbsp;&lt;a href=&quot;https://github.com/mazipan/journey-to-the-frontend-world/tree/master/part-2&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Halaman demo :&amp;nbsp;&lt;a href=&quot;https://mazipan.github.io/journey-to-the-frontend-world/part-2/index.html&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download Ebook Programming&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Perjalanan Menjadi Frontend Developer Bagi Pemula - Seri 1 - Mengenal HTML</title>
      <link>https://mazipan.github.io/blogs/articles/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-1-mengenal-html/</link>
      <pubDate>Sun, 12 Mar 2017 16:31:48 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/perjalanan-menjadi-frontend-developer-bagi-pemula-seri-1-mengenal-html/</guid>
      <author></author>
      <description>&lt;img class=&quot;aligncenter&quot; src=&quot;https://d3rj1gznkm47xj.cloudfront.net/6c91737b-715e-4c59-aad0-b947bb097907.png&quot; alt=&quot;Mengenal HTML&quot; /&gt;

&lt;p&gt;&lt;strong&gt;Mengenal HTML&lt;/strong&gt; - Web developer kini bisa dipisahkan ke dalam 2 spesialisasi yakni Backend dan Frontend developer. Dalam post ini kita akan membahas beberapa pengetahuan dasar untuk menjadi Frontend developer.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Pada postingan pertama saya akan membahas pengetahuan dasar mengenai HTML, kenapa dimulai dari HTML ? Tentu saja karena HTML menjadi dasar bagi semua web developer dan saya ingin membahas dari hal yang mendasar karena memang target dari post ini adalah mereka yang benar-benar pemula dan ingin belajar mengenai web development terutama di sisi Frontend.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apa itu HTML ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML atau Hypertext Markup Language merupakan kerangka dari halaman website, suatu kode yang membangun sebuah tampilan website. Saya memberikan ilustrasi bahwa membuat kode HTML sama seperti saat kita bermain game _Tetris&amp;nbsp;_dimana kita diharuskan meletakkan satu blok ke dalam tempat yang sesuai, bila di anggap bahwa website itu adalah sebuah rumah maka HTML adalah batu bata yang menyusun dan menegakkan rumah tersebut.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;HTML Dasar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML mempunyai inisialisasi deklarasi di baris paling awal&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Setiap element HTML diawali dengan tag pembuka dan diakhiri dengan tag penutup.&lt;/p&gt;
&lt;p&gt;Kita bisa memulai kode HTML di dalam tag&lt;/p&gt;
&lt;pre&gt;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Di bawah html tag ada tag &lt;em&gt;head&lt;/em&gt; yang berisi informasi mengenai identitas suatu website seperti title, icon, metatag.&lt;/p&gt;
&lt;p&gt;Di dalam tag &lt;em&gt;head&lt;/em&gt; kita juga bisa manambahkan sumber daya eksternal yang dibutuhkan untuk di load diawal seperti CSS ataupun kritikal Javascript.&lt;/p&gt;
&lt;p&gt;Setelah tag head baru akan ada tag _body_, di dalam tag body inilah kita akan menulis komponen HTML kita yang sebenarnya.&lt;/p&gt;
&lt;p&gt;Sebelum tag penutup &lt;em&gt;body&lt;/em&gt; biasanya digunakan untuk meload script baik internal maupun eksternal.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML Element&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML Element merupakan semua yang dimulai tag pembuka dan diakhiri dengan tag penutup.&lt;/p&gt;
&lt;p&gt;HTML Element bisa dibuat bersarang (nested), yang artinya suatu elemen menjadi anak (child) dari elemen lainnya, contoh :&lt;/p&gt;
&lt;pre&gt;&amp;lt;div&amp;gt;
&amp;nbsp; &amp;nbsp; I am parent
&amp;nbsp; &amp;nbsp; &amp;lt;div&amp;gt;I am child&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML Attribute&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML Attribute merupakan informasi tambahan pada sebuah HTML Element.&lt;/p&gt;
&lt;p&gt;Di deklarasikan pada tag pembuka dari sebuah HTML Element.&lt;/p&gt;
&lt;p&gt;HTML Element biasanya berupa key-value, contoh :&lt;/p&gt;
&lt;pre&gt;&amp;lt;div id=&quot;sayaSebuahAttribute&quot;&amp;nbsp;
class=&quot;sayaJugaAttibute&quot;&amp;nbsp;
data-target=&quot;iniJugaLoh&quot;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Heading dan Text&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tag heading yang biasa digunakan untuk title dan subtitle adalah h1, h2, &amp;#8230; h6. Penggunaan heading dapat membantu SEO karena memudahkan search engine untuk mengidentifikasi halaman website Anda. Heading akan membuat satu block yang artinya elemen setelahnya akan berada di baris baru bukan disampingnya.&lt;/p&gt;
&lt;p&gt;Untuk text sendiri kita bisa menggunakan tag  &lt;em&gt;p&lt;/em&gt; yang mewakili sebuah paragraf baru ataupun &lt;em&gt;span&lt;/em&gt; yang merupakan text biasa. Pada text juga terdapat beberapa tahun yang bisa digunakan untuk formating seperti _strong, b, i, em, small_, dan lainnya.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Block&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Block adalah elemen HTML yang sering kali digunakan sebagai wadah bagi elemen-elemen lain. Sifat dasar block ini sendiri akan membuat satu baris baru dari elemen terakhir diatasnya.&lt;/p&gt;
&lt;p&gt;Block yang paling umum digunakan adalah tag &lt;em&gt;div&lt;/em&gt;. Selain itu ada beberapa tag block yang merepresentasikan posisinya seperti&amp;nbsp;&lt;em&gt;header, main, footer, aside, nav, article, section,&lt;/em&gt; dan lain-lain.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Table digunakan untuk menampilkan data atau bisa juga untuk mengorganisir beberapa elemen dengan lebih mudah dan teratur. Seperti namanya table ditandai dengan tag &lt;em&gt;&lt;table&gt;&lt;/table&gt;&lt;/em&gt;.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Di dalam table ada sebuah wadah&amp;nbsp;&lt;em&gt;thead&lt;/em&gt; yang merupakan wadah bagi header sebuah tabel dan juga &lt;em&gt;tbody&lt;/em&gt; yang merupakan wadah bagi isi konten dari tabel tersebut.&lt;/p&gt;
&lt;p&gt;Baris pada sebuah table ditandai dengan tag &lt;em&gt;&lt;tr&gt;&lt;/em&gt; sedangkan untuk kolom digunakan tag &lt;em&gt;&lt;td&gt;&lt;/em&gt; kecuali jika kolom tersebut ada di dalam header maka bisa digunakan tag &lt;em&gt;&lt;th&gt;._&amp;nbsp;Kita bisa juga menggabungkan beberapa baris atau kolom dengan menambahkan attribute _rowspan&lt;/em&gt; atau &lt;em&gt;colspan&lt;/em&gt; di element yang akan digabungkan.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;List merupakan elemen yang digunakan untuk menyajikan data atau elemen secara berurutan kebawah. Untuk membuat liat kita bisa menggunakan block &lt;ul&gt;&amp;nbsp;&lt;/ul&gt; atau &lt;ol&gt;&amp;nbsp;&lt;/ol&gt; dimana &lt;em&gt;ol&lt;/em&gt; biasa dikenal dengan ordered list atau liat yang berurutan dan &lt;em&gt;ul&lt;/em&gt; sebaliknya. Untuk item dibawah nya kita bisa menggunakan tag &lt;li&gt;&amp;nbsp;&lt;/li&gt;.&lt;/p&gt;
&lt;p&gt;Yang perlu di garis bawahi adalah bahwa kita bisa menggunakan list tidak selalu untuk hal yg disusun berurutan secara horizontal namun bisa juga hal lainnya, namun kita sering menggunakan listrik ketika harus bermain dengan siblings nya pada akhirnya, seperti saat pembuatan menu atau navigasi.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Form&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Form merupakan kumpulan dari beberapa inputan yang akan dikirimkan/diproses secara bersamaan.&lt;/p&gt;
&lt;p&gt;Menggunakan tag &lt;form&gt;&amp;nbsp;&lt;/form&gt; sebagai deklarasi nya dan terdapat block &lt;fieldset&gt;&amp;nbsp;&lt;/fieldset&gt; sebagai wadah bagi beberapa inputan yang akan disatukan kedalam satu kelompok tampilan.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Input merupakan elemen yang bisa menerima isian dari pengguna. Terdapat banyak variasi dari input element ini yang masing-masing nya memiliki kegunaan dan tampilan yang berbeda sesuai dengan spesifikasi nya.&lt;/p&gt;
&lt;p&gt;Beberapa bisa dibedakan dengan menjelaskan attribute &lt;em&gt;type&lt;/em&gt; pada input element ini. Attribute type yang tersedia antara lain : &lt;em&gt;text, password, number, tel, email, date, range, radio, checkbox&lt;/em&gt; dan lain-lain.&lt;/p&gt;
&lt;p&gt;Inputan dengan tipe &lt;em&gt;radio&lt;/em&gt; digunakan ketika pengguna hanya bisa memilih satu dari pilihan yang disediakan, jika pengguna bisa memilih lebih dari satu maka gunakan tipe &lt;em&gt;checkbox&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Anda bisa menggunakan &lt;em&gt;select&lt;/em&gt; dan &lt;em&gt;option&lt;/em&gt; jika pilihan yang disediakan terlalu banyak untuk ditampilkan.&lt;/p&gt;
&lt;p&gt;Inputan dengan tipe &lt;em&gt;submit&lt;/em&gt; akan mengirimkan semua data yang ada dalam form ketika ditekan.&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Latihan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Percuma membaca seharian bila belum mencoba sendiri, ayo mulai buat layout sederhana kalian sendiri.&lt;/p&gt;
&lt;p&gt;Saya sendiri akan membuat satu tampilan CRUD dari sebuah Contact yang berisi nama, email, gender dan alamat. Selamat berkreasi&amp;#8230; &amp;#x1f4aa;&amp;#x1f4aa;&amp;#x1f4aa;&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bahan Bacaan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Baca lebih lengkap disini :&amp;nbsp;&lt;a href=&quot;https://www.w3schools.com/html/&quot;&gt;https://www.w3schools.com/html/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;p&gt;** &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Catatan tambahan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Materi ini juga pernah saya bawakan di beberapa forum, berikut sumber materi nya :&lt;/p&gt;
&lt;p&gt;Slide presentasi :&amp;nbsp;&lt;a href=&quot;https://www.slideshare.net/IrfanMaulana21/journey-to-the-front-end-world-part1-the-skeleton&quot;&gt;https://www.slideshare.net/IrfanMaulana21/journey-to-the-front-end-world-part1-the-skeleton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Contoh kode :&amp;nbsp;&lt;a href=&quot;https://github.com/mazipan/journey-to-the-frontend-world/tree/master/part-1&quot;&gt;https://github.com/mazipan/journey-to-the-frontend-world/tree/master/part-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Halaman demo :&amp;nbsp;&lt;a href=&quot;https://mazipan.github.io/journey-to-the-frontend-world/part-1/index.html&quot;&gt;https://mazipan.github.io/journey-to-the-frontend-world/part-1/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download Ebook Programming&amp;nbsp;&lt;a href=&quot;https://mazipanneh.com/blog/download-ebook-programming/&quot;&gt;disini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jangan lupa nantikan seri selanjutnya ya &amp;#x1f609;&amp;#x1f609;&amp;#x1f609;&lt;/p&gt;
&lt;p&gt;Ditulis di malam hari setelah menonton bola kala itu.&lt;/p&gt;
&lt;p&gt;Terima Kasih,&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Blog Baru, Semangat Baru</title>
      <link>https://mazipan.github.io/blogs/articles/blog-baru-semangat-baru/</link>
      <pubDate>Fri, 10 Mar 2017 19:24:50 +0000</pubDate>
      <guid isPermaLink="true">https://mazipan.github.io/blogs/articles/blog-baru-semangat-baru/</guid>
      <author></author>
      <description>&lt;/p&gt; 

&lt;p&gt;Saya sudah menulis blog sejak 2011-an, waktu itu jaman-jaman masih kuliah. Jaman masih semangat-semangatnya nulis. Anda bisa menemukan tulisan lama saya di Blog lama saya &lt;a href=&quot;https://mazipanneh.wordpress.com&quot; target=&quot;_blank&quot;&gt;disini&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Namun ya seperti biasa, saya hanya menulis jika sedang ingin saja dan saya rasa sudah lama sejak post terakhir saya publish. Belum lama ini saya coba menulis di Blog yang self hosted, tujuannya biar bisa lebih advance lagi seperti atur SEO, bisa lebih di customize blog nya dan yang penting biar ada semangat baru buat nulis dengan adanya Blog baru ini, Blog Baru Semangat Baru.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Blog ini masih setia dengan platform WordPress yang sudah sangat familiar dengan saya selama beberapa tahun belakangan. Mungkin karena saya juga bisanya cuma platform ini dan menurut saya sendiri lumayan enak dan mudah untuk digunakan apalagi bagi mereka yang baru memulai Blogging.&lt;/p&gt;
&lt;p&gt;Dan akhirnya selamat datang di Blog saya, semoga kedepannya bisa mulai menulis lagi hal-hal yang bermanfaat, semoga dengan Blog baru ini akan ada gairah baru dalam berbagi ilmu pengetahuan kepada yang lain, Blog Baru Semangat Baru.&lt;/p&gt;
&lt;p&gt;Ditulis oleh Irfan Maulana di kala Maghrib waktu itu. &amp;#x1f605;&lt;/p&gt;
&lt;p&gt;Salam.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>